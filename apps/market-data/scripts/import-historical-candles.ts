#!/usr/bin/env bun

/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö —Å–≤–µ—á–µ–π —Å Binance –≤ ClickHouse
 * –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: bun run scripts/import-historical-candles.ts [symbol] [timeframe] [days]
 */

import path from "node:path";
import type { Candle } from "@aladdin/shared/types";
import { config } from "dotenv";
import { ClickHouseService } from "../../../packages/shared/src/clickhouse";

// –ó–∞–≥—Ä—É–∂–∞–µ–º .env –∏–∑ –∫–æ—Ä–Ω—è –ø—Ä–æ–µ–∫—Ç–∞
config({ path: path.resolve(__dirname, "../../../.env") });

const MILLISECONDS_TO_SECONDS = 1000;
const DELAY_BETWEEN_REQUESTS = 200; // 200ms –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
const MAX_CANDLES_PER_REQUEST = 1000; // Binance –ª–∏–º–∏—Ç

// –ü–æ–ª—É—á–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏–∑ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
const symbol = process.argv[2]?.toUpperCase() || "BTCUSDT";
const timeframe = process.argv[3] || "15m";
const days = Number(process.argv[4]) || 7;

// –ú–∞–ø–ø–∏–Ω–≥ timeframe –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥—ã
const TIMEFRAME_MS: Record<string, number> = {
  "1m": 60 * 1000,
  "5m": 5 * 60 * 1000,
  "15m": 15 * 60 * 1000,
  "30m": 30 * 60 * 1000,
  "1h": 60 * 60 * 1000,
  "4h": 4 * 60 * 60 * 1000,
  "1d": 24 * 60 * 60 * 1000,
};

function sleep(ms: number): Promise<void> {
  return new Promise((resolve) => setTimeout(resolve, ms));
}

async function fetchCandlesFromBinance(
  symbol: string,
  interval: string,
  startTime: number,
  endTime: number
): Promise<Candle[]> {
  const url = `https://api.binance.com/api/v3/klines?symbol=${symbol}&interval=${interval}&startTime=${startTime}&endTime=${endTime}&limit=${MAX_CANDLES_PER_REQUEST}`;

  const response = await fetch(url);

  if (!response.ok) {
    throw new Error(`Binance API error: ${response.statusText}`);
  }

  const data = (await response.json()) as [
    number, // 0: Open time
    string, // 1: Open
    string, // 2: High
    string, // 3: Low
    string, // 4: Close
    string, // 5: Volume
    number, // 6: Close time
    string, // 7: Quote asset volume
    number, // 8: Number of trades
    string, // 9: Taker buy base asset volume
    string, // 10: Taker buy quote asset volume
    string, // 11: Ignore
  ][];

  return data.map((item) => ({
    timestamp: Math.floor(item[0] / MILLISECONDS_TO_SECONDS),
    symbol,
    timeframe: interval,
    open: Number.parseFloat(item[1]),
    high: Number.parseFloat(item[2]),
    low: Number.parseFloat(item[3]),
    close: Number.parseFloat(item[4]),
    volume: Number.parseFloat(item[5]),
    quoteVolume: Number.parseFloat(item[7]),
    trades: item[8],
    exchange: "binance",
  }));
}

async function main() {
  console.log("üöÄ –ò–º–ø–æ—Ä—Ç –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö —Å–≤–µ—á–µ–π —Å Binance");
  console.log(`üìä –°–∏–º–≤–æ–ª: ${symbol}`);
  console.log(`‚è±Ô∏è –¢–∞–π–º—Ñ—Ä–µ–π–º: ${timeframe}`);
  console.log(`üìÖ –î–Ω–µ–π: ${days}`);
  console.log("");

  const clickhouse = new ClickHouseService({
    host: process.env.CLICKHOUSE_HOST || "localhost",
    port: process.env.CLICKHOUSE_PORT
      ? Number(process.env.CLICKHOUSE_PORT)
      : undefined,
    username: process.env.CLICKHOUSE_USER || "default",
    password: process.env.CLICKHOUSE_PASSWORD || "",
    database: process.env.CLICKHOUSE_DATABASE || "aladdin",
  });

  console.log("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ ClickHouse —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ");
  console.log("");

  const timeframeMs = TIMEFRAME_MS[timeframe];
  if (!timeframeMs) {
    console.error(`‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∞–π–º—Ñ—Ä–µ–π–º: ${timeframe}`);
    process.exit(1);
  }

  // –í—ã—á–∏—Å–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ä–∞–º–∫–∏
  const endTime = Date.now();
  const startTime = endTime - days * 24 * 60 * 60 * 1000;

  // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–≤–µ—á–µ–π, –∫–æ—Ç–æ—Ä–æ–µ –º—ã –æ–∂–∏–¥–∞–µ–º –ø–æ–ª—É—á–∏—Ç—å
  const expectedCandles = Math.floor((endTime - startTime) / timeframeMs);
  console.log(`üìà –û–∂–∏–¥–∞–µ—Ç—Å—è –ø—Ä–∏–º–µ—Ä–Ω–æ ${expectedCandles} —Å–≤–µ—á–µ–π`);
  console.log("");

  let totalCandles = 0;
  let requestCount = 0;
  let currentStartTime = startTime;

  // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ—Ä—Ü–∏—è–º–∏
  while (currentStartTime < endTime) {
    requestCount++;
    const currentEndTime = Math.min(
      currentStartTime + MAX_CANDLES_PER_REQUEST * timeframeMs,
      endTime
    );

    try {
      console.log(
        `üì• [${requestCount}] –ó–∞–ø—Ä–æ—Å —Å–≤–µ—á–µ–π —Å ${new Date(currentStartTime).toISOString()} –ø–æ ${new Date(currentEndTime).toISOString()}...`
      );

      const candles = await fetchCandlesFromBinance(
        symbol,
        timeframe,
        currentStartTime,
        currentEndTime
      );

      if (candles.length > 0) {
        // –§–∏–ª—å—Ç—Ä—É–µ–º –ø—É—Å—Ç—ã–µ —Å–≤–µ—á–∏
        const validCandles = candles.filter(
          (c) => c.volume > 0 && c.trades > 0
        );

        if (validCandles.length > 0) {
          await clickhouse.insert("candles", validCandles);
          totalCandles += validCandles.length;
          console.log(
            `‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ ${validCandles.length} —Å–≤–µ—á–µ–π (–ø—Ä–æ–ø—É—â–µ–Ω–æ –ø—É—Å—Ç—ã—Ö: ${candles.length - validCandles.length})`
          );
        } else {
          console.log(`‚ö†Ô∏è –í—Å–µ ${candles.length} —Å–≤–µ—á–µ–π –ø—É—Å—Ç—ã–µ, –ø—Ä–æ–ø—É—â–µ–Ω–æ`);
        }

        // –î–≤–∏–≥–∞–µ–º—Å—è –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –∏–Ω—Ç–µ—Ä–≤–∞–ª—É –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–æ—Å–ª–µ–¥–Ω–µ–π –ø–æ–ª—É—á–µ–Ω–Ω–æ–π —Å–≤–µ—á–∏
        const lastCandleTime = candles[candles.length - 1].timestamp * 1000;
        currentStartTime = lastCandleTime + timeframeMs;
      } else {
        console.log("‚ö†Ô∏è –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö, –ø–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –∏–Ω—Ç–µ—Ä–≤–∞–ª—É");
        currentStartTime = currentEndTime;
      }

      // –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
      if (currentStartTime < endTime) {
        await sleep(DELAY_BETWEEN_REQUESTS);
      }
    } catch (error) {
      console.error(
        `‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö —Å ${new Date(currentStartTime).toISOString()}:`,
        error
      );
      // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –∏–Ω—Ç–µ—Ä–≤–∞–ª—É –¥–∞–∂–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ
      currentStartTime = currentEndTime;
      await sleep(DELAY_BETWEEN_REQUESTS);
    }
  }

  console.log("");
  console.log("=".repeat(50));
  console.log("‚úÖ –ò–º–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à–µ–Ω!");
  console.log(`üìä –í—Å–µ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤: ${requestCount}`);
  console.log(`üìà –í—Å–µ–≥–æ —Å–≤–µ—á–µ–π –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ: ${totalCandles}`);
  console.log(`‚è±Ô∏è –û–∂–∏–¥–∞–ª–æ—Å—å –ø—Ä–∏–º–µ—Ä–Ω–æ: ${expectedCandles}`);
  console.log(
    `üìâ –ü—Ä–æ—Ü–µ–Ω—Ç –æ—Ö–≤–∞—Ç–∞: ${Math.round((totalCandles / expectedCandles) * 100)}%`
  );
  console.log("=".repeat(50));

  process.exit(0);
}

main().catch((error) => {
  console.error("‚ùå –û—à–∏–±–∫–∞:", error);
  process.exit(1);
});
