import type { WhaleAlert } from "@aladdin/shared/types";
import { useCallback, useEffect, useState } from "react";
import { useWebSocket } from "./use-websocket";

type WhaleAlertMessage = {
  type: "whale_alert";
  data: WhaleAlert | WhaleAlert[];
};

const MAX_ALERTS = 100;
const DECIMAL_PRECISION = 4;

/**
 * Hook –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è real-time whale –∞–ª–µ—Ä—Ç–æ–≤ —á–µ—Ä–µ–∑ WebSocket
 *
 * @param blockchain - —Ñ–∏–ª—å—Ç—Ä –ø–æ –±–ª–æ–∫—á–µ–π–Ω—É (BTC/ETH) –∏–ª–∏ undefined –¥–ª—è –≤—Å–µ—Ö
 * @param enabled - –≤–∫–ª—é—á–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É
 *
 * @example
 * ```tsx
 * const { alerts, unreadCount, markAsRead, clearAll } = useWhaleAlerts("BTC");
 * ```
 */
export function useWhaleAlerts(blockchain?: "BTC" | "ETH", enabled = true) {
  const [alerts, setAlerts] = useState<WhaleAlert[]>([]);
  const [unreadIds, setUnreadIds] = useState<Set<string>>(new Set());
  const { data, subscribe, unsubscribe, isConnected } =
    useWebSocket<WhaleAlertMessage>();

  // –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ whale –∞–ª–µ—Ä—Ç—ã
  useEffect(() => {
    if (isConnected && enabled) {
      const channel = blockchain
        ? `whale.alert.${blockchain.toLowerCase()}`
        : "whale.alert.*";

      console.log(`[Whale Alerts] Subscribing to ${channel}`);
      subscribe(channel);

      return () => {
        console.log(`[Whale Alerts] Unsubscribing from ${channel}`);
        unsubscribe(channel);
      };
    }
  }, [isConnected, blockchain, enabled, subscribe, unsubscribe]);

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ö–æ–¥—è—â–∏—Ö –∞–ª–µ—Ä—Ç–æ–≤
  useEffect(() => {
    if (data && data.type === "whale_alert") {
      const newAlerts = Array.isArray(data.data) ? data.data : [data.data];

      setAlerts((prev) => {
        // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ –∞–ª–µ—Ä—Ç—ã –≤ –Ω–∞—á–∞–ª–æ —Å–ø–∏—Å–∫–∞
        const combined = [...newAlerts, ...prev];

        // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–ª–µ—Ä—Ç–æ–≤
        return combined.slice(0, MAX_ALERTS);
      });

      // –û—Ç–º–µ—á–∞–µ–º –Ω–æ–≤—ã–µ –∞–ª–µ—Ä—Ç—ã –∫–∞–∫ –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–µ
      setUnreadIds((prev) => {
        const updated = new Set(prev);
        for (const alert of newAlerts) {
          const alertId = `${alert.blockchain}-${alert.transactionHash}`;
          updated.add(alertId);
        }
        return updated;
      });

      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ (–µ—Å–ª–∏ –±—Ä–∞—É–∑–µ—Ä –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç)
      if ("Notification" in window && Notification.permission === "granted") {
        for (const alert of newAlerts) {
          const title = getAlertTitle(alert);
          const body = `${alert.value.toFixed(DECIMAL_PRECISION)} ${alert.blockchain} - ${alert.alertType}`;

          new Notification(title, {
            body,
            icon: "/favicon.ico",
            tag: alert.transactionHash,
          });
        }
      }
    }
  }, [data]);

  // –û—Ç–º–µ—Ç–∏—Ç—å –∞–ª–µ—Ä—Ç—ã –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–µ
  const markAsRead = useCallback((alertIds: string[]) => {
    setUnreadIds((prev) => {
      const updated = new Set(prev);
      for (const id of alertIds) {
        updated.delete(id);
      }
      return updated;
    });
  }, []);

  // –û—Ç–º–µ—Ç–∏—Ç—å –≤—Å–µ –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–µ
  const markAllAsRead = useCallback(() => {
    setUnreadIds(new Set());
  }, []);

  // –û—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ –∞–ª–µ—Ä—Ç—ã
  const clearAll = useCallback(() => {
    setAlerts([]);
    setUnreadIds(new Set());
  }, []);

  const unreadCount = unreadIds.size;

  return {
    alerts,
    unreadCount,
    unreadIds,
    markAsRead,
    markAllAsRead,
    clearAll,
    isConnected,
  };
}

/**
 * –ü–æ–ª—É—á–∏—Ç—å –∑–∞–≥–æ–ª–æ–≤–æ–∫ –¥–ª—è –∞–ª–µ—Ä—Ç–∞
 */
function getAlertTitle(alert: WhaleAlert): string {
  switch (alert.alertType) {
    case "whale_tx":
      return "üêã Whale Transaction";
    case "exchange_inflow":
      return `üì• Exchange Inflow ${alert.exchange ? `(${alert.exchange})` : ""}`;
    case "exchange_outflow":
      return `üì§ Exchange Outflow ${alert.exchange ? `(${alert.exchange})` : ""}`;
    case "large_transfer":
      return "üí∞ Large Transfer";
    default:
      return "üîî Whale Alert";
  }
}

/**
 * –•—É–∫ –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
 */
export function useNotificationPermission() {
  const [permission, setPermission] = useState<NotificationPermission>(
    typeof window !== "undefined" && "Notification" in window
      ? Notification.permission
      : "default"
  );

  const requestPermission = useCallback(async () => {
    if ("Notification" in window && Notification.permission === "default") {
      const result = await Notification.requestPermission();
      setPermission(result);
      return result;
    }
    return permission;
  }, [permission]);

  return {
    permission,
    requestPermission,
    isGranted: permission === "granted",
    isDenied: permission === "denied",
  };
}
