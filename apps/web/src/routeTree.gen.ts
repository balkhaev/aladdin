/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as TradingRouteImport } from './routes/trading'
import { Route as PublicRouteImport } from './routes/_public'
import { Route as AuthRouteImport } from './routes/_auth'
import { Route as IndexRouteImport } from './routes/index'
import { Route as PublicLoginRouteImport } from './routes/_public.login'
import { Route as AuthSettingsRouteImport } from './routes/_auth.settings'
import { Route as AuthSentimentRouteImport } from './routes/_auth.sentiment'
import { Route as AuthScreenerRouteImport } from './routes/_auth.screener'
import { Route as AuthPortfolioRouteImport } from './routes/_auth.portfolio'
import { Route as AuthOnChainRouteImport } from './routes/_auth.on-chain'
import { Route as AuthMarketRouteImport } from './routes/_auth.market'
import { Route as AuthExecutorRouteImport } from './routes/_auth.executor'
import { Route as AuthDebugRouteImport } from './routes/_auth.debug'
import { Route as AuthBacktestRouteImport } from './routes/_auth.backtest'
import { Route as AuthAnalyticsUnifiedRouteImport } from './routes/_auth.analytics-unified'

const TradingRoute = TradingRouteImport.update({
  id: '/trading',
  path: '/trading',
  getParentRoute: () => rootRouteImport,
} as any)
const PublicRoute = PublicRouteImport.update({
  id: '/_public',
  getParentRoute: () => rootRouteImport,
} as any)
const AuthRoute = AuthRouteImport.update({
  id: '/_auth',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const PublicLoginRoute = PublicLoginRouteImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => PublicRoute,
} as any)
const AuthSettingsRoute = AuthSettingsRouteImport.update({
  id: '/settings',
  path: '/settings',
  getParentRoute: () => AuthRoute,
} as any)
const AuthSentimentRoute = AuthSentimentRouteImport.update({
  id: '/sentiment',
  path: '/sentiment',
  getParentRoute: () => AuthRoute,
} as any)
const AuthScreenerRoute = AuthScreenerRouteImport.update({
  id: '/screener',
  path: '/screener',
  getParentRoute: () => AuthRoute,
} as any)
const AuthPortfolioRoute = AuthPortfolioRouteImport.update({
  id: '/portfolio',
  path: '/portfolio',
  getParentRoute: () => AuthRoute,
} as any)
const AuthOnChainRoute = AuthOnChainRouteImport.update({
  id: '/on-chain',
  path: '/on-chain',
  getParentRoute: () => AuthRoute,
} as any)
const AuthMarketRoute = AuthMarketRouteImport.update({
  id: '/market',
  path: '/market',
  getParentRoute: () => AuthRoute,
} as any)
const AuthExecutorRoute = AuthExecutorRouteImport.update({
  id: '/executor',
  path: '/executor',
  getParentRoute: () => AuthRoute,
} as any)
const AuthDebugRoute = AuthDebugRouteImport.update({
  id: '/debug',
  path: '/debug',
  getParentRoute: () => AuthRoute,
} as any)
const AuthBacktestRoute = AuthBacktestRouteImport.update({
  id: '/backtest',
  path: '/backtest',
  getParentRoute: () => AuthRoute,
} as any)
const AuthAnalyticsUnifiedRoute = AuthAnalyticsUnifiedRouteImport.update({
  id: '/analytics-unified',
  path: '/analytics-unified',
  getParentRoute: () => AuthRoute,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/trading': typeof TradingRoute
  '/analytics-unified': typeof AuthAnalyticsUnifiedRoute
  '/backtest': typeof AuthBacktestRoute
  '/debug': typeof AuthDebugRoute
  '/executor': typeof AuthExecutorRoute
  '/market': typeof AuthMarketRoute
  '/on-chain': typeof AuthOnChainRoute
  '/portfolio': typeof AuthPortfolioRoute
  '/screener': typeof AuthScreenerRoute
  '/sentiment': typeof AuthSentimentRoute
  '/settings': typeof AuthSettingsRoute
  '/login': typeof PublicLoginRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/trading': typeof TradingRoute
  '/analytics-unified': typeof AuthAnalyticsUnifiedRoute
  '/backtest': typeof AuthBacktestRoute
  '/debug': typeof AuthDebugRoute
  '/executor': typeof AuthExecutorRoute
  '/market': typeof AuthMarketRoute
  '/on-chain': typeof AuthOnChainRoute
  '/portfolio': typeof AuthPortfolioRoute
  '/screener': typeof AuthScreenerRoute
  '/sentiment': typeof AuthSentimentRoute
  '/settings': typeof AuthSettingsRoute
  '/login': typeof PublicLoginRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/_auth': typeof AuthRouteWithChildren
  '/_public': typeof PublicRouteWithChildren
  '/trading': typeof TradingRoute
  '/_auth/analytics-unified': typeof AuthAnalyticsUnifiedRoute
  '/_auth/backtest': typeof AuthBacktestRoute
  '/_auth/debug': typeof AuthDebugRoute
  '/_auth/executor': typeof AuthExecutorRoute
  '/_auth/market': typeof AuthMarketRoute
  '/_auth/on-chain': typeof AuthOnChainRoute
  '/_auth/portfolio': typeof AuthPortfolioRoute
  '/_auth/screener': typeof AuthScreenerRoute
  '/_auth/sentiment': typeof AuthSentimentRoute
  '/_auth/settings': typeof AuthSettingsRoute
  '/_public/login': typeof PublicLoginRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/trading'
    | '/analytics-unified'
    | '/backtest'
    | '/debug'
    | '/executor'
    | '/market'
    | '/on-chain'
    | '/portfolio'
    | '/screener'
    | '/sentiment'
    | '/settings'
    | '/login'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/trading'
    | '/analytics-unified'
    | '/backtest'
    | '/debug'
    | '/executor'
    | '/market'
    | '/on-chain'
    | '/portfolio'
    | '/screener'
    | '/sentiment'
    | '/settings'
    | '/login'
  id:
    | '__root__'
    | '/'
    | '/_auth'
    | '/_public'
    | '/trading'
    | '/_auth/analytics-unified'
    | '/_auth/backtest'
    | '/_auth/debug'
    | '/_auth/executor'
    | '/_auth/market'
    | '/_auth/on-chain'
    | '/_auth/portfolio'
    | '/_auth/screener'
    | '/_auth/sentiment'
    | '/_auth/settings'
    | '/_public/login'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  AuthRoute: typeof AuthRouteWithChildren
  PublicRoute: typeof PublicRouteWithChildren
  TradingRoute: typeof TradingRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/trading': {
      id: '/trading'
      path: '/trading'
      fullPath: '/trading'
      preLoaderRoute: typeof TradingRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_public': {
      id: '/_public'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof PublicRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_auth': {
      id: '/_auth'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof AuthRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_public/login': {
      id: '/_public/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof PublicLoginRouteImport
      parentRoute: typeof PublicRoute
    }
    '/_auth/settings': {
      id: '/_auth/settings'
      path: '/settings'
      fullPath: '/settings'
      preLoaderRoute: typeof AuthSettingsRouteImport
      parentRoute: typeof AuthRoute
    }
    '/_auth/sentiment': {
      id: '/_auth/sentiment'
      path: '/sentiment'
      fullPath: '/sentiment'
      preLoaderRoute: typeof AuthSentimentRouteImport
      parentRoute: typeof AuthRoute
    }
    '/_auth/screener': {
      id: '/_auth/screener'
      path: '/screener'
      fullPath: '/screener'
      preLoaderRoute: typeof AuthScreenerRouteImport
      parentRoute: typeof AuthRoute
    }
    '/_auth/portfolio': {
      id: '/_auth/portfolio'
      path: '/portfolio'
      fullPath: '/portfolio'
      preLoaderRoute: typeof AuthPortfolioRouteImport
      parentRoute: typeof AuthRoute
    }
    '/_auth/on-chain': {
      id: '/_auth/on-chain'
      path: '/on-chain'
      fullPath: '/on-chain'
      preLoaderRoute: typeof AuthOnChainRouteImport
      parentRoute: typeof AuthRoute
    }
    '/_auth/market': {
      id: '/_auth/market'
      path: '/market'
      fullPath: '/market'
      preLoaderRoute: typeof AuthMarketRouteImport
      parentRoute: typeof AuthRoute
    }
    '/_auth/executor': {
      id: '/_auth/executor'
      path: '/executor'
      fullPath: '/executor'
      preLoaderRoute: typeof AuthExecutorRouteImport
      parentRoute: typeof AuthRoute
    }
    '/_auth/debug': {
      id: '/_auth/debug'
      path: '/debug'
      fullPath: '/debug'
      preLoaderRoute: typeof AuthDebugRouteImport
      parentRoute: typeof AuthRoute
    }
    '/_auth/backtest': {
      id: '/_auth/backtest'
      path: '/backtest'
      fullPath: '/backtest'
      preLoaderRoute: typeof AuthBacktestRouteImport
      parentRoute: typeof AuthRoute
    }
    '/_auth/analytics-unified': {
      id: '/_auth/analytics-unified'
      path: '/analytics-unified'
      fullPath: '/analytics-unified'
      preLoaderRoute: typeof AuthAnalyticsUnifiedRouteImport
      parentRoute: typeof AuthRoute
    }
  }
}

interface AuthRouteChildren {
  AuthAnalyticsUnifiedRoute: typeof AuthAnalyticsUnifiedRoute
  AuthBacktestRoute: typeof AuthBacktestRoute
  AuthDebugRoute: typeof AuthDebugRoute
  AuthExecutorRoute: typeof AuthExecutorRoute
  AuthMarketRoute: typeof AuthMarketRoute
  AuthOnChainRoute: typeof AuthOnChainRoute
  AuthPortfolioRoute: typeof AuthPortfolioRoute
  AuthScreenerRoute: typeof AuthScreenerRoute
  AuthSentimentRoute: typeof AuthSentimentRoute
  AuthSettingsRoute: typeof AuthSettingsRoute
}

const AuthRouteChildren: AuthRouteChildren = {
  AuthAnalyticsUnifiedRoute: AuthAnalyticsUnifiedRoute,
  AuthBacktestRoute: AuthBacktestRoute,
  AuthDebugRoute: AuthDebugRoute,
  AuthExecutorRoute: AuthExecutorRoute,
  AuthMarketRoute: AuthMarketRoute,
  AuthOnChainRoute: AuthOnChainRoute,
  AuthPortfolioRoute: AuthPortfolioRoute,
  AuthScreenerRoute: AuthScreenerRoute,
  AuthSentimentRoute: AuthSentimentRoute,
  AuthSettingsRoute: AuthSettingsRoute,
}

const AuthRouteWithChildren = AuthRoute._addFileChildren(AuthRouteChildren)

interface PublicRouteChildren {
  PublicLoginRoute: typeof PublicLoginRoute
}

const PublicRouteChildren: PublicRouteChildren = {
  PublicLoginRoute: PublicLoginRoute,
}

const PublicRouteWithChildren =
  PublicRoute._addFileChildren(PublicRouteChildren)

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AuthRoute: AuthRouteWithChildren,
  PublicRoute: PublicRouteWithChildren,
  TradingRoute: TradingRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
