
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/*
 * WARNING: This is an internal file that is subject to change!
 *
 * ðŸ›‘ Under no circumstances should you import this file directly! ðŸ›‘
 *
 * All exports from this file are wrapped under a `Prisma` namespace object in the browser.ts file.
 * While this enables partial backward compatibility, it is not part of the stable public API.
 *
 * If you are looking for your Models, Enums, and Input Types, please import them from the respective
 * model files in the `model` directory!
 */

import * as runtime from "@prisma/client/runtime/index-browser"

export type * from '../models'
export type * from './prismaNamespace'

export const Decimal = runtime.Decimal


export const NullTypes = {
  DbNull: runtime.objectEnumValues.classes.DbNull as (new (secret: never) => typeof runtime.objectEnumValues.instances.DbNull),
  JsonNull: runtime.objectEnumValues.classes.JsonNull as (new (secret: never) => typeof runtime.objectEnumValues.instances.JsonNull),
  AnyNull: runtime.objectEnumValues.classes.AnyNull as (new (secret: never) => typeof runtime.objectEnumValues.instances.AnyNull),
}
/**
 * Helper for filtering JSON entries that have `null` on the database (empty on the db)
 *
 * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
 */
export const DbNull = runtime.objectEnumValues.instances.DbNull
/**
 * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
 *
 * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
 */
export const JsonNull = runtime.objectEnumValues.instances.JsonNull
/**
 * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
 *
 * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
 */
export const AnyNull = runtime.objectEnumValues.instances.AnyNull


export const ModelName = {
  User: 'User',
  Session: 'Session',
  Account: 'Account',
  Verification: 'Verification',
  Portfolio: 'Portfolio',
  Position: 'Position',
  Order: 'Order',
  ExchangeCredentials: 'ExchangeCredentials',
  RiskLimit: 'RiskLimit',
  PortfolioRebalance: 'PortfolioRebalance',
  AuditLog: 'AuditLog',
  Signal: 'Signal'
} as const

export type ModelName = (typeof ModelName)[keyof typeof ModelName]

/*
 * Enums
 */

export const TransactionIsolationLevel = runtime.makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
} as const)

export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


export const UserScalarFieldEnum = {
  id: 'id',
  name: 'name',
  email: 'email',
  emailVerified: 'emailVerified',
  image: 'image',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
} as const

export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


export const SessionScalarFieldEnum = {
  id: 'id',
  expiresAt: 'expiresAt',
  token: 'token',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  ipAddress: 'ipAddress',
  userAgent: 'userAgent',
  userId: 'userId'
} as const

export type SessionScalarFieldEnum = (typeof SessionScalarFieldEnum)[keyof typeof SessionScalarFieldEnum]


export const AccountScalarFieldEnum = {
  id: 'id',
  accountId: 'accountId',
  providerId: 'providerId',
  userId: 'userId',
  accessToken: 'accessToken',
  refreshToken: 'refreshToken',
  idToken: 'idToken',
  accessTokenExpiresAt: 'accessTokenExpiresAt',
  refreshTokenExpiresAt: 'refreshTokenExpiresAt',
  scope: 'scope',
  password: 'password',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
} as const

export type AccountScalarFieldEnum = (typeof AccountScalarFieldEnum)[keyof typeof AccountScalarFieldEnum]


export const VerificationScalarFieldEnum = {
  id: 'id',
  identifier: 'identifier',
  value: 'value',
  expiresAt: 'expiresAt',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
} as const

export type VerificationScalarFieldEnum = (typeof VerificationScalarFieldEnum)[keyof typeof VerificationScalarFieldEnum]


export const PortfolioScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  name: 'name',
  balance: 'balance',
  initialBalance: 'initialBalance',
  currency: 'currency',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
} as const

export type PortfolioScalarFieldEnum = (typeof PortfolioScalarFieldEnum)[keyof typeof PortfolioScalarFieldEnum]


export const PositionScalarFieldEnum = {
  id: 'id',
  portfolioId: 'portfolioId',
  symbol: 'symbol',
  quantity: 'quantity',
  entryPrice: 'entryPrice',
  currentPrice: 'currentPrice',
  pnl: 'pnl',
  pnlPercent: 'pnlPercent',
  side: 'side',
  exchange: 'exchange',
  exchangeCredentialsId: 'exchangeCredentialsId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
} as const

export type PositionScalarFieldEnum = (typeof PositionScalarFieldEnum)[keyof typeof PositionScalarFieldEnum]


export const OrderScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  portfolioId: 'portfolioId',
  symbol: 'symbol',
  type: 'type',
  side: 'side',
  quantity: 'quantity',
  price: 'price',
  stopPrice: 'stopPrice',
  status: 'status',
  filledQty: 'filledQty',
  avgPrice: 'avgPrice',
  exchange: 'exchange',
  exchangeOrderId: 'exchangeOrderId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
} as const

export type OrderScalarFieldEnum = (typeof OrderScalarFieldEnum)[keyof typeof OrderScalarFieldEnum]


export const ExchangeCredentialsScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  exchange: 'exchange',
  label: 'label',
  apiKey: 'apiKey',
  apiSecret: 'apiSecret',
  apiSecretIv: 'apiSecretIv',
  apiSecretAuthTag: 'apiSecretAuthTag',
  testnet: 'testnet',
  isActive: 'isActive',
  category: 'category',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
} as const

export type ExchangeCredentialsScalarFieldEnum = (typeof ExchangeCredentialsScalarFieldEnum)[keyof typeof ExchangeCredentialsScalarFieldEnum]


export const RiskLimitScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  portfolioId: 'portfolioId',
  type: 'type',
  value: 'value',
  enabled: 'enabled',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
} as const

export type RiskLimitScalarFieldEnum = (typeof RiskLimitScalarFieldEnum)[keyof typeof RiskLimitScalarFieldEnum]


export const PortfolioRebalanceScalarFieldEnum = {
  id: 'id',
  portfolioId: 'portfolioId',
  reason: 'reason',
  totalCost: 'totalCost',
  netBenefit: 'netBenefit',
  priority: 'priority',
  actions: 'actions',
  createdAt: 'createdAt'
} as const

export type PortfolioRebalanceScalarFieldEnum = (typeof PortfolioRebalanceScalarFieldEnum)[keyof typeof PortfolioRebalanceScalarFieldEnum]


export const AuditLogScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  action: 'action',
  resource: 'resource',
  resourceId: 'resourceId',
  details: 'details',
  ipAddress: 'ipAddress',
  userAgent: 'userAgent',
  createdAt: 'createdAt'
} as const

export type AuditLogScalarFieldEnum = (typeof AuditLogScalarFieldEnum)[keyof typeof AuditLogScalarFieldEnum]


export const SignalScalarFieldEnum = {
  id: 'id',
  pair: 'pair',
  timeframe: 'timeframe',
  term: 'term',
  direction: 'direction',
  entry_zone_min: 'entry_zone_min',
  entry_zone_max: 'entry_zone_max',
  strategy_accuracy: 'strategy_accuracy',
  last_signals: 'last_signals',
  targets: 'targets',
  trend_line: 'trend_line',
  stop_loss: 'stop_loss',
  raw: 'raw',
  timestamp: 'timestamp'
} as const

export type SignalScalarFieldEnum = (typeof SignalScalarFieldEnum)[keyof typeof SignalScalarFieldEnum]


export const SortOrder = {
  asc: 'asc',
  desc: 'desc'
} as const

export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


export const NullableJsonNullValueInput = {
  DbNull: DbNull,
  JsonNull: JsonNull
} as const

export type NullableJsonNullValueInput = (typeof NullableJsonNullValueInput)[keyof typeof NullableJsonNullValueInput]


export const QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
} as const

export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


export const NullsOrder = {
  first: 'first',
  last: 'last'
} as const

export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


export const JsonNullValueFilter = {
  DbNull: DbNull,
  JsonNull: JsonNull,
  AnyNull: AnyNull
} as const

export type JsonNullValueFilter = (typeof JsonNullValueFilter)[keyof typeof JsonNullValueFilter]

