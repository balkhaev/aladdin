
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/*
 * This file exports the `ExchangeCredentials` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import type * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums"
import type * as Prisma from "../internal/prismaNamespace"

/**
 * Model ExchangeCredentials
 * 
 */
export type ExchangeCredentialsModel = runtime.Types.Result.DefaultSelection<Prisma.$ExchangeCredentialsPayload>

export type AggregateExchangeCredentials = {
  _count: ExchangeCredentialsCountAggregateOutputType | null
  _min: ExchangeCredentialsMinAggregateOutputType | null
  _max: ExchangeCredentialsMaxAggregateOutputType | null
}

export type ExchangeCredentialsMinAggregateOutputType = {
  id: string | null
  userId: string | null
  exchange: string | null
  label: string | null
  apiKey: string | null
  apiSecret: string | null
  apiSecretIv: string | null
  apiSecretAuthTag: string | null
  testnet: boolean | null
  isActive: boolean | null
  category: string | null
  createdAt: Date | null
  updatedAt: Date | null
}

export type ExchangeCredentialsMaxAggregateOutputType = {
  id: string | null
  userId: string | null
  exchange: string | null
  label: string | null
  apiKey: string | null
  apiSecret: string | null
  apiSecretIv: string | null
  apiSecretAuthTag: string | null
  testnet: boolean | null
  isActive: boolean | null
  category: string | null
  createdAt: Date | null
  updatedAt: Date | null
}

export type ExchangeCredentialsCountAggregateOutputType = {
  id: number
  userId: number
  exchange: number
  label: number
  apiKey: number
  apiSecret: number
  apiSecretIv: number
  apiSecretAuthTag: number
  testnet: number
  isActive: number
  category: number
  createdAt: number
  updatedAt: number
  _all: number
}


export type ExchangeCredentialsMinAggregateInputType = {
  id?: true
  userId?: true
  exchange?: true
  label?: true
  apiKey?: true
  apiSecret?: true
  apiSecretIv?: true
  apiSecretAuthTag?: true
  testnet?: true
  isActive?: true
  category?: true
  createdAt?: true
  updatedAt?: true
}

export type ExchangeCredentialsMaxAggregateInputType = {
  id?: true
  userId?: true
  exchange?: true
  label?: true
  apiKey?: true
  apiSecret?: true
  apiSecretIv?: true
  apiSecretAuthTag?: true
  testnet?: true
  isActive?: true
  category?: true
  createdAt?: true
  updatedAt?: true
}

export type ExchangeCredentialsCountAggregateInputType = {
  id?: true
  userId?: true
  exchange?: true
  label?: true
  apiKey?: true
  apiSecret?: true
  apiSecretIv?: true
  apiSecretAuthTag?: true
  testnet?: true
  isActive?: true
  category?: true
  createdAt?: true
  updatedAt?: true
  _all?: true
}

export type ExchangeCredentialsAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which ExchangeCredentials to aggregate.
   */
  where?: Prisma.ExchangeCredentialsWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of ExchangeCredentials to fetch.
   */
  orderBy?: Prisma.ExchangeCredentialsOrderByWithRelationInput | Prisma.ExchangeCredentialsOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.ExchangeCredentialsWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` ExchangeCredentials from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` ExchangeCredentials.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned ExchangeCredentials
  **/
  _count?: true | ExchangeCredentialsCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: ExchangeCredentialsMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: ExchangeCredentialsMaxAggregateInputType
}

export type GetExchangeCredentialsAggregateType<T extends ExchangeCredentialsAggregateArgs> = {
      [P in keyof T & keyof AggregateExchangeCredentials]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateExchangeCredentials[P]>
    : Prisma.GetScalarType<T[P], AggregateExchangeCredentials[P]>
}




export type ExchangeCredentialsGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.ExchangeCredentialsWhereInput
  orderBy?: Prisma.ExchangeCredentialsOrderByWithAggregationInput | Prisma.ExchangeCredentialsOrderByWithAggregationInput[]
  by: Prisma.ExchangeCredentialsScalarFieldEnum[] | Prisma.ExchangeCredentialsScalarFieldEnum
  having?: Prisma.ExchangeCredentialsScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: ExchangeCredentialsCountAggregateInputType | true
  _min?: ExchangeCredentialsMinAggregateInputType
  _max?: ExchangeCredentialsMaxAggregateInputType
}

export type ExchangeCredentialsGroupByOutputType = {
  id: string
  userId: string
  exchange: string
  label: string
  apiKey: string
  apiSecret: string
  apiSecretIv: string
  apiSecretAuthTag: string
  testnet: boolean
  isActive: boolean
  category: string
  createdAt: Date
  updatedAt: Date
  _count: ExchangeCredentialsCountAggregateOutputType | null
  _min: ExchangeCredentialsMinAggregateOutputType | null
  _max: ExchangeCredentialsMaxAggregateOutputType | null
}

type GetExchangeCredentialsGroupByPayload<T extends ExchangeCredentialsGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<ExchangeCredentialsGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof ExchangeCredentialsGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], ExchangeCredentialsGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], ExchangeCredentialsGroupByOutputType[P]>
      }
    >
  >



export type ExchangeCredentialsWhereInput = {
  AND?: Prisma.ExchangeCredentialsWhereInput | Prisma.ExchangeCredentialsWhereInput[]
  OR?: Prisma.ExchangeCredentialsWhereInput[]
  NOT?: Prisma.ExchangeCredentialsWhereInput | Prisma.ExchangeCredentialsWhereInput[]
  id?: Prisma.StringFilter<"ExchangeCredentials"> | string
  userId?: Prisma.StringFilter<"ExchangeCredentials"> | string
  exchange?: Prisma.StringFilter<"ExchangeCredentials"> | string
  label?: Prisma.StringFilter<"ExchangeCredentials"> | string
  apiKey?: Prisma.StringFilter<"ExchangeCredentials"> | string
  apiSecret?: Prisma.StringFilter<"ExchangeCredentials"> | string
  apiSecretIv?: Prisma.StringFilter<"ExchangeCredentials"> | string
  apiSecretAuthTag?: Prisma.StringFilter<"ExchangeCredentials"> | string
  testnet?: Prisma.BoolFilter<"ExchangeCredentials"> | boolean
  isActive?: Prisma.BoolFilter<"ExchangeCredentials"> | boolean
  category?: Prisma.StringFilter<"ExchangeCredentials"> | string
  createdAt?: Prisma.DateTimeFilter<"ExchangeCredentials"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"ExchangeCredentials"> | Date | string
  user?: Prisma.XOR<Prisma.UserScalarRelationFilter, Prisma.UserWhereInput>
  activeUsers?: Prisma.UserListRelationFilter
}

export type ExchangeCredentialsOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  exchange?: Prisma.SortOrder
  label?: Prisma.SortOrder
  apiKey?: Prisma.SortOrder
  apiSecret?: Prisma.SortOrder
  apiSecretIv?: Prisma.SortOrder
  apiSecretAuthTag?: Prisma.SortOrder
  testnet?: Prisma.SortOrder
  isActive?: Prisma.SortOrder
  category?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  user?: Prisma.UserOrderByWithRelationInput
  activeUsers?: Prisma.UserOrderByRelationAggregateInput
}

export type ExchangeCredentialsWhereUniqueInput = Prisma.AtLeast<{
  id?: string
  userId_exchange_apiKey?: Prisma.ExchangeCredentialsUserIdExchangeApiKeyCompoundUniqueInput
  AND?: Prisma.ExchangeCredentialsWhereInput | Prisma.ExchangeCredentialsWhereInput[]
  OR?: Prisma.ExchangeCredentialsWhereInput[]
  NOT?: Prisma.ExchangeCredentialsWhereInput | Prisma.ExchangeCredentialsWhereInput[]
  userId?: Prisma.StringFilter<"ExchangeCredentials"> | string
  exchange?: Prisma.StringFilter<"ExchangeCredentials"> | string
  label?: Prisma.StringFilter<"ExchangeCredentials"> | string
  apiKey?: Prisma.StringFilter<"ExchangeCredentials"> | string
  apiSecret?: Prisma.StringFilter<"ExchangeCredentials"> | string
  apiSecretIv?: Prisma.StringFilter<"ExchangeCredentials"> | string
  apiSecretAuthTag?: Prisma.StringFilter<"ExchangeCredentials"> | string
  testnet?: Prisma.BoolFilter<"ExchangeCredentials"> | boolean
  isActive?: Prisma.BoolFilter<"ExchangeCredentials"> | boolean
  category?: Prisma.StringFilter<"ExchangeCredentials"> | string
  createdAt?: Prisma.DateTimeFilter<"ExchangeCredentials"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"ExchangeCredentials"> | Date | string
  user?: Prisma.XOR<Prisma.UserScalarRelationFilter, Prisma.UserWhereInput>
  activeUsers?: Prisma.UserListRelationFilter
}, "id" | "userId_exchange_apiKey">

export type ExchangeCredentialsOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  exchange?: Prisma.SortOrder
  label?: Prisma.SortOrder
  apiKey?: Prisma.SortOrder
  apiSecret?: Prisma.SortOrder
  apiSecretIv?: Prisma.SortOrder
  apiSecretAuthTag?: Prisma.SortOrder
  testnet?: Prisma.SortOrder
  isActive?: Prisma.SortOrder
  category?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  _count?: Prisma.ExchangeCredentialsCountOrderByAggregateInput
  _max?: Prisma.ExchangeCredentialsMaxOrderByAggregateInput
  _min?: Prisma.ExchangeCredentialsMinOrderByAggregateInput
}

export type ExchangeCredentialsScalarWhereWithAggregatesInput = {
  AND?: Prisma.ExchangeCredentialsScalarWhereWithAggregatesInput | Prisma.ExchangeCredentialsScalarWhereWithAggregatesInput[]
  OR?: Prisma.ExchangeCredentialsScalarWhereWithAggregatesInput[]
  NOT?: Prisma.ExchangeCredentialsScalarWhereWithAggregatesInput | Prisma.ExchangeCredentialsScalarWhereWithAggregatesInput[]
  id?: Prisma.StringWithAggregatesFilter<"ExchangeCredentials"> | string
  userId?: Prisma.StringWithAggregatesFilter<"ExchangeCredentials"> | string
  exchange?: Prisma.StringWithAggregatesFilter<"ExchangeCredentials"> | string
  label?: Prisma.StringWithAggregatesFilter<"ExchangeCredentials"> | string
  apiKey?: Prisma.StringWithAggregatesFilter<"ExchangeCredentials"> | string
  apiSecret?: Prisma.StringWithAggregatesFilter<"ExchangeCredentials"> | string
  apiSecretIv?: Prisma.StringWithAggregatesFilter<"ExchangeCredentials"> | string
  apiSecretAuthTag?: Prisma.StringWithAggregatesFilter<"ExchangeCredentials"> | string
  testnet?: Prisma.BoolWithAggregatesFilter<"ExchangeCredentials"> | boolean
  isActive?: Prisma.BoolWithAggregatesFilter<"ExchangeCredentials"> | boolean
  category?: Prisma.StringWithAggregatesFilter<"ExchangeCredentials"> | string
  createdAt?: Prisma.DateTimeWithAggregatesFilter<"ExchangeCredentials"> | Date | string
  updatedAt?: Prisma.DateTimeWithAggregatesFilter<"ExchangeCredentials"> | Date | string
}

export type ExchangeCredentialsCreateInput = {
  id?: string
  exchange: string
  label: string
  apiKey: string
  apiSecret: string
  apiSecretIv: string
  apiSecretAuthTag: string
  testnet?: boolean
  isActive?: boolean
  category?: string
  createdAt?: Date | string
  updatedAt?: Date | string
  user: Prisma.UserCreateNestedOneWithoutExchangeCredentialsInput
  activeUsers?: Prisma.UserCreateNestedManyWithoutActiveExchangeCredentialsInput
}

export type ExchangeCredentialsUncheckedCreateInput = {
  id?: string
  userId: string
  exchange: string
  label: string
  apiKey: string
  apiSecret: string
  apiSecretIv: string
  apiSecretAuthTag: string
  testnet?: boolean
  isActive?: boolean
  category?: string
  createdAt?: Date | string
  updatedAt?: Date | string
  activeUsers?: Prisma.UserUncheckedCreateNestedManyWithoutActiveExchangeCredentialsInput
}

export type ExchangeCredentialsUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  exchange?: Prisma.StringFieldUpdateOperationsInput | string
  label?: Prisma.StringFieldUpdateOperationsInput | string
  apiKey?: Prisma.StringFieldUpdateOperationsInput | string
  apiSecret?: Prisma.StringFieldUpdateOperationsInput | string
  apiSecretIv?: Prisma.StringFieldUpdateOperationsInput | string
  apiSecretAuthTag?: Prisma.StringFieldUpdateOperationsInput | string
  testnet?: Prisma.BoolFieldUpdateOperationsInput | boolean
  isActive?: Prisma.BoolFieldUpdateOperationsInput | boolean
  category?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  user?: Prisma.UserUpdateOneRequiredWithoutExchangeCredentialsNestedInput
  activeUsers?: Prisma.UserUpdateManyWithoutActiveExchangeCredentialsNestedInput
}

export type ExchangeCredentialsUncheckedUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  userId?: Prisma.StringFieldUpdateOperationsInput | string
  exchange?: Prisma.StringFieldUpdateOperationsInput | string
  label?: Prisma.StringFieldUpdateOperationsInput | string
  apiKey?: Prisma.StringFieldUpdateOperationsInput | string
  apiSecret?: Prisma.StringFieldUpdateOperationsInput | string
  apiSecretIv?: Prisma.StringFieldUpdateOperationsInput | string
  apiSecretAuthTag?: Prisma.StringFieldUpdateOperationsInput | string
  testnet?: Prisma.BoolFieldUpdateOperationsInput | boolean
  isActive?: Prisma.BoolFieldUpdateOperationsInput | boolean
  category?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  activeUsers?: Prisma.UserUncheckedUpdateManyWithoutActiveExchangeCredentialsNestedInput
}

export type ExchangeCredentialsCreateManyInput = {
  id?: string
  userId: string
  exchange: string
  label: string
  apiKey: string
  apiSecret: string
  apiSecretIv: string
  apiSecretAuthTag: string
  testnet?: boolean
  isActive?: boolean
  category?: string
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type ExchangeCredentialsUpdateManyMutationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  exchange?: Prisma.StringFieldUpdateOperationsInput | string
  label?: Prisma.StringFieldUpdateOperationsInput | string
  apiKey?: Prisma.StringFieldUpdateOperationsInput | string
  apiSecret?: Prisma.StringFieldUpdateOperationsInput | string
  apiSecretIv?: Prisma.StringFieldUpdateOperationsInput | string
  apiSecretAuthTag?: Prisma.StringFieldUpdateOperationsInput | string
  testnet?: Prisma.BoolFieldUpdateOperationsInput | boolean
  isActive?: Prisma.BoolFieldUpdateOperationsInput | boolean
  category?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type ExchangeCredentialsUncheckedUpdateManyInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  userId?: Prisma.StringFieldUpdateOperationsInput | string
  exchange?: Prisma.StringFieldUpdateOperationsInput | string
  label?: Prisma.StringFieldUpdateOperationsInput | string
  apiKey?: Prisma.StringFieldUpdateOperationsInput | string
  apiSecret?: Prisma.StringFieldUpdateOperationsInput | string
  apiSecretIv?: Prisma.StringFieldUpdateOperationsInput | string
  apiSecretAuthTag?: Prisma.StringFieldUpdateOperationsInput | string
  testnet?: Prisma.BoolFieldUpdateOperationsInput | boolean
  isActive?: Prisma.BoolFieldUpdateOperationsInput | boolean
  category?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type ExchangeCredentialsListRelationFilter = {
  every?: Prisma.ExchangeCredentialsWhereInput
  some?: Prisma.ExchangeCredentialsWhereInput
  none?: Prisma.ExchangeCredentialsWhereInput
}

export type ExchangeCredentialsNullableScalarRelationFilter = {
  is?: Prisma.ExchangeCredentialsWhereInput | null
  isNot?: Prisma.ExchangeCredentialsWhereInput | null
}

export type ExchangeCredentialsOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder
}

export type ExchangeCredentialsUserIdExchangeApiKeyCompoundUniqueInput = {
  userId: string
  exchange: string
  apiKey: string
}

export type ExchangeCredentialsCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  exchange?: Prisma.SortOrder
  label?: Prisma.SortOrder
  apiKey?: Prisma.SortOrder
  apiSecret?: Prisma.SortOrder
  apiSecretIv?: Prisma.SortOrder
  apiSecretAuthTag?: Prisma.SortOrder
  testnet?: Prisma.SortOrder
  isActive?: Prisma.SortOrder
  category?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type ExchangeCredentialsMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  exchange?: Prisma.SortOrder
  label?: Prisma.SortOrder
  apiKey?: Prisma.SortOrder
  apiSecret?: Prisma.SortOrder
  apiSecretIv?: Prisma.SortOrder
  apiSecretAuthTag?: Prisma.SortOrder
  testnet?: Prisma.SortOrder
  isActive?: Prisma.SortOrder
  category?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type ExchangeCredentialsMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  exchange?: Prisma.SortOrder
  label?: Prisma.SortOrder
  apiKey?: Prisma.SortOrder
  apiSecret?: Prisma.SortOrder
  apiSecretIv?: Prisma.SortOrder
  apiSecretAuthTag?: Prisma.SortOrder
  testnet?: Prisma.SortOrder
  isActive?: Prisma.SortOrder
  category?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type ExchangeCredentialsCreateNestedManyWithoutUserInput = {
  create?: Prisma.XOR<Prisma.ExchangeCredentialsCreateWithoutUserInput, Prisma.ExchangeCredentialsUncheckedCreateWithoutUserInput> | Prisma.ExchangeCredentialsCreateWithoutUserInput[] | Prisma.ExchangeCredentialsUncheckedCreateWithoutUserInput[]
  connectOrCreate?: Prisma.ExchangeCredentialsCreateOrConnectWithoutUserInput | Prisma.ExchangeCredentialsCreateOrConnectWithoutUserInput[]
  createMany?: Prisma.ExchangeCredentialsCreateManyUserInputEnvelope
  connect?: Prisma.ExchangeCredentialsWhereUniqueInput | Prisma.ExchangeCredentialsWhereUniqueInput[]
}

export type ExchangeCredentialsCreateNestedOneWithoutActiveUsersInput = {
  create?: Prisma.XOR<Prisma.ExchangeCredentialsCreateWithoutActiveUsersInput, Prisma.ExchangeCredentialsUncheckedCreateWithoutActiveUsersInput>
  connectOrCreate?: Prisma.ExchangeCredentialsCreateOrConnectWithoutActiveUsersInput
  connect?: Prisma.ExchangeCredentialsWhereUniqueInput
}

export type ExchangeCredentialsUncheckedCreateNestedManyWithoutUserInput = {
  create?: Prisma.XOR<Prisma.ExchangeCredentialsCreateWithoutUserInput, Prisma.ExchangeCredentialsUncheckedCreateWithoutUserInput> | Prisma.ExchangeCredentialsCreateWithoutUserInput[] | Prisma.ExchangeCredentialsUncheckedCreateWithoutUserInput[]
  connectOrCreate?: Prisma.ExchangeCredentialsCreateOrConnectWithoutUserInput | Prisma.ExchangeCredentialsCreateOrConnectWithoutUserInput[]
  createMany?: Prisma.ExchangeCredentialsCreateManyUserInputEnvelope
  connect?: Prisma.ExchangeCredentialsWhereUniqueInput | Prisma.ExchangeCredentialsWhereUniqueInput[]
}

export type ExchangeCredentialsUpdateManyWithoutUserNestedInput = {
  create?: Prisma.XOR<Prisma.ExchangeCredentialsCreateWithoutUserInput, Prisma.ExchangeCredentialsUncheckedCreateWithoutUserInput> | Prisma.ExchangeCredentialsCreateWithoutUserInput[] | Prisma.ExchangeCredentialsUncheckedCreateWithoutUserInput[]
  connectOrCreate?: Prisma.ExchangeCredentialsCreateOrConnectWithoutUserInput | Prisma.ExchangeCredentialsCreateOrConnectWithoutUserInput[]
  upsert?: Prisma.ExchangeCredentialsUpsertWithWhereUniqueWithoutUserInput | Prisma.ExchangeCredentialsUpsertWithWhereUniqueWithoutUserInput[]
  createMany?: Prisma.ExchangeCredentialsCreateManyUserInputEnvelope
  set?: Prisma.ExchangeCredentialsWhereUniqueInput | Prisma.ExchangeCredentialsWhereUniqueInput[]
  disconnect?: Prisma.ExchangeCredentialsWhereUniqueInput | Prisma.ExchangeCredentialsWhereUniqueInput[]
  delete?: Prisma.ExchangeCredentialsWhereUniqueInput | Prisma.ExchangeCredentialsWhereUniqueInput[]
  connect?: Prisma.ExchangeCredentialsWhereUniqueInput | Prisma.ExchangeCredentialsWhereUniqueInput[]
  update?: Prisma.ExchangeCredentialsUpdateWithWhereUniqueWithoutUserInput | Prisma.ExchangeCredentialsUpdateWithWhereUniqueWithoutUserInput[]
  updateMany?: Prisma.ExchangeCredentialsUpdateManyWithWhereWithoutUserInput | Prisma.ExchangeCredentialsUpdateManyWithWhereWithoutUserInput[]
  deleteMany?: Prisma.ExchangeCredentialsScalarWhereInput | Prisma.ExchangeCredentialsScalarWhereInput[]
}

export type ExchangeCredentialsUpdateOneWithoutActiveUsersNestedInput = {
  create?: Prisma.XOR<Prisma.ExchangeCredentialsCreateWithoutActiveUsersInput, Prisma.ExchangeCredentialsUncheckedCreateWithoutActiveUsersInput>
  connectOrCreate?: Prisma.ExchangeCredentialsCreateOrConnectWithoutActiveUsersInput
  upsert?: Prisma.ExchangeCredentialsUpsertWithoutActiveUsersInput
  disconnect?: Prisma.ExchangeCredentialsWhereInput | boolean
  delete?: Prisma.ExchangeCredentialsWhereInput | boolean
  connect?: Prisma.ExchangeCredentialsWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.ExchangeCredentialsUpdateToOneWithWhereWithoutActiveUsersInput, Prisma.ExchangeCredentialsUpdateWithoutActiveUsersInput>, Prisma.ExchangeCredentialsUncheckedUpdateWithoutActiveUsersInput>
}

export type ExchangeCredentialsUncheckedUpdateManyWithoutUserNestedInput = {
  create?: Prisma.XOR<Prisma.ExchangeCredentialsCreateWithoutUserInput, Prisma.ExchangeCredentialsUncheckedCreateWithoutUserInput> | Prisma.ExchangeCredentialsCreateWithoutUserInput[] | Prisma.ExchangeCredentialsUncheckedCreateWithoutUserInput[]
  connectOrCreate?: Prisma.ExchangeCredentialsCreateOrConnectWithoutUserInput | Prisma.ExchangeCredentialsCreateOrConnectWithoutUserInput[]
  upsert?: Prisma.ExchangeCredentialsUpsertWithWhereUniqueWithoutUserInput | Prisma.ExchangeCredentialsUpsertWithWhereUniqueWithoutUserInput[]
  createMany?: Prisma.ExchangeCredentialsCreateManyUserInputEnvelope
  set?: Prisma.ExchangeCredentialsWhereUniqueInput | Prisma.ExchangeCredentialsWhereUniqueInput[]
  disconnect?: Prisma.ExchangeCredentialsWhereUniqueInput | Prisma.ExchangeCredentialsWhereUniqueInput[]
  delete?: Prisma.ExchangeCredentialsWhereUniqueInput | Prisma.ExchangeCredentialsWhereUniqueInput[]
  connect?: Prisma.ExchangeCredentialsWhereUniqueInput | Prisma.ExchangeCredentialsWhereUniqueInput[]
  update?: Prisma.ExchangeCredentialsUpdateWithWhereUniqueWithoutUserInput | Prisma.ExchangeCredentialsUpdateWithWhereUniqueWithoutUserInput[]
  updateMany?: Prisma.ExchangeCredentialsUpdateManyWithWhereWithoutUserInput | Prisma.ExchangeCredentialsUpdateManyWithWhereWithoutUserInput[]
  deleteMany?: Prisma.ExchangeCredentialsScalarWhereInput | Prisma.ExchangeCredentialsScalarWhereInput[]
}

export type ExchangeCredentialsCreateWithoutUserInput = {
  id?: string
  exchange: string
  label: string
  apiKey: string
  apiSecret: string
  apiSecretIv: string
  apiSecretAuthTag: string
  testnet?: boolean
  isActive?: boolean
  category?: string
  createdAt?: Date | string
  updatedAt?: Date | string
  activeUsers?: Prisma.UserCreateNestedManyWithoutActiveExchangeCredentialsInput
}

export type ExchangeCredentialsUncheckedCreateWithoutUserInput = {
  id?: string
  exchange: string
  label: string
  apiKey: string
  apiSecret: string
  apiSecretIv: string
  apiSecretAuthTag: string
  testnet?: boolean
  isActive?: boolean
  category?: string
  createdAt?: Date | string
  updatedAt?: Date | string
  activeUsers?: Prisma.UserUncheckedCreateNestedManyWithoutActiveExchangeCredentialsInput
}

export type ExchangeCredentialsCreateOrConnectWithoutUserInput = {
  where: Prisma.ExchangeCredentialsWhereUniqueInput
  create: Prisma.XOR<Prisma.ExchangeCredentialsCreateWithoutUserInput, Prisma.ExchangeCredentialsUncheckedCreateWithoutUserInput>
}

export type ExchangeCredentialsCreateManyUserInputEnvelope = {
  data: Prisma.ExchangeCredentialsCreateManyUserInput | Prisma.ExchangeCredentialsCreateManyUserInput[]
  skipDuplicates?: boolean
}

export type ExchangeCredentialsCreateWithoutActiveUsersInput = {
  id?: string
  exchange: string
  label: string
  apiKey: string
  apiSecret: string
  apiSecretIv: string
  apiSecretAuthTag: string
  testnet?: boolean
  isActive?: boolean
  category?: string
  createdAt?: Date | string
  updatedAt?: Date | string
  user: Prisma.UserCreateNestedOneWithoutExchangeCredentialsInput
}

export type ExchangeCredentialsUncheckedCreateWithoutActiveUsersInput = {
  id?: string
  userId: string
  exchange: string
  label: string
  apiKey: string
  apiSecret: string
  apiSecretIv: string
  apiSecretAuthTag: string
  testnet?: boolean
  isActive?: boolean
  category?: string
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type ExchangeCredentialsCreateOrConnectWithoutActiveUsersInput = {
  where: Prisma.ExchangeCredentialsWhereUniqueInput
  create: Prisma.XOR<Prisma.ExchangeCredentialsCreateWithoutActiveUsersInput, Prisma.ExchangeCredentialsUncheckedCreateWithoutActiveUsersInput>
}

export type ExchangeCredentialsUpsertWithWhereUniqueWithoutUserInput = {
  where: Prisma.ExchangeCredentialsWhereUniqueInput
  update: Prisma.XOR<Prisma.ExchangeCredentialsUpdateWithoutUserInput, Prisma.ExchangeCredentialsUncheckedUpdateWithoutUserInput>
  create: Prisma.XOR<Prisma.ExchangeCredentialsCreateWithoutUserInput, Prisma.ExchangeCredentialsUncheckedCreateWithoutUserInput>
}

export type ExchangeCredentialsUpdateWithWhereUniqueWithoutUserInput = {
  where: Prisma.ExchangeCredentialsWhereUniqueInput
  data: Prisma.XOR<Prisma.ExchangeCredentialsUpdateWithoutUserInput, Prisma.ExchangeCredentialsUncheckedUpdateWithoutUserInput>
}

export type ExchangeCredentialsUpdateManyWithWhereWithoutUserInput = {
  where: Prisma.ExchangeCredentialsScalarWhereInput
  data: Prisma.XOR<Prisma.ExchangeCredentialsUpdateManyMutationInput, Prisma.ExchangeCredentialsUncheckedUpdateManyWithoutUserInput>
}

export type ExchangeCredentialsScalarWhereInput = {
  AND?: Prisma.ExchangeCredentialsScalarWhereInput | Prisma.ExchangeCredentialsScalarWhereInput[]
  OR?: Prisma.ExchangeCredentialsScalarWhereInput[]
  NOT?: Prisma.ExchangeCredentialsScalarWhereInput | Prisma.ExchangeCredentialsScalarWhereInput[]
  id?: Prisma.StringFilter<"ExchangeCredentials"> | string
  userId?: Prisma.StringFilter<"ExchangeCredentials"> | string
  exchange?: Prisma.StringFilter<"ExchangeCredentials"> | string
  label?: Prisma.StringFilter<"ExchangeCredentials"> | string
  apiKey?: Prisma.StringFilter<"ExchangeCredentials"> | string
  apiSecret?: Prisma.StringFilter<"ExchangeCredentials"> | string
  apiSecretIv?: Prisma.StringFilter<"ExchangeCredentials"> | string
  apiSecretAuthTag?: Prisma.StringFilter<"ExchangeCredentials"> | string
  testnet?: Prisma.BoolFilter<"ExchangeCredentials"> | boolean
  isActive?: Prisma.BoolFilter<"ExchangeCredentials"> | boolean
  category?: Prisma.StringFilter<"ExchangeCredentials"> | string
  createdAt?: Prisma.DateTimeFilter<"ExchangeCredentials"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"ExchangeCredentials"> | Date | string
}

export type ExchangeCredentialsUpsertWithoutActiveUsersInput = {
  update: Prisma.XOR<Prisma.ExchangeCredentialsUpdateWithoutActiveUsersInput, Prisma.ExchangeCredentialsUncheckedUpdateWithoutActiveUsersInput>
  create: Prisma.XOR<Prisma.ExchangeCredentialsCreateWithoutActiveUsersInput, Prisma.ExchangeCredentialsUncheckedCreateWithoutActiveUsersInput>
  where?: Prisma.ExchangeCredentialsWhereInput
}

export type ExchangeCredentialsUpdateToOneWithWhereWithoutActiveUsersInput = {
  where?: Prisma.ExchangeCredentialsWhereInput
  data: Prisma.XOR<Prisma.ExchangeCredentialsUpdateWithoutActiveUsersInput, Prisma.ExchangeCredentialsUncheckedUpdateWithoutActiveUsersInput>
}

export type ExchangeCredentialsUpdateWithoutActiveUsersInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  exchange?: Prisma.StringFieldUpdateOperationsInput | string
  label?: Prisma.StringFieldUpdateOperationsInput | string
  apiKey?: Prisma.StringFieldUpdateOperationsInput | string
  apiSecret?: Prisma.StringFieldUpdateOperationsInput | string
  apiSecretIv?: Prisma.StringFieldUpdateOperationsInput | string
  apiSecretAuthTag?: Prisma.StringFieldUpdateOperationsInput | string
  testnet?: Prisma.BoolFieldUpdateOperationsInput | boolean
  isActive?: Prisma.BoolFieldUpdateOperationsInput | boolean
  category?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  user?: Prisma.UserUpdateOneRequiredWithoutExchangeCredentialsNestedInput
}

export type ExchangeCredentialsUncheckedUpdateWithoutActiveUsersInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  userId?: Prisma.StringFieldUpdateOperationsInput | string
  exchange?: Prisma.StringFieldUpdateOperationsInput | string
  label?: Prisma.StringFieldUpdateOperationsInput | string
  apiKey?: Prisma.StringFieldUpdateOperationsInput | string
  apiSecret?: Prisma.StringFieldUpdateOperationsInput | string
  apiSecretIv?: Prisma.StringFieldUpdateOperationsInput | string
  apiSecretAuthTag?: Prisma.StringFieldUpdateOperationsInput | string
  testnet?: Prisma.BoolFieldUpdateOperationsInput | boolean
  isActive?: Prisma.BoolFieldUpdateOperationsInput | boolean
  category?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type ExchangeCredentialsCreateManyUserInput = {
  id?: string
  exchange: string
  label: string
  apiKey: string
  apiSecret: string
  apiSecretIv: string
  apiSecretAuthTag: string
  testnet?: boolean
  isActive?: boolean
  category?: string
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type ExchangeCredentialsUpdateWithoutUserInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  exchange?: Prisma.StringFieldUpdateOperationsInput | string
  label?: Prisma.StringFieldUpdateOperationsInput | string
  apiKey?: Prisma.StringFieldUpdateOperationsInput | string
  apiSecret?: Prisma.StringFieldUpdateOperationsInput | string
  apiSecretIv?: Prisma.StringFieldUpdateOperationsInput | string
  apiSecretAuthTag?: Prisma.StringFieldUpdateOperationsInput | string
  testnet?: Prisma.BoolFieldUpdateOperationsInput | boolean
  isActive?: Prisma.BoolFieldUpdateOperationsInput | boolean
  category?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  activeUsers?: Prisma.UserUpdateManyWithoutActiveExchangeCredentialsNestedInput
}

export type ExchangeCredentialsUncheckedUpdateWithoutUserInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  exchange?: Prisma.StringFieldUpdateOperationsInput | string
  label?: Prisma.StringFieldUpdateOperationsInput | string
  apiKey?: Prisma.StringFieldUpdateOperationsInput | string
  apiSecret?: Prisma.StringFieldUpdateOperationsInput | string
  apiSecretIv?: Prisma.StringFieldUpdateOperationsInput | string
  apiSecretAuthTag?: Prisma.StringFieldUpdateOperationsInput | string
  testnet?: Prisma.BoolFieldUpdateOperationsInput | boolean
  isActive?: Prisma.BoolFieldUpdateOperationsInput | boolean
  category?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  activeUsers?: Prisma.UserUncheckedUpdateManyWithoutActiveExchangeCredentialsNestedInput
}

export type ExchangeCredentialsUncheckedUpdateManyWithoutUserInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  exchange?: Prisma.StringFieldUpdateOperationsInput | string
  label?: Prisma.StringFieldUpdateOperationsInput | string
  apiKey?: Prisma.StringFieldUpdateOperationsInput | string
  apiSecret?: Prisma.StringFieldUpdateOperationsInput | string
  apiSecretIv?: Prisma.StringFieldUpdateOperationsInput | string
  apiSecretAuthTag?: Prisma.StringFieldUpdateOperationsInput | string
  testnet?: Prisma.BoolFieldUpdateOperationsInput | boolean
  isActive?: Prisma.BoolFieldUpdateOperationsInput | boolean
  category?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}


/**
 * Count Type ExchangeCredentialsCountOutputType
 */

export type ExchangeCredentialsCountOutputType = {
  activeUsers: number
}

export type ExchangeCredentialsCountOutputTypeSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  activeUsers?: boolean | ExchangeCredentialsCountOutputTypeCountActiveUsersArgs
}

/**
 * ExchangeCredentialsCountOutputType without action
 */
export type ExchangeCredentialsCountOutputTypeDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ExchangeCredentialsCountOutputType
   */
  select?: Prisma.ExchangeCredentialsCountOutputTypeSelect<ExtArgs> | null
}

/**
 * ExchangeCredentialsCountOutputType without action
 */
export type ExchangeCredentialsCountOutputTypeCountActiveUsersArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.UserWhereInput
}


export type ExchangeCredentialsSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  userId?: boolean
  exchange?: boolean
  label?: boolean
  apiKey?: boolean
  apiSecret?: boolean
  apiSecretIv?: boolean
  apiSecretAuthTag?: boolean
  testnet?: boolean
  isActive?: boolean
  category?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
  activeUsers?: boolean | Prisma.ExchangeCredentials$activeUsersArgs<ExtArgs>
  _count?: boolean | Prisma.ExchangeCredentialsCountOutputTypeDefaultArgs<ExtArgs>
}, ExtArgs["result"]["exchangeCredentials"]>

export type ExchangeCredentialsSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  userId?: boolean
  exchange?: boolean
  label?: boolean
  apiKey?: boolean
  apiSecret?: boolean
  apiSecretIv?: boolean
  apiSecretAuthTag?: boolean
  testnet?: boolean
  isActive?: boolean
  category?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}, ExtArgs["result"]["exchangeCredentials"]>

export type ExchangeCredentialsSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  userId?: boolean
  exchange?: boolean
  label?: boolean
  apiKey?: boolean
  apiSecret?: boolean
  apiSecretIv?: boolean
  apiSecretAuthTag?: boolean
  testnet?: boolean
  isActive?: boolean
  category?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}, ExtArgs["result"]["exchangeCredentials"]>

export type ExchangeCredentialsSelectScalar = {
  id?: boolean
  userId?: boolean
  exchange?: boolean
  label?: boolean
  apiKey?: boolean
  apiSecret?: boolean
  apiSecretIv?: boolean
  apiSecretAuthTag?: boolean
  testnet?: boolean
  isActive?: boolean
  category?: boolean
  createdAt?: boolean
  updatedAt?: boolean
}

export type ExchangeCredentialsOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "userId" | "exchange" | "label" | "apiKey" | "apiSecret" | "apiSecretIv" | "apiSecretAuthTag" | "testnet" | "isActive" | "category" | "createdAt" | "updatedAt", ExtArgs["result"]["exchangeCredentials"]>
export type ExchangeCredentialsInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
  activeUsers?: boolean | Prisma.ExchangeCredentials$activeUsersArgs<ExtArgs>
  _count?: boolean | Prisma.ExchangeCredentialsCountOutputTypeDefaultArgs<ExtArgs>
}
export type ExchangeCredentialsIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}
export type ExchangeCredentialsIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}

export type $ExchangeCredentialsPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "ExchangeCredentials"
  objects: {
    user: Prisma.$UserPayload<ExtArgs>
    activeUsers: Prisma.$UserPayload<ExtArgs>[]
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: string
    userId: string
    exchange: string
    label: string
    apiKey: string
    apiSecret: string
    apiSecretIv: string
    apiSecretAuthTag: string
    testnet: boolean
    isActive: boolean
    category: string
    createdAt: Date
    updatedAt: Date
  }, ExtArgs["result"]["exchangeCredentials"]>
  composites: {}
}

export type ExchangeCredentialsGetPayload<S extends boolean | null | undefined | ExchangeCredentialsDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$ExchangeCredentialsPayload, S>

export type ExchangeCredentialsCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<ExchangeCredentialsFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: ExchangeCredentialsCountAggregateInputType | true
  }

export interface ExchangeCredentialsDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ExchangeCredentials'], meta: { name: 'ExchangeCredentials' } }
  /**
   * Find zero or one ExchangeCredentials that matches the filter.
   * @param {ExchangeCredentialsFindUniqueArgs} args - Arguments to find a ExchangeCredentials
   * @example
   * // Get one ExchangeCredentials
   * const exchangeCredentials = await prisma.exchangeCredentials.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends ExchangeCredentialsFindUniqueArgs>(args: Prisma.SelectSubset<T, ExchangeCredentialsFindUniqueArgs<ExtArgs>>): Prisma.Prisma__ExchangeCredentialsClient<runtime.Types.Result.GetResult<Prisma.$ExchangeCredentialsPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one ExchangeCredentials that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {ExchangeCredentialsFindUniqueOrThrowArgs} args - Arguments to find a ExchangeCredentials
   * @example
   * // Get one ExchangeCredentials
   * const exchangeCredentials = await prisma.exchangeCredentials.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends ExchangeCredentialsFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, ExchangeCredentialsFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__ExchangeCredentialsClient<runtime.Types.Result.GetResult<Prisma.$ExchangeCredentialsPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first ExchangeCredentials that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ExchangeCredentialsFindFirstArgs} args - Arguments to find a ExchangeCredentials
   * @example
   * // Get one ExchangeCredentials
   * const exchangeCredentials = await prisma.exchangeCredentials.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends ExchangeCredentialsFindFirstArgs>(args?: Prisma.SelectSubset<T, ExchangeCredentialsFindFirstArgs<ExtArgs>>): Prisma.Prisma__ExchangeCredentialsClient<runtime.Types.Result.GetResult<Prisma.$ExchangeCredentialsPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first ExchangeCredentials that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ExchangeCredentialsFindFirstOrThrowArgs} args - Arguments to find a ExchangeCredentials
   * @example
   * // Get one ExchangeCredentials
   * const exchangeCredentials = await prisma.exchangeCredentials.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends ExchangeCredentialsFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, ExchangeCredentialsFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__ExchangeCredentialsClient<runtime.Types.Result.GetResult<Prisma.$ExchangeCredentialsPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more ExchangeCredentials that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ExchangeCredentialsFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all ExchangeCredentials
   * const exchangeCredentials = await prisma.exchangeCredentials.findMany()
   * 
   * // Get first 10 ExchangeCredentials
   * const exchangeCredentials = await prisma.exchangeCredentials.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const exchangeCredentialsWithIdOnly = await prisma.exchangeCredentials.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends ExchangeCredentialsFindManyArgs>(args?: Prisma.SelectSubset<T, ExchangeCredentialsFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$ExchangeCredentialsPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a ExchangeCredentials.
   * @param {ExchangeCredentialsCreateArgs} args - Arguments to create a ExchangeCredentials.
   * @example
   * // Create one ExchangeCredentials
   * const ExchangeCredentials = await prisma.exchangeCredentials.create({
   *   data: {
   *     // ... data to create a ExchangeCredentials
   *   }
   * })
   * 
   */
  create<T extends ExchangeCredentialsCreateArgs>(args: Prisma.SelectSubset<T, ExchangeCredentialsCreateArgs<ExtArgs>>): Prisma.Prisma__ExchangeCredentialsClient<runtime.Types.Result.GetResult<Prisma.$ExchangeCredentialsPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many ExchangeCredentials.
   * @param {ExchangeCredentialsCreateManyArgs} args - Arguments to create many ExchangeCredentials.
   * @example
   * // Create many ExchangeCredentials
   * const exchangeCredentials = await prisma.exchangeCredentials.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends ExchangeCredentialsCreateManyArgs>(args?: Prisma.SelectSubset<T, ExchangeCredentialsCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many ExchangeCredentials and returns the data saved in the database.
   * @param {ExchangeCredentialsCreateManyAndReturnArgs} args - Arguments to create many ExchangeCredentials.
   * @example
   * // Create many ExchangeCredentials
   * const exchangeCredentials = await prisma.exchangeCredentials.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many ExchangeCredentials and only return the `id`
   * const exchangeCredentialsWithIdOnly = await prisma.exchangeCredentials.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends ExchangeCredentialsCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, ExchangeCredentialsCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$ExchangeCredentialsPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a ExchangeCredentials.
   * @param {ExchangeCredentialsDeleteArgs} args - Arguments to delete one ExchangeCredentials.
   * @example
   * // Delete one ExchangeCredentials
   * const ExchangeCredentials = await prisma.exchangeCredentials.delete({
   *   where: {
   *     // ... filter to delete one ExchangeCredentials
   *   }
   * })
   * 
   */
  delete<T extends ExchangeCredentialsDeleteArgs>(args: Prisma.SelectSubset<T, ExchangeCredentialsDeleteArgs<ExtArgs>>): Prisma.Prisma__ExchangeCredentialsClient<runtime.Types.Result.GetResult<Prisma.$ExchangeCredentialsPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one ExchangeCredentials.
   * @param {ExchangeCredentialsUpdateArgs} args - Arguments to update one ExchangeCredentials.
   * @example
   * // Update one ExchangeCredentials
   * const exchangeCredentials = await prisma.exchangeCredentials.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends ExchangeCredentialsUpdateArgs>(args: Prisma.SelectSubset<T, ExchangeCredentialsUpdateArgs<ExtArgs>>): Prisma.Prisma__ExchangeCredentialsClient<runtime.Types.Result.GetResult<Prisma.$ExchangeCredentialsPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more ExchangeCredentials.
   * @param {ExchangeCredentialsDeleteManyArgs} args - Arguments to filter ExchangeCredentials to delete.
   * @example
   * // Delete a few ExchangeCredentials
   * const { count } = await prisma.exchangeCredentials.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends ExchangeCredentialsDeleteManyArgs>(args?: Prisma.SelectSubset<T, ExchangeCredentialsDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more ExchangeCredentials.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ExchangeCredentialsUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many ExchangeCredentials
   * const exchangeCredentials = await prisma.exchangeCredentials.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends ExchangeCredentialsUpdateManyArgs>(args: Prisma.SelectSubset<T, ExchangeCredentialsUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more ExchangeCredentials and returns the data updated in the database.
   * @param {ExchangeCredentialsUpdateManyAndReturnArgs} args - Arguments to update many ExchangeCredentials.
   * @example
   * // Update many ExchangeCredentials
   * const exchangeCredentials = await prisma.exchangeCredentials.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more ExchangeCredentials and only return the `id`
   * const exchangeCredentialsWithIdOnly = await prisma.exchangeCredentials.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends ExchangeCredentialsUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, ExchangeCredentialsUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$ExchangeCredentialsPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one ExchangeCredentials.
   * @param {ExchangeCredentialsUpsertArgs} args - Arguments to update or create a ExchangeCredentials.
   * @example
   * // Update or create a ExchangeCredentials
   * const exchangeCredentials = await prisma.exchangeCredentials.upsert({
   *   create: {
   *     // ... data to create a ExchangeCredentials
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the ExchangeCredentials we want to update
   *   }
   * })
   */
  upsert<T extends ExchangeCredentialsUpsertArgs>(args: Prisma.SelectSubset<T, ExchangeCredentialsUpsertArgs<ExtArgs>>): Prisma.Prisma__ExchangeCredentialsClient<runtime.Types.Result.GetResult<Prisma.$ExchangeCredentialsPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of ExchangeCredentials.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ExchangeCredentialsCountArgs} args - Arguments to filter ExchangeCredentials to count.
   * @example
   * // Count the number of ExchangeCredentials
   * const count = await prisma.exchangeCredentials.count({
   *   where: {
   *     // ... the filter for the ExchangeCredentials we want to count
   *   }
   * })
  **/
  count<T extends ExchangeCredentialsCountArgs>(
    args?: Prisma.Subset<T, ExchangeCredentialsCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], ExchangeCredentialsCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a ExchangeCredentials.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ExchangeCredentialsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends ExchangeCredentialsAggregateArgs>(args: Prisma.Subset<T, ExchangeCredentialsAggregateArgs>): Prisma.PrismaPromise<GetExchangeCredentialsAggregateType<T>>

  /**
   * Group by ExchangeCredentials.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ExchangeCredentialsGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends ExchangeCredentialsGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: ExchangeCredentialsGroupByArgs['orderBy'] }
      : { orderBy?: ExchangeCredentialsGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, ExchangeCredentialsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetExchangeCredentialsGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the ExchangeCredentials model
 */
readonly fields: ExchangeCredentialsFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for ExchangeCredentials.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__ExchangeCredentialsClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  user<T extends Prisma.UserDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.UserDefaultArgs<ExtArgs>>): Prisma.Prisma__UserClient<runtime.Types.Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  activeUsers<T extends Prisma.ExchangeCredentials$activeUsersArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.ExchangeCredentials$activeUsersArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the ExchangeCredentials model
 */
export interface ExchangeCredentialsFieldRefs {
  readonly id: Prisma.FieldRef<"ExchangeCredentials", 'String'>
  readonly userId: Prisma.FieldRef<"ExchangeCredentials", 'String'>
  readonly exchange: Prisma.FieldRef<"ExchangeCredentials", 'String'>
  readonly label: Prisma.FieldRef<"ExchangeCredentials", 'String'>
  readonly apiKey: Prisma.FieldRef<"ExchangeCredentials", 'String'>
  readonly apiSecret: Prisma.FieldRef<"ExchangeCredentials", 'String'>
  readonly apiSecretIv: Prisma.FieldRef<"ExchangeCredentials", 'String'>
  readonly apiSecretAuthTag: Prisma.FieldRef<"ExchangeCredentials", 'String'>
  readonly testnet: Prisma.FieldRef<"ExchangeCredentials", 'Boolean'>
  readonly isActive: Prisma.FieldRef<"ExchangeCredentials", 'Boolean'>
  readonly category: Prisma.FieldRef<"ExchangeCredentials", 'String'>
  readonly createdAt: Prisma.FieldRef<"ExchangeCredentials", 'DateTime'>
  readonly updatedAt: Prisma.FieldRef<"ExchangeCredentials", 'DateTime'>
}
    

// Custom InputTypes
/**
 * ExchangeCredentials findUnique
 */
export type ExchangeCredentialsFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ExchangeCredentials
   */
  select?: Prisma.ExchangeCredentialsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ExchangeCredentials
   */
  omit?: Prisma.ExchangeCredentialsOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ExchangeCredentialsInclude<ExtArgs> | null
  /**
   * Filter, which ExchangeCredentials to fetch.
   */
  where: Prisma.ExchangeCredentialsWhereUniqueInput
}

/**
 * ExchangeCredentials findUniqueOrThrow
 */
export type ExchangeCredentialsFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ExchangeCredentials
   */
  select?: Prisma.ExchangeCredentialsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ExchangeCredentials
   */
  omit?: Prisma.ExchangeCredentialsOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ExchangeCredentialsInclude<ExtArgs> | null
  /**
   * Filter, which ExchangeCredentials to fetch.
   */
  where: Prisma.ExchangeCredentialsWhereUniqueInput
}

/**
 * ExchangeCredentials findFirst
 */
export type ExchangeCredentialsFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ExchangeCredentials
   */
  select?: Prisma.ExchangeCredentialsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ExchangeCredentials
   */
  omit?: Prisma.ExchangeCredentialsOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ExchangeCredentialsInclude<ExtArgs> | null
  /**
   * Filter, which ExchangeCredentials to fetch.
   */
  where?: Prisma.ExchangeCredentialsWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of ExchangeCredentials to fetch.
   */
  orderBy?: Prisma.ExchangeCredentialsOrderByWithRelationInput | Prisma.ExchangeCredentialsOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for ExchangeCredentials.
   */
  cursor?: Prisma.ExchangeCredentialsWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` ExchangeCredentials from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` ExchangeCredentials.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of ExchangeCredentials.
   */
  distinct?: Prisma.ExchangeCredentialsScalarFieldEnum | Prisma.ExchangeCredentialsScalarFieldEnum[]
}

/**
 * ExchangeCredentials findFirstOrThrow
 */
export type ExchangeCredentialsFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ExchangeCredentials
   */
  select?: Prisma.ExchangeCredentialsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ExchangeCredentials
   */
  omit?: Prisma.ExchangeCredentialsOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ExchangeCredentialsInclude<ExtArgs> | null
  /**
   * Filter, which ExchangeCredentials to fetch.
   */
  where?: Prisma.ExchangeCredentialsWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of ExchangeCredentials to fetch.
   */
  orderBy?: Prisma.ExchangeCredentialsOrderByWithRelationInput | Prisma.ExchangeCredentialsOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for ExchangeCredentials.
   */
  cursor?: Prisma.ExchangeCredentialsWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` ExchangeCredentials from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` ExchangeCredentials.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of ExchangeCredentials.
   */
  distinct?: Prisma.ExchangeCredentialsScalarFieldEnum | Prisma.ExchangeCredentialsScalarFieldEnum[]
}

/**
 * ExchangeCredentials findMany
 */
export type ExchangeCredentialsFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ExchangeCredentials
   */
  select?: Prisma.ExchangeCredentialsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ExchangeCredentials
   */
  omit?: Prisma.ExchangeCredentialsOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ExchangeCredentialsInclude<ExtArgs> | null
  /**
   * Filter, which ExchangeCredentials to fetch.
   */
  where?: Prisma.ExchangeCredentialsWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of ExchangeCredentials to fetch.
   */
  orderBy?: Prisma.ExchangeCredentialsOrderByWithRelationInput | Prisma.ExchangeCredentialsOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing ExchangeCredentials.
   */
  cursor?: Prisma.ExchangeCredentialsWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` ExchangeCredentials from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` ExchangeCredentials.
   */
  skip?: number
  distinct?: Prisma.ExchangeCredentialsScalarFieldEnum | Prisma.ExchangeCredentialsScalarFieldEnum[]
}

/**
 * ExchangeCredentials create
 */
export type ExchangeCredentialsCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ExchangeCredentials
   */
  select?: Prisma.ExchangeCredentialsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ExchangeCredentials
   */
  omit?: Prisma.ExchangeCredentialsOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ExchangeCredentialsInclude<ExtArgs> | null
  /**
   * The data needed to create a ExchangeCredentials.
   */
  data: Prisma.XOR<Prisma.ExchangeCredentialsCreateInput, Prisma.ExchangeCredentialsUncheckedCreateInput>
}

/**
 * ExchangeCredentials createMany
 */
export type ExchangeCredentialsCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many ExchangeCredentials.
   */
  data: Prisma.ExchangeCredentialsCreateManyInput | Prisma.ExchangeCredentialsCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * ExchangeCredentials createManyAndReturn
 */
export type ExchangeCredentialsCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ExchangeCredentials
   */
  select?: Prisma.ExchangeCredentialsSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the ExchangeCredentials
   */
  omit?: Prisma.ExchangeCredentialsOmit<ExtArgs> | null
  /**
   * The data used to create many ExchangeCredentials.
   */
  data: Prisma.ExchangeCredentialsCreateManyInput | Prisma.ExchangeCredentialsCreateManyInput[]
  skipDuplicates?: boolean
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ExchangeCredentialsIncludeCreateManyAndReturn<ExtArgs> | null
}

/**
 * ExchangeCredentials update
 */
export type ExchangeCredentialsUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ExchangeCredentials
   */
  select?: Prisma.ExchangeCredentialsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ExchangeCredentials
   */
  omit?: Prisma.ExchangeCredentialsOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ExchangeCredentialsInclude<ExtArgs> | null
  /**
   * The data needed to update a ExchangeCredentials.
   */
  data: Prisma.XOR<Prisma.ExchangeCredentialsUpdateInput, Prisma.ExchangeCredentialsUncheckedUpdateInput>
  /**
   * Choose, which ExchangeCredentials to update.
   */
  where: Prisma.ExchangeCredentialsWhereUniqueInput
}

/**
 * ExchangeCredentials updateMany
 */
export type ExchangeCredentialsUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update ExchangeCredentials.
   */
  data: Prisma.XOR<Prisma.ExchangeCredentialsUpdateManyMutationInput, Prisma.ExchangeCredentialsUncheckedUpdateManyInput>
  /**
   * Filter which ExchangeCredentials to update
   */
  where?: Prisma.ExchangeCredentialsWhereInput
  /**
   * Limit how many ExchangeCredentials to update.
   */
  limit?: number
}

/**
 * ExchangeCredentials updateManyAndReturn
 */
export type ExchangeCredentialsUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ExchangeCredentials
   */
  select?: Prisma.ExchangeCredentialsSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the ExchangeCredentials
   */
  omit?: Prisma.ExchangeCredentialsOmit<ExtArgs> | null
  /**
   * The data used to update ExchangeCredentials.
   */
  data: Prisma.XOR<Prisma.ExchangeCredentialsUpdateManyMutationInput, Prisma.ExchangeCredentialsUncheckedUpdateManyInput>
  /**
   * Filter which ExchangeCredentials to update
   */
  where?: Prisma.ExchangeCredentialsWhereInput
  /**
   * Limit how many ExchangeCredentials to update.
   */
  limit?: number
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ExchangeCredentialsIncludeUpdateManyAndReturn<ExtArgs> | null
}

/**
 * ExchangeCredentials upsert
 */
export type ExchangeCredentialsUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ExchangeCredentials
   */
  select?: Prisma.ExchangeCredentialsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ExchangeCredentials
   */
  omit?: Prisma.ExchangeCredentialsOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ExchangeCredentialsInclude<ExtArgs> | null
  /**
   * The filter to search for the ExchangeCredentials to update in case it exists.
   */
  where: Prisma.ExchangeCredentialsWhereUniqueInput
  /**
   * In case the ExchangeCredentials found by the `where` argument doesn't exist, create a new ExchangeCredentials with this data.
   */
  create: Prisma.XOR<Prisma.ExchangeCredentialsCreateInput, Prisma.ExchangeCredentialsUncheckedCreateInput>
  /**
   * In case the ExchangeCredentials was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.ExchangeCredentialsUpdateInput, Prisma.ExchangeCredentialsUncheckedUpdateInput>
}

/**
 * ExchangeCredentials delete
 */
export type ExchangeCredentialsDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ExchangeCredentials
   */
  select?: Prisma.ExchangeCredentialsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ExchangeCredentials
   */
  omit?: Prisma.ExchangeCredentialsOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ExchangeCredentialsInclude<ExtArgs> | null
  /**
   * Filter which ExchangeCredentials to delete.
   */
  where: Prisma.ExchangeCredentialsWhereUniqueInput
}

/**
 * ExchangeCredentials deleteMany
 */
export type ExchangeCredentialsDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which ExchangeCredentials to delete
   */
  where?: Prisma.ExchangeCredentialsWhereInput
  /**
   * Limit how many ExchangeCredentials to delete.
   */
  limit?: number
}

/**
 * ExchangeCredentials.activeUsers
 */
export type ExchangeCredentials$activeUsersArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the User
   */
  select?: Prisma.UserSelect<ExtArgs> | null
  /**
   * Omit specific fields from the User
   */
  omit?: Prisma.UserOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.UserInclude<ExtArgs> | null
  where?: Prisma.UserWhereInput
  orderBy?: Prisma.UserOrderByWithRelationInput | Prisma.UserOrderByWithRelationInput[]
  cursor?: Prisma.UserWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Prisma.UserScalarFieldEnum | Prisma.UserScalarFieldEnum[]
}

/**
 * ExchangeCredentials without action
 */
export type ExchangeCredentialsDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ExchangeCredentials
   */
  select?: Prisma.ExchangeCredentialsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ExchangeCredentials
   */
  omit?: Prisma.ExchangeCredentialsOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ExchangeCredentialsInclude<ExtArgs> | null
}
