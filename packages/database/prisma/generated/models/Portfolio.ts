
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/*
 * This file exports the `Portfolio` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import type * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums"
import type * as Prisma from "../internal/prismaNamespace"

/**
 * Model Portfolio
 * 
 */
export type PortfolioModel = runtime.Types.Result.DefaultSelection<Prisma.$PortfolioPayload>

export type AggregatePortfolio = {
  _count: PortfolioCountAggregateOutputType | null
  _avg: PortfolioAvgAggregateOutputType | null
  _sum: PortfolioSumAggregateOutputType | null
  _min: PortfolioMinAggregateOutputType | null
  _max: PortfolioMaxAggregateOutputType | null
}

export type PortfolioAvgAggregateOutputType = {
  balance: runtime.Decimal | null
  initialBalance: runtime.Decimal | null
}

export type PortfolioSumAggregateOutputType = {
  balance: runtime.Decimal | null
  initialBalance: runtime.Decimal | null
}

export type PortfolioMinAggregateOutputType = {
  id: string | null
  userId: string | null
  name: string | null
  balance: runtime.Decimal | null
  initialBalance: runtime.Decimal | null
  currency: string | null
  createdAt: Date | null
  updatedAt: Date | null
}

export type PortfolioMaxAggregateOutputType = {
  id: string | null
  userId: string | null
  name: string | null
  balance: runtime.Decimal | null
  initialBalance: runtime.Decimal | null
  currency: string | null
  createdAt: Date | null
  updatedAt: Date | null
}

export type PortfolioCountAggregateOutputType = {
  id: number
  userId: number
  name: number
  balance: number
  initialBalance: number
  currency: number
  createdAt: number
  updatedAt: number
  _all: number
}


export type PortfolioAvgAggregateInputType = {
  balance?: true
  initialBalance?: true
}

export type PortfolioSumAggregateInputType = {
  balance?: true
  initialBalance?: true
}

export type PortfolioMinAggregateInputType = {
  id?: true
  userId?: true
  name?: true
  balance?: true
  initialBalance?: true
  currency?: true
  createdAt?: true
  updatedAt?: true
}

export type PortfolioMaxAggregateInputType = {
  id?: true
  userId?: true
  name?: true
  balance?: true
  initialBalance?: true
  currency?: true
  createdAt?: true
  updatedAt?: true
}

export type PortfolioCountAggregateInputType = {
  id?: true
  userId?: true
  name?: true
  balance?: true
  initialBalance?: true
  currency?: true
  createdAt?: true
  updatedAt?: true
  _all?: true
}

export type PortfolioAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which Portfolio to aggregate.
   */
  where?: Prisma.PortfolioWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Portfolios to fetch.
   */
  orderBy?: Prisma.PortfolioOrderByWithRelationInput | Prisma.PortfolioOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.PortfolioWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Portfolios from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Portfolios.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned Portfolios
  **/
  _count?: true | PortfolioCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to average
  **/
  _avg?: PortfolioAvgAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to sum
  **/
  _sum?: PortfolioSumAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: PortfolioMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: PortfolioMaxAggregateInputType
}

export type GetPortfolioAggregateType<T extends PortfolioAggregateArgs> = {
      [P in keyof T & keyof AggregatePortfolio]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregatePortfolio[P]>
    : Prisma.GetScalarType<T[P], AggregatePortfolio[P]>
}




export type PortfolioGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.PortfolioWhereInput
  orderBy?: Prisma.PortfolioOrderByWithAggregationInput | Prisma.PortfolioOrderByWithAggregationInput[]
  by: Prisma.PortfolioScalarFieldEnum[] | Prisma.PortfolioScalarFieldEnum
  having?: Prisma.PortfolioScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: PortfolioCountAggregateInputType | true
  _avg?: PortfolioAvgAggregateInputType
  _sum?: PortfolioSumAggregateInputType
  _min?: PortfolioMinAggregateInputType
  _max?: PortfolioMaxAggregateInputType
}

export type PortfolioGroupByOutputType = {
  id: string
  userId: string
  name: string
  balance: runtime.Decimal
  initialBalance: runtime.Decimal
  currency: string
  createdAt: Date
  updatedAt: Date
  _count: PortfolioCountAggregateOutputType | null
  _avg: PortfolioAvgAggregateOutputType | null
  _sum: PortfolioSumAggregateOutputType | null
  _min: PortfolioMinAggregateOutputType | null
  _max: PortfolioMaxAggregateOutputType | null
}

type GetPortfolioGroupByPayload<T extends PortfolioGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<PortfolioGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof PortfolioGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], PortfolioGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], PortfolioGroupByOutputType[P]>
      }
    >
  >



export type PortfolioWhereInput = {
  AND?: Prisma.PortfolioWhereInput | Prisma.PortfolioWhereInput[]
  OR?: Prisma.PortfolioWhereInput[]
  NOT?: Prisma.PortfolioWhereInput | Prisma.PortfolioWhereInput[]
  id?: Prisma.StringFilter<"Portfolio"> | string
  userId?: Prisma.StringFilter<"Portfolio"> | string
  name?: Prisma.StringFilter<"Portfolio"> | string
  balance?: Prisma.DecimalFilter<"Portfolio"> | runtime.Decimal | runtime.DecimalJsLike | number | string
  initialBalance?: Prisma.DecimalFilter<"Portfolio"> | runtime.Decimal | runtime.DecimalJsLike | number | string
  currency?: Prisma.StringFilter<"Portfolio"> | string
  createdAt?: Prisma.DateTimeFilter<"Portfolio"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"Portfolio"> | Date | string
  user?: Prisma.XOR<Prisma.UserScalarRelationFilter, Prisma.UserWhereInput>
  positions?: Prisma.PositionListRelationFilter
  orders?: Prisma.OrderListRelationFilter
  riskLimits?: Prisma.RiskLimitListRelationFilter
  rebalances?: Prisma.PortfolioRebalanceListRelationFilter
}

export type PortfolioOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  name?: Prisma.SortOrder
  balance?: Prisma.SortOrder
  initialBalance?: Prisma.SortOrder
  currency?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  user?: Prisma.UserOrderByWithRelationInput
  positions?: Prisma.PositionOrderByRelationAggregateInput
  orders?: Prisma.OrderOrderByRelationAggregateInput
  riskLimits?: Prisma.RiskLimitOrderByRelationAggregateInput
  rebalances?: Prisma.PortfolioRebalanceOrderByRelationAggregateInput
}

export type PortfolioWhereUniqueInput = Prisma.AtLeast<{
  id?: string
  AND?: Prisma.PortfolioWhereInput | Prisma.PortfolioWhereInput[]
  OR?: Prisma.PortfolioWhereInput[]
  NOT?: Prisma.PortfolioWhereInput | Prisma.PortfolioWhereInput[]
  userId?: Prisma.StringFilter<"Portfolio"> | string
  name?: Prisma.StringFilter<"Portfolio"> | string
  balance?: Prisma.DecimalFilter<"Portfolio"> | runtime.Decimal | runtime.DecimalJsLike | number | string
  initialBalance?: Prisma.DecimalFilter<"Portfolio"> | runtime.Decimal | runtime.DecimalJsLike | number | string
  currency?: Prisma.StringFilter<"Portfolio"> | string
  createdAt?: Prisma.DateTimeFilter<"Portfolio"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"Portfolio"> | Date | string
  user?: Prisma.XOR<Prisma.UserScalarRelationFilter, Prisma.UserWhereInput>
  positions?: Prisma.PositionListRelationFilter
  orders?: Prisma.OrderListRelationFilter
  riskLimits?: Prisma.RiskLimitListRelationFilter
  rebalances?: Prisma.PortfolioRebalanceListRelationFilter
}, "id">

export type PortfolioOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  name?: Prisma.SortOrder
  balance?: Prisma.SortOrder
  initialBalance?: Prisma.SortOrder
  currency?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  _count?: Prisma.PortfolioCountOrderByAggregateInput
  _avg?: Prisma.PortfolioAvgOrderByAggregateInput
  _max?: Prisma.PortfolioMaxOrderByAggregateInput
  _min?: Prisma.PortfolioMinOrderByAggregateInput
  _sum?: Prisma.PortfolioSumOrderByAggregateInput
}

export type PortfolioScalarWhereWithAggregatesInput = {
  AND?: Prisma.PortfolioScalarWhereWithAggregatesInput | Prisma.PortfolioScalarWhereWithAggregatesInput[]
  OR?: Prisma.PortfolioScalarWhereWithAggregatesInput[]
  NOT?: Prisma.PortfolioScalarWhereWithAggregatesInput | Prisma.PortfolioScalarWhereWithAggregatesInput[]
  id?: Prisma.StringWithAggregatesFilter<"Portfolio"> | string
  userId?: Prisma.StringWithAggregatesFilter<"Portfolio"> | string
  name?: Prisma.StringWithAggregatesFilter<"Portfolio"> | string
  balance?: Prisma.DecimalWithAggregatesFilter<"Portfolio"> | runtime.Decimal | runtime.DecimalJsLike | number | string
  initialBalance?: Prisma.DecimalWithAggregatesFilter<"Portfolio"> | runtime.Decimal | runtime.DecimalJsLike | number | string
  currency?: Prisma.StringWithAggregatesFilter<"Portfolio"> | string
  createdAt?: Prisma.DateTimeWithAggregatesFilter<"Portfolio"> | Date | string
  updatedAt?: Prisma.DateTimeWithAggregatesFilter<"Portfolio"> | Date | string
}

export type PortfolioCreateInput = {
  id?: string
  name: string
  balance: runtime.Decimal | runtime.DecimalJsLike | number | string
  initialBalance?: runtime.Decimal | runtime.DecimalJsLike | number | string
  currency?: string
  createdAt?: Date | string
  updatedAt?: Date | string
  user: Prisma.UserCreateNestedOneWithoutPortfoliosInput
  positions?: Prisma.PositionCreateNestedManyWithoutPortfolioInput
  orders?: Prisma.OrderCreateNestedManyWithoutPortfolioInput
  riskLimits?: Prisma.RiskLimitCreateNestedManyWithoutPortfolioInput
  rebalances?: Prisma.PortfolioRebalanceCreateNestedManyWithoutPortfolioInput
}

export type PortfolioUncheckedCreateInput = {
  id?: string
  userId: string
  name: string
  balance: runtime.Decimal | runtime.DecimalJsLike | number | string
  initialBalance?: runtime.Decimal | runtime.DecimalJsLike | number | string
  currency?: string
  createdAt?: Date | string
  updatedAt?: Date | string
  positions?: Prisma.PositionUncheckedCreateNestedManyWithoutPortfolioInput
  orders?: Prisma.OrderUncheckedCreateNestedManyWithoutPortfolioInput
  riskLimits?: Prisma.RiskLimitUncheckedCreateNestedManyWithoutPortfolioInput
  rebalances?: Prisma.PortfolioRebalanceUncheckedCreateNestedManyWithoutPortfolioInput
}

export type PortfolioUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  balance?: Prisma.DecimalFieldUpdateOperationsInput | runtime.Decimal | runtime.DecimalJsLike | number | string
  initialBalance?: Prisma.DecimalFieldUpdateOperationsInput | runtime.Decimal | runtime.DecimalJsLike | number | string
  currency?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  user?: Prisma.UserUpdateOneRequiredWithoutPortfoliosNestedInput
  positions?: Prisma.PositionUpdateManyWithoutPortfolioNestedInput
  orders?: Prisma.OrderUpdateManyWithoutPortfolioNestedInput
  riskLimits?: Prisma.RiskLimitUpdateManyWithoutPortfolioNestedInput
  rebalances?: Prisma.PortfolioRebalanceUpdateManyWithoutPortfolioNestedInput
}

export type PortfolioUncheckedUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  userId?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  balance?: Prisma.DecimalFieldUpdateOperationsInput | runtime.Decimal | runtime.DecimalJsLike | number | string
  initialBalance?: Prisma.DecimalFieldUpdateOperationsInput | runtime.Decimal | runtime.DecimalJsLike | number | string
  currency?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  positions?: Prisma.PositionUncheckedUpdateManyWithoutPortfolioNestedInput
  orders?: Prisma.OrderUncheckedUpdateManyWithoutPortfolioNestedInput
  riskLimits?: Prisma.RiskLimitUncheckedUpdateManyWithoutPortfolioNestedInput
  rebalances?: Prisma.PortfolioRebalanceUncheckedUpdateManyWithoutPortfolioNestedInput
}

export type PortfolioCreateManyInput = {
  id?: string
  userId: string
  name: string
  balance: runtime.Decimal | runtime.DecimalJsLike | number | string
  initialBalance?: runtime.Decimal | runtime.DecimalJsLike | number | string
  currency?: string
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type PortfolioUpdateManyMutationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  balance?: Prisma.DecimalFieldUpdateOperationsInput | runtime.Decimal | runtime.DecimalJsLike | number | string
  initialBalance?: Prisma.DecimalFieldUpdateOperationsInput | runtime.Decimal | runtime.DecimalJsLike | number | string
  currency?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type PortfolioUncheckedUpdateManyInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  userId?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  balance?: Prisma.DecimalFieldUpdateOperationsInput | runtime.Decimal | runtime.DecimalJsLike | number | string
  initialBalance?: Prisma.DecimalFieldUpdateOperationsInput | runtime.Decimal | runtime.DecimalJsLike | number | string
  currency?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type PortfolioListRelationFilter = {
  every?: Prisma.PortfolioWhereInput
  some?: Prisma.PortfolioWhereInput
  none?: Prisma.PortfolioWhereInput
}

export type PortfolioOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder
}

export type PortfolioCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  name?: Prisma.SortOrder
  balance?: Prisma.SortOrder
  initialBalance?: Prisma.SortOrder
  currency?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type PortfolioAvgOrderByAggregateInput = {
  balance?: Prisma.SortOrder
  initialBalance?: Prisma.SortOrder
}

export type PortfolioMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  name?: Prisma.SortOrder
  balance?: Prisma.SortOrder
  initialBalance?: Prisma.SortOrder
  currency?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type PortfolioMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  name?: Prisma.SortOrder
  balance?: Prisma.SortOrder
  initialBalance?: Prisma.SortOrder
  currency?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type PortfolioSumOrderByAggregateInput = {
  balance?: Prisma.SortOrder
  initialBalance?: Prisma.SortOrder
}

export type PortfolioScalarRelationFilter = {
  is?: Prisma.PortfolioWhereInput
  isNot?: Prisma.PortfolioWhereInput
}

export type PortfolioNullableScalarRelationFilter = {
  is?: Prisma.PortfolioWhereInput | null
  isNot?: Prisma.PortfolioWhereInput | null
}

export type PortfolioCreateNestedManyWithoutUserInput = {
  create?: Prisma.XOR<Prisma.PortfolioCreateWithoutUserInput, Prisma.PortfolioUncheckedCreateWithoutUserInput> | Prisma.PortfolioCreateWithoutUserInput[] | Prisma.PortfolioUncheckedCreateWithoutUserInput[]
  connectOrCreate?: Prisma.PortfolioCreateOrConnectWithoutUserInput | Prisma.PortfolioCreateOrConnectWithoutUserInput[]
  createMany?: Prisma.PortfolioCreateManyUserInputEnvelope
  connect?: Prisma.PortfolioWhereUniqueInput | Prisma.PortfolioWhereUniqueInput[]
}

export type PortfolioUncheckedCreateNestedManyWithoutUserInput = {
  create?: Prisma.XOR<Prisma.PortfolioCreateWithoutUserInput, Prisma.PortfolioUncheckedCreateWithoutUserInput> | Prisma.PortfolioCreateWithoutUserInput[] | Prisma.PortfolioUncheckedCreateWithoutUserInput[]
  connectOrCreate?: Prisma.PortfolioCreateOrConnectWithoutUserInput | Prisma.PortfolioCreateOrConnectWithoutUserInput[]
  createMany?: Prisma.PortfolioCreateManyUserInputEnvelope
  connect?: Prisma.PortfolioWhereUniqueInput | Prisma.PortfolioWhereUniqueInput[]
}

export type PortfolioUpdateManyWithoutUserNestedInput = {
  create?: Prisma.XOR<Prisma.PortfolioCreateWithoutUserInput, Prisma.PortfolioUncheckedCreateWithoutUserInput> | Prisma.PortfolioCreateWithoutUserInput[] | Prisma.PortfolioUncheckedCreateWithoutUserInput[]
  connectOrCreate?: Prisma.PortfolioCreateOrConnectWithoutUserInput | Prisma.PortfolioCreateOrConnectWithoutUserInput[]
  upsert?: Prisma.PortfolioUpsertWithWhereUniqueWithoutUserInput | Prisma.PortfolioUpsertWithWhereUniqueWithoutUserInput[]
  createMany?: Prisma.PortfolioCreateManyUserInputEnvelope
  set?: Prisma.PortfolioWhereUniqueInput | Prisma.PortfolioWhereUniqueInput[]
  disconnect?: Prisma.PortfolioWhereUniqueInput | Prisma.PortfolioWhereUniqueInput[]
  delete?: Prisma.PortfolioWhereUniqueInput | Prisma.PortfolioWhereUniqueInput[]
  connect?: Prisma.PortfolioWhereUniqueInput | Prisma.PortfolioWhereUniqueInput[]
  update?: Prisma.PortfolioUpdateWithWhereUniqueWithoutUserInput | Prisma.PortfolioUpdateWithWhereUniqueWithoutUserInput[]
  updateMany?: Prisma.PortfolioUpdateManyWithWhereWithoutUserInput | Prisma.PortfolioUpdateManyWithWhereWithoutUserInput[]
  deleteMany?: Prisma.PortfolioScalarWhereInput | Prisma.PortfolioScalarWhereInput[]
}

export type PortfolioUncheckedUpdateManyWithoutUserNestedInput = {
  create?: Prisma.XOR<Prisma.PortfolioCreateWithoutUserInput, Prisma.PortfolioUncheckedCreateWithoutUserInput> | Prisma.PortfolioCreateWithoutUserInput[] | Prisma.PortfolioUncheckedCreateWithoutUserInput[]
  connectOrCreate?: Prisma.PortfolioCreateOrConnectWithoutUserInput | Prisma.PortfolioCreateOrConnectWithoutUserInput[]
  upsert?: Prisma.PortfolioUpsertWithWhereUniqueWithoutUserInput | Prisma.PortfolioUpsertWithWhereUniqueWithoutUserInput[]
  createMany?: Prisma.PortfolioCreateManyUserInputEnvelope
  set?: Prisma.PortfolioWhereUniqueInput | Prisma.PortfolioWhereUniqueInput[]
  disconnect?: Prisma.PortfolioWhereUniqueInput | Prisma.PortfolioWhereUniqueInput[]
  delete?: Prisma.PortfolioWhereUniqueInput | Prisma.PortfolioWhereUniqueInput[]
  connect?: Prisma.PortfolioWhereUniqueInput | Prisma.PortfolioWhereUniqueInput[]
  update?: Prisma.PortfolioUpdateWithWhereUniqueWithoutUserInput | Prisma.PortfolioUpdateWithWhereUniqueWithoutUserInput[]
  updateMany?: Prisma.PortfolioUpdateManyWithWhereWithoutUserInput | Prisma.PortfolioUpdateManyWithWhereWithoutUserInput[]
  deleteMany?: Prisma.PortfolioScalarWhereInput | Prisma.PortfolioScalarWhereInput[]
}

export type DecimalFieldUpdateOperationsInput = {
  set?: runtime.Decimal | runtime.DecimalJsLike | number | string
  increment?: runtime.Decimal | runtime.DecimalJsLike | number | string
  decrement?: runtime.Decimal | runtime.DecimalJsLike | number | string
  multiply?: runtime.Decimal | runtime.DecimalJsLike | number | string
  divide?: runtime.Decimal | runtime.DecimalJsLike | number | string
}

export type PortfolioCreateNestedOneWithoutPositionsInput = {
  create?: Prisma.XOR<Prisma.PortfolioCreateWithoutPositionsInput, Prisma.PortfolioUncheckedCreateWithoutPositionsInput>
  connectOrCreate?: Prisma.PortfolioCreateOrConnectWithoutPositionsInput
  connect?: Prisma.PortfolioWhereUniqueInput
}

export type PortfolioUpdateOneRequiredWithoutPositionsNestedInput = {
  create?: Prisma.XOR<Prisma.PortfolioCreateWithoutPositionsInput, Prisma.PortfolioUncheckedCreateWithoutPositionsInput>
  connectOrCreate?: Prisma.PortfolioCreateOrConnectWithoutPositionsInput
  upsert?: Prisma.PortfolioUpsertWithoutPositionsInput
  connect?: Prisma.PortfolioWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.PortfolioUpdateToOneWithWhereWithoutPositionsInput, Prisma.PortfolioUpdateWithoutPositionsInput>, Prisma.PortfolioUncheckedUpdateWithoutPositionsInput>
}

export type PortfolioCreateNestedOneWithoutOrdersInput = {
  create?: Prisma.XOR<Prisma.PortfolioCreateWithoutOrdersInput, Prisma.PortfolioUncheckedCreateWithoutOrdersInput>
  connectOrCreate?: Prisma.PortfolioCreateOrConnectWithoutOrdersInput
  connect?: Prisma.PortfolioWhereUniqueInput
}

export type PortfolioUpdateOneWithoutOrdersNestedInput = {
  create?: Prisma.XOR<Prisma.PortfolioCreateWithoutOrdersInput, Prisma.PortfolioUncheckedCreateWithoutOrdersInput>
  connectOrCreate?: Prisma.PortfolioCreateOrConnectWithoutOrdersInput
  upsert?: Prisma.PortfolioUpsertWithoutOrdersInput
  disconnect?: Prisma.PortfolioWhereInput | boolean
  delete?: Prisma.PortfolioWhereInput | boolean
  connect?: Prisma.PortfolioWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.PortfolioUpdateToOneWithWhereWithoutOrdersInput, Prisma.PortfolioUpdateWithoutOrdersInput>, Prisma.PortfolioUncheckedUpdateWithoutOrdersInput>
}

export type PortfolioCreateNestedOneWithoutRiskLimitsInput = {
  create?: Prisma.XOR<Prisma.PortfolioCreateWithoutRiskLimitsInput, Prisma.PortfolioUncheckedCreateWithoutRiskLimitsInput>
  connectOrCreate?: Prisma.PortfolioCreateOrConnectWithoutRiskLimitsInput
  connect?: Prisma.PortfolioWhereUniqueInput
}

export type PortfolioUpdateOneWithoutRiskLimitsNestedInput = {
  create?: Prisma.XOR<Prisma.PortfolioCreateWithoutRiskLimitsInput, Prisma.PortfolioUncheckedCreateWithoutRiskLimitsInput>
  connectOrCreate?: Prisma.PortfolioCreateOrConnectWithoutRiskLimitsInput
  upsert?: Prisma.PortfolioUpsertWithoutRiskLimitsInput
  disconnect?: Prisma.PortfolioWhereInput | boolean
  delete?: Prisma.PortfolioWhereInput | boolean
  connect?: Prisma.PortfolioWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.PortfolioUpdateToOneWithWhereWithoutRiskLimitsInput, Prisma.PortfolioUpdateWithoutRiskLimitsInput>, Prisma.PortfolioUncheckedUpdateWithoutRiskLimitsInput>
}

export type PortfolioCreateNestedOneWithoutRebalancesInput = {
  create?: Prisma.XOR<Prisma.PortfolioCreateWithoutRebalancesInput, Prisma.PortfolioUncheckedCreateWithoutRebalancesInput>
  connectOrCreate?: Prisma.PortfolioCreateOrConnectWithoutRebalancesInput
  connect?: Prisma.PortfolioWhereUniqueInput
}

export type PortfolioUpdateOneRequiredWithoutRebalancesNestedInput = {
  create?: Prisma.XOR<Prisma.PortfolioCreateWithoutRebalancesInput, Prisma.PortfolioUncheckedCreateWithoutRebalancesInput>
  connectOrCreate?: Prisma.PortfolioCreateOrConnectWithoutRebalancesInput
  upsert?: Prisma.PortfolioUpsertWithoutRebalancesInput
  connect?: Prisma.PortfolioWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.PortfolioUpdateToOneWithWhereWithoutRebalancesInput, Prisma.PortfolioUpdateWithoutRebalancesInput>, Prisma.PortfolioUncheckedUpdateWithoutRebalancesInput>
}

export type PortfolioCreateWithoutUserInput = {
  id?: string
  name: string
  balance: runtime.Decimal | runtime.DecimalJsLike | number | string
  initialBalance?: runtime.Decimal | runtime.DecimalJsLike | number | string
  currency?: string
  createdAt?: Date | string
  updatedAt?: Date | string
  positions?: Prisma.PositionCreateNestedManyWithoutPortfolioInput
  orders?: Prisma.OrderCreateNestedManyWithoutPortfolioInput
  riskLimits?: Prisma.RiskLimitCreateNestedManyWithoutPortfolioInput
  rebalances?: Prisma.PortfolioRebalanceCreateNestedManyWithoutPortfolioInput
}

export type PortfolioUncheckedCreateWithoutUserInput = {
  id?: string
  name: string
  balance: runtime.Decimal | runtime.DecimalJsLike | number | string
  initialBalance?: runtime.Decimal | runtime.DecimalJsLike | number | string
  currency?: string
  createdAt?: Date | string
  updatedAt?: Date | string
  positions?: Prisma.PositionUncheckedCreateNestedManyWithoutPortfolioInput
  orders?: Prisma.OrderUncheckedCreateNestedManyWithoutPortfolioInput
  riskLimits?: Prisma.RiskLimitUncheckedCreateNestedManyWithoutPortfolioInput
  rebalances?: Prisma.PortfolioRebalanceUncheckedCreateNestedManyWithoutPortfolioInput
}

export type PortfolioCreateOrConnectWithoutUserInput = {
  where: Prisma.PortfolioWhereUniqueInput
  create: Prisma.XOR<Prisma.PortfolioCreateWithoutUserInput, Prisma.PortfolioUncheckedCreateWithoutUserInput>
}

export type PortfolioCreateManyUserInputEnvelope = {
  data: Prisma.PortfolioCreateManyUserInput | Prisma.PortfolioCreateManyUserInput[]
  skipDuplicates?: boolean
}

export type PortfolioUpsertWithWhereUniqueWithoutUserInput = {
  where: Prisma.PortfolioWhereUniqueInput
  update: Prisma.XOR<Prisma.PortfolioUpdateWithoutUserInput, Prisma.PortfolioUncheckedUpdateWithoutUserInput>
  create: Prisma.XOR<Prisma.PortfolioCreateWithoutUserInput, Prisma.PortfolioUncheckedCreateWithoutUserInput>
}

export type PortfolioUpdateWithWhereUniqueWithoutUserInput = {
  where: Prisma.PortfolioWhereUniqueInput
  data: Prisma.XOR<Prisma.PortfolioUpdateWithoutUserInput, Prisma.PortfolioUncheckedUpdateWithoutUserInput>
}

export type PortfolioUpdateManyWithWhereWithoutUserInput = {
  where: Prisma.PortfolioScalarWhereInput
  data: Prisma.XOR<Prisma.PortfolioUpdateManyMutationInput, Prisma.PortfolioUncheckedUpdateManyWithoutUserInput>
}

export type PortfolioScalarWhereInput = {
  AND?: Prisma.PortfolioScalarWhereInput | Prisma.PortfolioScalarWhereInput[]
  OR?: Prisma.PortfolioScalarWhereInput[]
  NOT?: Prisma.PortfolioScalarWhereInput | Prisma.PortfolioScalarWhereInput[]
  id?: Prisma.StringFilter<"Portfolio"> | string
  userId?: Prisma.StringFilter<"Portfolio"> | string
  name?: Prisma.StringFilter<"Portfolio"> | string
  balance?: Prisma.DecimalFilter<"Portfolio"> | runtime.Decimal | runtime.DecimalJsLike | number | string
  initialBalance?: Prisma.DecimalFilter<"Portfolio"> | runtime.Decimal | runtime.DecimalJsLike | number | string
  currency?: Prisma.StringFilter<"Portfolio"> | string
  createdAt?: Prisma.DateTimeFilter<"Portfolio"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"Portfolio"> | Date | string
}

export type PortfolioCreateWithoutPositionsInput = {
  id?: string
  name: string
  balance: runtime.Decimal | runtime.DecimalJsLike | number | string
  initialBalance?: runtime.Decimal | runtime.DecimalJsLike | number | string
  currency?: string
  createdAt?: Date | string
  updatedAt?: Date | string
  user: Prisma.UserCreateNestedOneWithoutPortfoliosInput
  orders?: Prisma.OrderCreateNestedManyWithoutPortfolioInput
  riskLimits?: Prisma.RiskLimitCreateNestedManyWithoutPortfolioInput
  rebalances?: Prisma.PortfolioRebalanceCreateNestedManyWithoutPortfolioInput
}

export type PortfolioUncheckedCreateWithoutPositionsInput = {
  id?: string
  userId: string
  name: string
  balance: runtime.Decimal | runtime.DecimalJsLike | number | string
  initialBalance?: runtime.Decimal | runtime.DecimalJsLike | number | string
  currency?: string
  createdAt?: Date | string
  updatedAt?: Date | string
  orders?: Prisma.OrderUncheckedCreateNestedManyWithoutPortfolioInput
  riskLimits?: Prisma.RiskLimitUncheckedCreateNestedManyWithoutPortfolioInput
  rebalances?: Prisma.PortfolioRebalanceUncheckedCreateNestedManyWithoutPortfolioInput
}

export type PortfolioCreateOrConnectWithoutPositionsInput = {
  where: Prisma.PortfolioWhereUniqueInput
  create: Prisma.XOR<Prisma.PortfolioCreateWithoutPositionsInput, Prisma.PortfolioUncheckedCreateWithoutPositionsInput>
}

export type PortfolioUpsertWithoutPositionsInput = {
  update: Prisma.XOR<Prisma.PortfolioUpdateWithoutPositionsInput, Prisma.PortfolioUncheckedUpdateWithoutPositionsInput>
  create: Prisma.XOR<Prisma.PortfolioCreateWithoutPositionsInput, Prisma.PortfolioUncheckedCreateWithoutPositionsInput>
  where?: Prisma.PortfolioWhereInput
}

export type PortfolioUpdateToOneWithWhereWithoutPositionsInput = {
  where?: Prisma.PortfolioWhereInput
  data: Prisma.XOR<Prisma.PortfolioUpdateWithoutPositionsInput, Prisma.PortfolioUncheckedUpdateWithoutPositionsInput>
}

export type PortfolioUpdateWithoutPositionsInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  balance?: Prisma.DecimalFieldUpdateOperationsInput | runtime.Decimal | runtime.DecimalJsLike | number | string
  initialBalance?: Prisma.DecimalFieldUpdateOperationsInput | runtime.Decimal | runtime.DecimalJsLike | number | string
  currency?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  user?: Prisma.UserUpdateOneRequiredWithoutPortfoliosNestedInput
  orders?: Prisma.OrderUpdateManyWithoutPortfolioNestedInput
  riskLimits?: Prisma.RiskLimitUpdateManyWithoutPortfolioNestedInput
  rebalances?: Prisma.PortfolioRebalanceUpdateManyWithoutPortfolioNestedInput
}

export type PortfolioUncheckedUpdateWithoutPositionsInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  userId?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  balance?: Prisma.DecimalFieldUpdateOperationsInput | runtime.Decimal | runtime.DecimalJsLike | number | string
  initialBalance?: Prisma.DecimalFieldUpdateOperationsInput | runtime.Decimal | runtime.DecimalJsLike | number | string
  currency?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  orders?: Prisma.OrderUncheckedUpdateManyWithoutPortfolioNestedInput
  riskLimits?: Prisma.RiskLimitUncheckedUpdateManyWithoutPortfolioNestedInput
  rebalances?: Prisma.PortfolioRebalanceUncheckedUpdateManyWithoutPortfolioNestedInput
}

export type PortfolioCreateWithoutOrdersInput = {
  id?: string
  name: string
  balance: runtime.Decimal | runtime.DecimalJsLike | number | string
  initialBalance?: runtime.Decimal | runtime.DecimalJsLike | number | string
  currency?: string
  createdAt?: Date | string
  updatedAt?: Date | string
  user: Prisma.UserCreateNestedOneWithoutPortfoliosInput
  positions?: Prisma.PositionCreateNestedManyWithoutPortfolioInput
  riskLimits?: Prisma.RiskLimitCreateNestedManyWithoutPortfolioInput
  rebalances?: Prisma.PortfolioRebalanceCreateNestedManyWithoutPortfolioInput
}

export type PortfolioUncheckedCreateWithoutOrdersInput = {
  id?: string
  userId: string
  name: string
  balance: runtime.Decimal | runtime.DecimalJsLike | number | string
  initialBalance?: runtime.Decimal | runtime.DecimalJsLike | number | string
  currency?: string
  createdAt?: Date | string
  updatedAt?: Date | string
  positions?: Prisma.PositionUncheckedCreateNestedManyWithoutPortfolioInput
  riskLimits?: Prisma.RiskLimitUncheckedCreateNestedManyWithoutPortfolioInput
  rebalances?: Prisma.PortfolioRebalanceUncheckedCreateNestedManyWithoutPortfolioInput
}

export type PortfolioCreateOrConnectWithoutOrdersInput = {
  where: Prisma.PortfolioWhereUniqueInput
  create: Prisma.XOR<Prisma.PortfolioCreateWithoutOrdersInput, Prisma.PortfolioUncheckedCreateWithoutOrdersInput>
}

export type PortfolioUpsertWithoutOrdersInput = {
  update: Prisma.XOR<Prisma.PortfolioUpdateWithoutOrdersInput, Prisma.PortfolioUncheckedUpdateWithoutOrdersInput>
  create: Prisma.XOR<Prisma.PortfolioCreateWithoutOrdersInput, Prisma.PortfolioUncheckedCreateWithoutOrdersInput>
  where?: Prisma.PortfolioWhereInput
}

export type PortfolioUpdateToOneWithWhereWithoutOrdersInput = {
  where?: Prisma.PortfolioWhereInput
  data: Prisma.XOR<Prisma.PortfolioUpdateWithoutOrdersInput, Prisma.PortfolioUncheckedUpdateWithoutOrdersInput>
}

export type PortfolioUpdateWithoutOrdersInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  balance?: Prisma.DecimalFieldUpdateOperationsInput | runtime.Decimal | runtime.DecimalJsLike | number | string
  initialBalance?: Prisma.DecimalFieldUpdateOperationsInput | runtime.Decimal | runtime.DecimalJsLike | number | string
  currency?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  user?: Prisma.UserUpdateOneRequiredWithoutPortfoliosNestedInput
  positions?: Prisma.PositionUpdateManyWithoutPortfolioNestedInput
  riskLimits?: Prisma.RiskLimitUpdateManyWithoutPortfolioNestedInput
  rebalances?: Prisma.PortfolioRebalanceUpdateManyWithoutPortfolioNestedInput
}

export type PortfolioUncheckedUpdateWithoutOrdersInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  userId?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  balance?: Prisma.DecimalFieldUpdateOperationsInput | runtime.Decimal | runtime.DecimalJsLike | number | string
  initialBalance?: Prisma.DecimalFieldUpdateOperationsInput | runtime.Decimal | runtime.DecimalJsLike | number | string
  currency?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  positions?: Prisma.PositionUncheckedUpdateManyWithoutPortfolioNestedInput
  riskLimits?: Prisma.RiskLimitUncheckedUpdateManyWithoutPortfolioNestedInput
  rebalances?: Prisma.PortfolioRebalanceUncheckedUpdateManyWithoutPortfolioNestedInput
}

export type PortfolioCreateWithoutRiskLimitsInput = {
  id?: string
  name: string
  balance: runtime.Decimal | runtime.DecimalJsLike | number | string
  initialBalance?: runtime.Decimal | runtime.DecimalJsLike | number | string
  currency?: string
  createdAt?: Date | string
  updatedAt?: Date | string
  user: Prisma.UserCreateNestedOneWithoutPortfoliosInput
  positions?: Prisma.PositionCreateNestedManyWithoutPortfolioInput
  orders?: Prisma.OrderCreateNestedManyWithoutPortfolioInput
  rebalances?: Prisma.PortfolioRebalanceCreateNestedManyWithoutPortfolioInput
}

export type PortfolioUncheckedCreateWithoutRiskLimitsInput = {
  id?: string
  userId: string
  name: string
  balance: runtime.Decimal | runtime.DecimalJsLike | number | string
  initialBalance?: runtime.Decimal | runtime.DecimalJsLike | number | string
  currency?: string
  createdAt?: Date | string
  updatedAt?: Date | string
  positions?: Prisma.PositionUncheckedCreateNestedManyWithoutPortfolioInput
  orders?: Prisma.OrderUncheckedCreateNestedManyWithoutPortfolioInput
  rebalances?: Prisma.PortfolioRebalanceUncheckedCreateNestedManyWithoutPortfolioInput
}

export type PortfolioCreateOrConnectWithoutRiskLimitsInput = {
  where: Prisma.PortfolioWhereUniqueInput
  create: Prisma.XOR<Prisma.PortfolioCreateWithoutRiskLimitsInput, Prisma.PortfolioUncheckedCreateWithoutRiskLimitsInput>
}

export type PortfolioUpsertWithoutRiskLimitsInput = {
  update: Prisma.XOR<Prisma.PortfolioUpdateWithoutRiskLimitsInput, Prisma.PortfolioUncheckedUpdateWithoutRiskLimitsInput>
  create: Prisma.XOR<Prisma.PortfolioCreateWithoutRiskLimitsInput, Prisma.PortfolioUncheckedCreateWithoutRiskLimitsInput>
  where?: Prisma.PortfolioWhereInput
}

export type PortfolioUpdateToOneWithWhereWithoutRiskLimitsInput = {
  where?: Prisma.PortfolioWhereInput
  data: Prisma.XOR<Prisma.PortfolioUpdateWithoutRiskLimitsInput, Prisma.PortfolioUncheckedUpdateWithoutRiskLimitsInput>
}

export type PortfolioUpdateWithoutRiskLimitsInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  balance?: Prisma.DecimalFieldUpdateOperationsInput | runtime.Decimal | runtime.DecimalJsLike | number | string
  initialBalance?: Prisma.DecimalFieldUpdateOperationsInput | runtime.Decimal | runtime.DecimalJsLike | number | string
  currency?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  user?: Prisma.UserUpdateOneRequiredWithoutPortfoliosNestedInput
  positions?: Prisma.PositionUpdateManyWithoutPortfolioNestedInput
  orders?: Prisma.OrderUpdateManyWithoutPortfolioNestedInput
  rebalances?: Prisma.PortfolioRebalanceUpdateManyWithoutPortfolioNestedInput
}

export type PortfolioUncheckedUpdateWithoutRiskLimitsInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  userId?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  balance?: Prisma.DecimalFieldUpdateOperationsInput | runtime.Decimal | runtime.DecimalJsLike | number | string
  initialBalance?: Prisma.DecimalFieldUpdateOperationsInput | runtime.Decimal | runtime.DecimalJsLike | number | string
  currency?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  positions?: Prisma.PositionUncheckedUpdateManyWithoutPortfolioNestedInput
  orders?: Prisma.OrderUncheckedUpdateManyWithoutPortfolioNestedInput
  rebalances?: Prisma.PortfolioRebalanceUncheckedUpdateManyWithoutPortfolioNestedInput
}

export type PortfolioCreateWithoutRebalancesInput = {
  id?: string
  name: string
  balance: runtime.Decimal | runtime.DecimalJsLike | number | string
  initialBalance?: runtime.Decimal | runtime.DecimalJsLike | number | string
  currency?: string
  createdAt?: Date | string
  updatedAt?: Date | string
  user: Prisma.UserCreateNestedOneWithoutPortfoliosInput
  positions?: Prisma.PositionCreateNestedManyWithoutPortfolioInput
  orders?: Prisma.OrderCreateNestedManyWithoutPortfolioInput
  riskLimits?: Prisma.RiskLimitCreateNestedManyWithoutPortfolioInput
}

export type PortfolioUncheckedCreateWithoutRebalancesInput = {
  id?: string
  userId: string
  name: string
  balance: runtime.Decimal | runtime.DecimalJsLike | number | string
  initialBalance?: runtime.Decimal | runtime.DecimalJsLike | number | string
  currency?: string
  createdAt?: Date | string
  updatedAt?: Date | string
  positions?: Prisma.PositionUncheckedCreateNestedManyWithoutPortfolioInput
  orders?: Prisma.OrderUncheckedCreateNestedManyWithoutPortfolioInput
  riskLimits?: Prisma.RiskLimitUncheckedCreateNestedManyWithoutPortfolioInput
}

export type PortfolioCreateOrConnectWithoutRebalancesInput = {
  where: Prisma.PortfolioWhereUniqueInput
  create: Prisma.XOR<Prisma.PortfolioCreateWithoutRebalancesInput, Prisma.PortfolioUncheckedCreateWithoutRebalancesInput>
}

export type PortfolioUpsertWithoutRebalancesInput = {
  update: Prisma.XOR<Prisma.PortfolioUpdateWithoutRebalancesInput, Prisma.PortfolioUncheckedUpdateWithoutRebalancesInput>
  create: Prisma.XOR<Prisma.PortfolioCreateWithoutRebalancesInput, Prisma.PortfolioUncheckedCreateWithoutRebalancesInput>
  where?: Prisma.PortfolioWhereInput
}

export type PortfolioUpdateToOneWithWhereWithoutRebalancesInput = {
  where?: Prisma.PortfolioWhereInput
  data: Prisma.XOR<Prisma.PortfolioUpdateWithoutRebalancesInput, Prisma.PortfolioUncheckedUpdateWithoutRebalancesInput>
}

export type PortfolioUpdateWithoutRebalancesInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  balance?: Prisma.DecimalFieldUpdateOperationsInput | runtime.Decimal | runtime.DecimalJsLike | number | string
  initialBalance?: Prisma.DecimalFieldUpdateOperationsInput | runtime.Decimal | runtime.DecimalJsLike | number | string
  currency?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  user?: Prisma.UserUpdateOneRequiredWithoutPortfoliosNestedInput
  positions?: Prisma.PositionUpdateManyWithoutPortfolioNestedInput
  orders?: Prisma.OrderUpdateManyWithoutPortfolioNestedInput
  riskLimits?: Prisma.RiskLimitUpdateManyWithoutPortfolioNestedInput
}

export type PortfolioUncheckedUpdateWithoutRebalancesInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  userId?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  balance?: Prisma.DecimalFieldUpdateOperationsInput | runtime.Decimal | runtime.DecimalJsLike | number | string
  initialBalance?: Prisma.DecimalFieldUpdateOperationsInput | runtime.Decimal | runtime.DecimalJsLike | number | string
  currency?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  positions?: Prisma.PositionUncheckedUpdateManyWithoutPortfolioNestedInput
  orders?: Prisma.OrderUncheckedUpdateManyWithoutPortfolioNestedInput
  riskLimits?: Prisma.RiskLimitUncheckedUpdateManyWithoutPortfolioNestedInput
}

export type PortfolioCreateManyUserInput = {
  id?: string
  name: string
  balance: runtime.Decimal | runtime.DecimalJsLike | number | string
  initialBalance?: runtime.Decimal | runtime.DecimalJsLike | number | string
  currency?: string
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type PortfolioUpdateWithoutUserInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  balance?: Prisma.DecimalFieldUpdateOperationsInput | runtime.Decimal | runtime.DecimalJsLike | number | string
  initialBalance?: Prisma.DecimalFieldUpdateOperationsInput | runtime.Decimal | runtime.DecimalJsLike | number | string
  currency?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  positions?: Prisma.PositionUpdateManyWithoutPortfolioNestedInput
  orders?: Prisma.OrderUpdateManyWithoutPortfolioNestedInput
  riskLimits?: Prisma.RiskLimitUpdateManyWithoutPortfolioNestedInput
  rebalances?: Prisma.PortfolioRebalanceUpdateManyWithoutPortfolioNestedInput
}

export type PortfolioUncheckedUpdateWithoutUserInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  balance?: Prisma.DecimalFieldUpdateOperationsInput | runtime.Decimal | runtime.DecimalJsLike | number | string
  initialBalance?: Prisma.DecimalFieldUpdateOperationsInput | runtime.Decimal | runtime.DecimalJsLike | number | string
  currency?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  positions?: Prisma.PositionUncheckedUpdateManyWithoutPortfolioNestedInput
  orders?: Prisma.OrderUncheckedUpdateManyWithoutPortfolioNestedInput
  riskLimits?: Prisma.RiskLimitUncheckedUpdateManyWithoutPortfolioNestedInput
  rebalances?: Prisma.PortfolioRebalanceUncheckedUpdateManyWithoutPortfolioNestedInput
}

export type PortfolioUncheckedUpdateManyWithoutUserInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  balance?: Prisma.DecimalFieldUpdateOperationsInput | runtime.Decimal | runtime.DecimalJsLike | number | string
  initialBalance?: Prisma.DecimalFieldUpdateOperationsInput | runtime.Decimal | runtime.DecimalJsLike | number | string
  currency?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}


/**
 * Count Type PortfolioCountOutputType
 */

export type PortfolioCountOutputType = {
  positions: number
  orders: number
  riskLimits: number
  rebalances: number
}

export type PortfolioCountOutputTypeSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  positions?: boolean | PortfolioCountOutputTypeCountPositionsArgs
  orders?: boolean | PortfolioCountOutputTypeCountOrdersArgs
  riskLimits?: boolean | PortfolioCountOutputTypeCountRiskLimitsArgs
  rebalances?: boolean | PortfolioCountOutputTypeCountRebalancesArgs
}

/**
 * PortfolioCountOutputType without action
 */
export type PortfolioCountOutputTypeDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PortfolioCountOutputType
   */
  select?: Prisma.PortfolioCountOutputTypeSelect<ExtArgs> | null
}

/**
 * PortfolioCountOutputType without action
 */
export type PortfolioCountOutputTypeCountPositionsArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.PositionWhereInput
}

/**
 * PortfolioCountOutputType without action
 */
export type PortfolioCountOutputTypeCountOrdersArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.OrderWhereInput
}

/**
 * PortfolioCountOutputType without action
 */
export type PortfolioCountOutputTypeCountRiskLimitsArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.RiskLimitWhereInput
}

/**
 * PortfolioCountOutputType without action
 */
export type PortfolioCountOutputTypeCountRebalancesArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.PortfolioRebalanceWhereInput
}


export type PortfolioSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  userId?: boolean
  name?: boolean
  balance?: boolean
  initialBalance?: boolean
  currency?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
  positions?: boolean | Prisma.Portfolio$positionsArgs<ExtArgs>
  orders?: boolean | Prisma.Portfolio$ordersArgs<ExtArgs>
  riskLimits?: boolean | Prisma.Portfolio$riskLimitsArgs<ExtArgs>
  rebalances?: boolean | Prisma.Portfolio$rebalancesArgs<ExtArgs>
  _count?: boolean | Prisma.PortfolioCountOutputTypeDefaultArgs<ExtArgs>
}, ExtArgs["result"]["portfolio"]>

export type PortfolioSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  userId?: boolean
  name?: boolean
  balance?: boolean
  initialBalance?: boolean
  currency?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}, ExtArgs["result"]["portfolio"]>

export type PortfolioSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  userId?: boolean
  name?: boolean
  balance?: boolean
  initialBalance?: boolean
  currency?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}, ExtArgs["result"]["portfolio"]>

export type PortfolioSelectScalar = {
  id?: boolean
  userId?: boolean
  name?: boolean
  balance?: boolean
  initialBalance?: boolean
  currency?: boolean
  createdAt?: boolean
  updatedAt?: boolean
}

export type PortfolioOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "userId" | "name" | "balance" | "initialBalance" | "currency" | "createdAt" | "updatedAt", ExtArgs["result"]["portfolio"]>
export type PortfolioInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
  positions?: boolean | Prisma.Portfolio$positionsArgs<ExtArgs>
  orders?: boolean | Prisma.Portfolio$ordersArgs<ExtArgs>
  riskLimits?: boolean | Prisma.Portfolio$riskLimitsArgs<ExtArgs>
  rebalances?: boolean | Prisma.Portfolio$rebalancesArgs<ExtArgs>
  _count?: boolean | Prisma.PortfolioCountOutputTypeDefaultArgs<ExtArgs>
}
export type PortfolioIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}
export type PortfolioIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}

export type $PortfolioPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "Portfolio"
  objects: {
    user: Prisma.$UserPayload<ExtArgs>
    positions: Prisma.$PositionPayload<ExtArgs>[]
    orders: Prisma.$OrderPayload<ExtArgs>[]
    riskLimits: Prisma.$RiskLimitPayload<ExtArgs>[]
    rebalances: Prisma.$PortfolioRebalancePayload<ExtArgs>[]
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: string
    userId: string
    name: string
    balance: runtime.Decimal
    initialBalance: runtime.Decimal
    currency: string
    createdAt: Date
    updatedAt: Date
  }, ExtArgs["result"]["portfolio"]>
  composites: {}
}

export type PortfolioGetPayload<S extends boolean | null | undefined | PortfolioDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$PortfolioPayload, S>

export type PortfolioCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<PortfolioFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: PortfolioCountAggregateInputType | true
  }

export interface PortfolioDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Portfolio'], meta: { name: 'Portfolio' } }
  /**
   * Find zero or one Portfolio that matches the filter.
   * @param {PortfolioFindUniqueArgs} args - Arguments to find a Portfolio
   * @example
   * // Get one Portfolio
   * const portfolio = await prisma.portfolio.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends PortfolioFindUniqueArgs>(args: Prisma.SelectSubset<T, PortfolioFindUniqueArgs<ExtArgs>>): Prisma.Prisma__PortfolioClient<runtime.Types.Result.GetResult<Prisma.$PortfolioPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one Portfolio that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {PortfolioFindUniqueOrThrowArgs} args - Arguments to find a Portfolio
   * @example
   * // Get one Portfolio
   * const portfolio = await prisma.portfolio.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends PortfolioFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, PortfolioFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__PortfolioClient<runtime.Types.Result.GetResult<Prisma.$PortfolioPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Portfolio that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {PortfolioFindFirstArgs} args - Arguments to find a Portfolio
   * @example
   * // Get one Portfolio
   * const portfolio = await prisma.portfolio.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends PortfolioFindFirstArgs>(args?: Prisma.SelectSubset<T, PortfolioFindFirstArgs<ExtArgs>>): Prisma.Prisma__PortfolioClient<runtime.Types.Result.GetResult<Prisma.$PortfolioPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Portfolio that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {PortfolioFindFirstOrThrowArgs} args - Arguments to find a Portfolio
   * @example
   * // Get one Portfolio
   * const portfolio = await prisma.portfolio.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends PortfolioFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, PortfolioFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__PortfolioClient<runtime.Types.Result.GetResult<Prisma.$PortfolioPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more Portfolios that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {PortfolioFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all Portfolios
   * const portfolios = await prisma.portfolio.findMany()
   * 
   * // Get first 10 Portfolios
   * const portfolios = await prisma.portfolio.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const portfolioWithIdOnly = await prisma.portfolio.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends PortfolioFindManyArgs>(args?: Prisma.SelectSubset<T, PortfolioFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$PortfolioPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a Portfolio.
   * @param {PortfolioCreateArgs} args - Arguments to create a Portfolio.
   * @example
   * // Create one Portfolio
   * const Portfolio = await prisma.portfolio.create({
   *   data: {
   *     // ... data to create a Portfolio
   *   }
   * })
   * 
   */
  create<T extends PortfolioCreateArgs>(args: Prisma.SelectSubset<T, PortfolioCreateArgs<ExtArgs>>): Prisma.Prisma__PortfolioClient<runtime.Types.Result.GetResult<Prisma.$PortfolioPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many Portfolios.
   * @param {PortfolioCreateManyArgs} args - Arguments to create many Portfolios.
   * @example
   * // Create many Portfolios
   * const portfolio = await prisma.portfolio.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends PortfolioCreateManyArgs>(args?: Prisma.SelectSubset<T, PortfolioCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many Portfolios and returns the data saved in the database.
   * @param {PortfolioCreateManyAndReturnArgs} args - Arguments to create many Portfolios.
   * @example
   * // Create many Portfolios
   * const portfolio = await prisma.portfolio.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many Portfolios and only return the `id`
   * const portfolioWithIdOnly = await prisma.portfolio.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends PortfolioCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, PortfolioCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$PortfolioPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a Portfolio.
   * @param {PortfolioDeleteArgs} args - Arguments to delete one Portfolio.
   * @example
   * // Delete one Portfolio
   * const Portfolio = await prisma.portfolio.delete({
   *   where: {
   *     // ... filter to delete one Portfolio
   *   }
   * })
   * 
   */
  delete<T extends PortfolioDeleteArgs>(args: Prisma.SelectSubset<T, PortfolioDeleteArgs<ExtArgs>>): Prisma.Prisma__PortfolioClient<runtime.Types.Result.GetResult<Prisma.$PortfolioPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one Portfolio.
   * @param {PortfolioUpdateArgs} args - Arguments to update one Portfolio.
   * @example
   * // Update one Portfolio
   * const portfolio = await prisma.portfolio.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends PortfolioUpdateArgs>(args: Prisma.SelectSubset<T, PortfolioUpdateArgs<ExtArgs>>): Prisma.Prisma__PortfolioClient<runtime.Types.Result.GetResult<Prisma.$PortfolioPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more Portfolios.
   * @param {PortfolioDeleteManyArgs} args - Arguments to filter Portfolios to delete.
   * @example
   * // Delete a few Portfolios
   * const { count } = await prisma.portfolio.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends PortfolioDeleteManyArgs>(args?: Prisma.SelectSubset<T, PortfolioDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Portfolios.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {PortfolioUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many Portfolios
   * const portfolio = await prisma.portfolio.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends PortfolioUpdateManyArgs>(args: Prisma.SelectSubset<T, PortfolioUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Portfolios and returns the data updated in the database.
   * @param {PortfolioUpdateManyAndReturnArgs} args - Arguments to update many Portfolios.
   * @example
   * // Update many Portfolios
   * const portfolio = await prisma.portfolio.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more Portfolios and only return the `id`
   * const portfolioWithIdOnly = await prisma.portfolio.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends PortfolioUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, PortfolioUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$PortfolioPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one Portfolio.
   * @param {PortfolioUpsertArgs} args - Arguments to update or create a Portfolio.
   * @example
   * // Update or create a Portfolio
   * const portfolio = await prisma.portfolio.upsert({
   *   create: {
   *     // ... data to create a Portfolio
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the Portfolio we want to update
   *   }
   * })
   */
  upsert<T extends PortfolioUpsertArgs>(args: Prisma.SelectSubset<T, PortfolioUpsertArgs<ExtArgs>>): Prisma.Prisma__PortfolioClient<runtime.Types.Result.GetResult<Prisma.$PortfolioPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of Portfolios.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {PortfolioCountArgs} args - Arguments to filter Portfolios to count.
   * @example
   * // Count the number of Portfolios
   * const count = await prisma.portfolio.count({
   *   where: {
   *     // ... the filter for the Portfolios we want to count
   *   }
   * })
  **/
  count<T extends PortfolioCountArgs>(
    args?: Prisma.Subset<T, PortfolioCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], PortfolioCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a Portfolio.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {PortfolioAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends PortfolioAggregateArgs>(args: Prisma.Subset<T, PortfolioAggregateArgs>): Prisma.PrismaPromise<GetPortfolioAggregateType<T>>

  /**
   * Group by Portfolio.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {PortfolioGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends PortfolioGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: PortfolioGroupByArgs['orderBy'] }
      : { orderBy?: PortfolioGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, PortfolioGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPortfolioGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the Portfolio model
 */
readonly fields: PortfolioFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for Portfolio.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__PortfolioClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  user<T extends Prisma.UserDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.UserDefaultArgs<ExtArgs>>): Prisma.Prisma__UserClient<runtime.Types.Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  positions<T extends Prisma.Portfolio$positionsArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.Portfolio$positionsArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$PositionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
  orders<T extends Prisma.Portfolio$ordersArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.Portfolio$ordersArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$OrderPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
  riskLimits<T extends Prisma.Portfolio$riskLimitsArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.Portfolio$riskLimitsArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$RiskLimitPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
  rebalances<T extends Prisma.Portfolio$rebalancesArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.Portfolio$rebalancesArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$PortfolioRebalancePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the Portfolio model
 */
export interface PortfolioFieldRefs {
  readonly id: Prisma.FieldRef<"Portfolio", 'String'>
  readonly userId: Prisma.FieldRef<"Portfolio", 'String'>
  readonly name: Prisma.FieldRef<"Portfolio", 'String'>
  readonly balance: Prisma.FieldRef<"Portfolio", 'Decimal'>
  readonly initialBalance: Prisma.FieldRef<"Portfolio", 'Decimal'>
  readonly currency: Prisma.FieldRef<"Portfolio", 'String'>
  readonly createdAt: Prisma.FieldRef<"Portfolio", 'DateTime'>
  readonly updatedAt: Prisma.FieldRef<"Portfolio", 'DateTime'>
}
    

// Custom InputTypes
/**
 * Portfolio findUnique
 */
export type PortfolioFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Portfolio
   */
  select?: Prisma.PortfolioSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Portfolio
   */
  omit?: Prisma.PortfolioOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PortfolioInclude<ExtArgs> | null
  /**
   * Filter, which Portfolio to fetch.
   */
  where: Prisma.PortfolioWhereUniqueInput
}

/**
 * Portfolio findUniqueOrThrow
 */
export type PortfolioFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Portfolio
   */
  select?: Prisma.PortfolioSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Portfolio
   */
  omit?: Prisma.PortfolioOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PortfolioInclude<ExtArgs> | null
  /**
   * Filter, which Portfolio to fetch.
   */
  where: Prisma.PortfolioWhereUniqueInput
}

/**
 * Portfolio findFirst
 */
export type PortfolioFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Portfolio
   */
  select?: Prisma.PortfolioSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Portfolio
   */
  omit?: Prisma.PortfolioOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PortfolioInclude<ExtArgs> | null
  /**
   * Filter, which Portfolio to fetch.
   */
  where?: Prisma.PortfolioWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Portfolios to fetch.
   */
  orderBy?: Prisma.PortfolioOrderByWithRelationInput | Prisma.PortfolioOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for Portfolios.
   */
  cursor?: Prisma.PortfolioWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Portfolios from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Portfolios.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of Portfolios.
   */
  distinct?: Prisma.PortfolioScalarFieldEnum | Prisma.PortfolioScalarFieldEnum[]
}

/**
 * Portfolio findFirstOrThrow
 */
export type PortfolioFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Portfolio
   */
  select?: Prisma.PortfolioSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Portfolio
   */
  omit?: Prisma.PortfolioOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PortfolioInclude<ExtArgs> | null
  /**
   * Filter, which Portfolio to fetch.
   */
  where?: Prisma.PortfolioWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Portfolios to fetch.
   */
  orderBy?: Prisma.PortfolioOrderByWithRelationInput | Prisma.PortfolioOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for Portfolios.
   */
  cursor?: Prisma.PortfolioWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Portfolios from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Portfolios.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of Portfolios.
   */
  distinct?: Prisma.PortfolioScalarFieldEnum | Prisma.PortfolioScalarFieldEnum[]
}

/**
 * Portfolio findMany
 */
export type PortfolioFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Portfolio
   */
  select?: Prisma.PortfolioSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Portfolio
   */
  omit?: Prisma.PortfolioOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PortfolioInclude<ExtArgs> | null
  /**
   * Filter, which Portfolios to fetch.
   */
  where?: Prisma.PortfolioWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Portfolios to fetch.
   */
  orderBy?: Prisma.PortfolioOrderByWithRelationInput | Prisma.PortfolioOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing Portfolios.
   */
  cursor?: Prisma.PortfolioWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Portfolios from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Portfolios.
   */
  skip?: number
  distinct?: Prisma.PortfolioScalarFieldEnum | Prisma.PortfolioScalarFieldEnum[]
}

/**
 * Portfolio create
 */
export type PortfolioCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Portfolio
   */
  select?: Prisma.PortfolioSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Portfolio
   */
  omit?: Prisma.PortfolioOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PortfolioInclude<ExtArgs> | null
  /**
   * The data needed to create a Portfolio.
   */
  data: Prisma.XOR<Prisma.PortfolioCreateInput, Prisma.PortfolioUncheckedCreateInput>
}

/**
 * Portfolio createMany
 */
export type PortfolioCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many Portfolios.
   */
  data: Prisma.PortfolioCreateManyInput | Prisma.PortfolioCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * Portfolio createManyAndReturn
 */
export type PortfolioCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Portfolio
   */
  select?: Prisma.PortfolioSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the Portfolio
   */
  omit?: Prisma.PortfolioOmit<ExtArgs> | null
  /**
   * The data used to create many Portfolios.
   */
  data: Prisma.PortfolioCreateManyInput | Prisma.PortfolioCreateManyInput[]
  skipDuplicates?: boolean
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PortfolioIncludeCreateManyAndReturn<ExtArgs> | null
}

/**
 * Portfolio update
 */
export type PortfolioUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Portfolio
   */
  select?: Prisma.PortfolioSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Portfolio
   */
  omit?: Prisma.PortfolioOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PortfolioInclude<ExtArgs> | null
  /**
   * The data needed to update a Portfolio.
   */
  data: Prisma.XOR<Prisma.PortfolioUpdateInput, Prisma.PortfolioUncheckedUpdateInput>
  /**
   * Choose, which Portfolio to update.
   */
  where: Prisma.PortfolioWhereUniqueInput
}

/**
 * Portfolio updateMany
 */
export type PortfolioUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update Portfolios.
   */
  data: Prisma.XOR<Prisma.PortfolioUpdateManyMutationInput, Prisma.PortfolioUncheckedUpdateManyInput>
  /**
   * Filter which Portfolios to update
   */
  where?: Prisma.PortfolioWhereInput
  /**
   * Limit how many Portfolios to update.
   */
  limit?: number
}

/**
 * Portfolio updateManyAndReturn
 */
export type PortfolioUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Portfolio
   */
  select?: Prisma.PortfolioSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the Portfolio
   */
  omit?: Prisma.PortfolioOmit<ExtArgs> | null
  /**
   * The data used to update Portfolios.
   */
  data: Prisma.XOR<Prisma.PortfolioUpdateManyMutationInput, Prisma.PortfolioUncheckedUpdateManyInput>
  /**
   * Filter which Portfolios to update
   */
  where?: Prisma.PortfolioWhereInput
  /**
   * Limit how many Portfolios to update.
   */
  limit?: number
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PortfolioIncludeUpdateManyAndReturn<ExtArgs> | null
}

/**
 * Portfolio upsert
 */
export type PortfolioUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Portfolio
   */
  select?: Prisma.PortfolioSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Portfolio
   */
  omit?: Prisma.PortfolioOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PortfolioInclude<ExtArgs> | null
  /**
   * The filter to search for the Portfolio to update in case it exists.
   */
  where: Prisma.PortfolioWhereUniqueInput
  /**
   * In case the Portfolio found by the `where` argument doesn't exist, create a new Portfolio with this data.
   */
  create: Prisma.XOR<Prisma.PortfolioCreateInput, Prisma.PortfolioUncheckedCreateInput>
  /**
   * In case the Portfolio was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.PortfolioUpdateInput, Prisma.PortfolioUncheckedUpdateInput>
}

/**
 * Portfolio delete
 */
export type PortfolioDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Portfolio
   */
  select?: Prisma.PortfolioSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Portfolio
   */
  omit?: Prisma.PortfolioOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PortfolioInclude<ExtArgs> | null
  /**
   * Filter which Portfolio to delete.
   */
  where: Prisma.PortfolioWhereUniqueInput
}

/**
 * Portfolio deleteMany
 */
export type PortfolioDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which Portfolios to delete
   */
  where?: Prisma.PortfolioWhereInput
  /**
   * Limit how many Portfolios to delete.
   */
  limit?: number
}

/**
 * Portfolio.positions
 */
export type Portfolio$positionsArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Position
   */
  select?: Prisma.PositionSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Position
   */
  omit?: Prisma.PositionOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PositionInclude<ExtArgs> | null
  where?: Prisma.PositionWhereInput
  orderBy?: Prisma.PositionOrderByWithRelationInput | Prisma.PositionOrderByWithRelationInput[]
  cursor?: Prisma.PositionWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Prisma.PositionScalarFieldEnum | Prisma.PositionScalarFieldEnum[]
}

/**
 * Portfolio.orders
 */
export type Portfolio$ordersArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Order
   */
  select?: Prisma.OrderSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Order
   */
  omit?: Prisma.OrderOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.OrderInclude<ExtArgs> | null
  where?: Prisma.OrderWhereInput
  orderBy?: Prisma.OrderOrderByWithRelationInput | Prisma.OrderOrderByWithRelationInput[]
  cursor?: Prisma.OrderWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Prisma.OrderScalarFieldEnum | Prisma.OrderScalarFieldEnum[]
}

/**
 * Portfolio.riskLimits
 */
export type Portfolio$riskLimitsArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the RiskLimit
   */
  select?: Prisma.RiskLimitSelect<ExtArgs> | null
  /**
   * Omit specific fields from the RiskLimit
   */
  omit?: Prisma.RiskLimitOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.RiskLimitInclude<ExtArgs> | null
  where?: Prisma.RiskLimitWhereInput
  orderBy?: Prisma.RiskLimitOrderByWithRelationInput | Prisma.RiskLimitOrderByWithRelationInput[]
  cursor?: Prisma.RiskLimitWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Prisma.RiskLimitScalarFieldEnum | Prisma.RiskLimitScalarFieldEnum[]
}

/**
 * Portfolio.rebalances
 */
export type Portfolio$rebalancesArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PortfolioRebalance
   */
  select?: Prisma.PortfolioRebalanceSelect<ExtArgs> | null
  /**
   * Omit specific fields from the PortfolioRebalance
   */
  omit?: Prisma.PortfolioRebalanceOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PortfolioRebalanceInclude<ExtArgs> | null
  where?: Prisma.PortfolioRebalanceWhereInput
  orderBy?: Prisma.PortfolioRebalanceOrderByWithRelationInput | Prisma.PortfolioRebalanceOrderByWithRelationInput[]
  cursor?: Prisma.PortfolioRebalanceWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Prisma.PortfolioRebalanceScalarFieldEnum | Prisma.PortfolioRebalanceScalarFieldEnum[]
}

/**
 * Portfolio without action
 */
export type PortfolioDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Portfolio
   */
  select?: Prisma.PortfolioSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Portfolio
   */
  omit?: Prisma.PortfolioOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PortfolioInclude<ExtArgs> | null
}
