
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/*
 * This file exports the `PortfolioRebalance` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import type * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums"
import type * as Prisma from "../internal/prismaNamespace"

/**
 * Model PortfolioRebalance
 * 
 */
export type PortfolioRebalanceModel = runtime.Types.Result.DefaultSelection<Prisma.$PortfolioRebalancePayload>

export type AggregatePortfolioRebalance = {
  _count: PortfolioRebalanceCountAggregateOutputType | null
  _avg: PortfolioRebalanceAvgAggregateOutputType | null
  _sum: PortfolioRebalanceSumAggregateOutputType | null
  _min: PortfolioRebalanceMinAggregateOutputType | null
  _max: PortfolioRebalanceMaxAggregateOutputType | null
}

export type PortfolioRebalanceAvgAggregateOutputType = {
  totalCost: runtime.Decimal | null
  netBenefit: runtime.Decimal | null
}

export type PortfolioRebalanceSumAggregateOutputType = {
  totalCost: runtime.Decimal | null
  netBenefit: runtime.Decimal | null
}

export type PortfolioRebalanceMinAggregateOutputType = {
  id: string | null
  portfolioId: string | null
  reason: string | null
  totalCost: runtime.Decimal | null
  netBenefit: runtime.Decimal | null
  priority: string | null
  actions: string | null
  createdAt: Date | null
}

export type PortfolioRebalanceMaxAggregateOutputType = {
  id: string | null
  portfolioId: string | null
  reason: string | null
  totalCost: runtime.Decimal | null
  netBenefit: runtime.Decimal | null
  priority: string | null
  actions: string | null
  createdAt: Date | null
}

export type PortfolioRebalanceCountAggregateOutputType = {
  id: number
  portfolioId: number
  reason: number
  totalCost: number
  netBenefit: number
  priority: number
  actions: number
  createdAt: number
  _all: number
}


export type PortfolioRebalanceAvgAggregateInputType = {
  totalCost?: true
  netBenefit?: true
}

export type PortfolioRebalanceSumAggregateInputType = {
  totalCost?: true
  netBenefit?: true
}

export type PortfolioRebalanceMinAggregateInputType = {
  id?: true
  portfolioId?: true
  reason?: true
  totalCost?: true
  netBenefit?: true
  priority?: true
  actions?: true
  createdAt?: true
}

export type PortfolioRebalanceMaxAggregateInputType = {
  id?: true
  portfolioId?: true
  reason?: true
  totalCost?: true
  netBenefit?: true
  priority?: true
  actions?: true
  createdAt?: true
}

export type PortfolioRebalanceCountAggregateInputType = {
  id?: true
  portfolioId?: true
  reason?: true
  totalCost?: true
  netBenefit?: true
  priority?: true
  actions?: true
  createdAt?: true
  _all?: true
}

export type PortfolioRebalanceAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which PortfolioRebalance to aggregate.
   */
  where?: Prisma.PortfolioRebalanceWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of PortfolioRebalances to fetch.
   */
  orderBy?: Prisma.PortfolioRebalanceOrderByWithRelationInput | Prisma.PortfolioRebalanceOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.PortfolioRebalanceWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` PortfolioRebalances from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` PortfolioRebalances.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned PortfolioRebalances
  **/
  _count?: true | PortfolioRebalanceCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to average
  **/
  _avg?: PortfolioRebalanceAvgAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to sum
  **/
  _sum?: PortfolioRebalanceSumAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: PortfolioRebalanceMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: PortfolioRebalanceMaxAggregateInputType
}

export type GetPortfolioRebalanceAggregateType<T extends PortfolioRebalanceAggregateArgs> = {
      [P in keyof T & keyof AggregatePortfolioRebalance]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregatePortfolioRebalance[P]>
    : Prisma.GetScalarType<T[P], AggregatePortfolioRebalance[P]>
}




export type PortfolioRebalanceGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.PortfolioRebalanceWhereInput
  orderBy?: Prisma.PortfolioRebalanceOrderByWithAggregationInput | Prisma.PortfolioRebalanceOrderByWithAggregationInput[]
  by: Prisma.PortfolioRebalanceScalarFieldEnum[] | Prisma.PortfolioRebalanceScalarFieldEnum
  having?: Prisma.PortfolioRebalanceScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: PortfolioRebalanceCountAggregateInputType | true
  _avg?: PortfolioRebalanceAvgAggregateInputType
  _sum?: PortfolioRebalanceSumAggregateInputType
  _min?: PortfolioRebalanceMinAggregateInputType
  _max?: PortfolioRebalanceMaxAggregateInputType
}

export type PortfolioRebalanceGroupByOutputType = {
  id: string
  portfolioId: string
  reason: string
  totalCost: runtime.Decimal
  netBenefit: runtime.Decimal
  priority: string
  actions: string
  createdAt: Date
  _count: PortfolioRebalanceCountAggregateOutputType | null
  _avg: PortfolioRebalanceAvgAggregateOutputType | null
  _sum: PortfolioRebalanceSumAggregateOutputType | null
  _min: PortfolioRebalanceMinAggregateOutputType | null
  _max: PortfolioRebalanceMaxAggregateOutputType | null
}

type GetPortfolioRebalanceGroupByPayload<T extends PortfolioRebalanceGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<PortfolioRebalanceGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof PortfolioRebalanceGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], PortfolioRebalanceGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], PortfolioRebalanceGroupByOutputType[P]>
      }
    >
  >



export type PortfolioRebalanceWhereInput = {
  AND?: Prisma.PortfolioRebalanceWhereInput | Prisma.PortfolioRebalanceWhereInput[]
  OR?: Prisma.PortfolioRebalanceWhereInput[]
  NOT?: Prisma.PortfolioRebalanceWhereInput | Prisma.PortfolioRebalanceWhereInput[]
  id?: Prisma.StringFilter<"PortfolioRebalance"> | string
  portfolioId?: Prisma.StringFilter<"PortfolioRebalance"> | string
  reason?: Prisma.StringFilter<"PortfolioRebalance"> | string
  totalCost?: Prisma.DecimalFilter<"PortfolioRebalance"> | runtime.Decimal | runtime.DecimalJsLike | number | string
  netBenefit?: Prisma.DecimalFilter<"PortfolioRebalance"> | runtime.Decimal | runtime.DecimalJsLike | number | string
  priority?: Prisma.StringFilter<"PortfolioRebalance"> | string
  actions?: Prisma.StringFilter<"PortfolioRebalance"> | string
  createdAt?: Prisma.DateTimeFilter<"PortfolioRebalance"> | Date | string
  portfolio?: Prisma.XOR<Prisma.PortfolioScalarRelationFilter, Prisma.PortfolioWhereInput>
}

export type PortfolioRebalanceOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  portfolioId?: Prisma.SortOrder
  reason?: Prisma.SortOrder
  totalCost?: Prisma.SortOrder
  netBenefit?: Prisma.SortOrder
  priority?: Prisma.SortOrder
  actions?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  portfolio?: Prisma.PortfolioOrderByWithRelationInput
}

export type PortfolioRebalanceWhereUniqueInput = Prisma.AtLeast<{
  id?: string
  AND?: Prisma.PortfolioRebalanceWhereInput | Prisma.PortfolioRebalanceWhereInput[]
  OR?: Prisma.PortfolioRebalanceWhereInput[]
  NOT?: Prisma.PortfolioRebalanceWhereInput | Prisma.PortfolioRebalanceWhereInput[]
  portfolioId?: Prisma.StringFilter<"PortfolioRebalance"> | string
  reason?: Prisma.StringFilter<"PortfolioRebalance"> | string
  totalCost?: Prisma.DecimalFilter<"PortfolioRebalance"> | runtime.Decimal | runtime.DecimalJsLike | number | string
  netBenefit?: Prisma.DecimalFilter<"PortfolioRebalance"> | runtime.Decimal | runtime.DecimalJsLike | number | string
  priority?: Prisma.StringFilter<"PortfolioRebalance"> | string
  actions?: Prisma.StringFilter<"PortfolioRebalance"> | string
  createdAt?: Prisma.DateTimeFilter<"PortfolioRebalance"> | Date | string
  portfolio?: Prisma.XOR<Prisma.PortfolioScalarRelationFilter, Prisma.PortfolioWhereInput>
}, "id">

export type PortfolioRebalanceOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  portfolioId?: Prisma.SortOrder
  reason?: Prisma.SortOrder
  totalCost?: Prisma.SortOrder
  netBenefit?: Prisma.SortOrder
  priority?: Prisma.SortOrder
  actions?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  _count?: Prisma.PortfolioRebalanceCountOrderByAggregateInput
  _avg?: Prisma.PortfolioRebalanceAvgOrderByAggregateInput
  _max?: Prisma.PortfolioRebalanceMaxOrderByAggregateInput
  _min?: Prisma.PortfolioRebalanceMinOrderByAggregateInput
  _sum?: Prisma.PortfolioRebalanceSumOrderByAggregateInput
}

export type PortfolioRebalanceScalarWhereWithAggregatesInput = {
  AND?: Prisma.PortfolioRebalanceScalarWhereWithAggregatesInput | Prisma.PortfolioRebalanceScalarWhereWithAggregatesInput[]
  OR?: Prisma.PortfolioRebalanceScalarWhereWithAggregatesInput[]
  NOT?: Prisma.PortfolioRebalanceScalarWhereWithAggregatesInput | Prisma.PortfolioRebalanceScalarWhereWithAggregatesInput[]
  id?: Prisma.StringWithAggregatesFilter<"PortfolioRebalance"> | string
  portfolioId?: Prisma.StringWithAggregatesFilter<"PortfolioRebalance"> | string
  reason?: Prisma.StringWithAggregatesFilter<"PortfolioRebalance"> | string
  totalCost?: Prisma.DecimalWithAggregatesFilter<"PortfolioRebalance"> | runtime.Decimal | runtime.DecimalJsLike | number | string
  netBenefit?: Prisma.DecimalWithAggregatesFilter<"PortfolioRebalance"> | runtime.Decimal | runtime.DecimalJsLike | number | string
  priority?: Prisma.StringWithAggregatesFilter<"PortfolioRebalance"> | string
  actions?: Prisma.StringWithAggregatesFilter<"PortfolioRebalance"> | string
  createdAt?: Prisma.DateTimeWithAggregatesFilter<"PortfolioRebalance"> | Date | string
}

export type PortfolioRebalanceCreateInput = {
  id?: string
  reason: string
  totalCost: runtime.Decimal | runtime.DecimalJsLike | number | string
  netBenefit: runtime.Decimal | runtime.DecimalJsLike | number | string
  priority: string
  actions: string
  createdAt?: Date | string
  portfolio: Prisma.PortfolioCreateNestedOneWithoutRebalancesInput
}

export type PortfolioRebalanceUncheckedCreateInput = {
  id?: string
  portfolioId: string
  reason: string
  totalCost: runtime.Decimal | runtime.DecimalJsLike | number | string
  netBenefit: runtime.Decimal | runtime.DecimalJsLike | number | string
  priority: string
  actions: string
  createdAt?: Date | string
}

export type PortfolioRebalanceUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  reason?: Prisma.StringFieldUpdateOperationsInput | string
  totalCost?: Prisma.DecimalFieldUpdateOperationsInput | runtime.Decimal | runtime.DecimalJsLike | number | string
  netBenefit?: Prisma.DecimalFieldUpdateOperationsInput | runtime.Decimal | runtime.DecimalJsLike | number | string
  priority?: Prisma.StringFieldUpdateOperationsInput | string
  actions?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  portfolio?: Prisma.PortfolioUpdateOneRequiredWithoutRebalancesNestedInput
}

export type PortfolioRebalanceUncheckedUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  portfolioId?: Prisma.StringFieldUpdateOperationsInput | string
  reason?: Prisma.StringFieldUpdateOperationsInput | string
  totalCost?: Prisma.DecimalFieldUpdateOperationsInput | runtime.Decimal | runtime.DecimalJsLike | number | string
  netBenefit?: Prisma.DecimalFieldUpdateOperationsInput | runtime.Decimal | runtime.DecimalJsLike | number | string
  priority?: Prisma.StringFieldUpdateOperationsInput | string
  actions?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type PortfolioRebalanceCreateManyInput = {
  id?: string
  portfolioId: string
  reason: string
  totalCost: runtime.Decimal | runtime.DecimalJsLike | number | string
  netBenefit: runtime.Decimal | runtime.DecimalJsLike | number | string
  priority: string
  actions: string
  createdAt?: Date | string
}

export type PortfolioRebalanceUpdateManyMutationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  reason?: Prisma.StringFieldUpdateOperationsInput | string
  totalCost?: Prisma.DecimalFieldUpdateOperationsInput | runtime.Decimal | runtime.DecimalJsLike | number | string
  netBenefit?: Prisma.DecimalFieldUpdateOperationsInput | runtime.Decimal | runtime.DecimalJsLike | number | string
  priority?: Prisma.StringFieldUpdateOperationsInput | string
  actions?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type PortfolioRebalanceUncheckedUpdateManyInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  portfolioId?: Prisma.StringFieldUpdateOperationsInput | string
  reason?: Prisma.StringFieldUpdateOperationsInput | string
  totalCost?: Prisma.DecimalFieldUpdateOperationsInput | runtime.Decimal | runtime.DecimalJsLike | number | string
  netBenefit?: Prisma.DecimalFieldUpdateOperationsInput | runtime.Decimal | runtime.DecimalJsLike | number | string
  priority?: Prisma.StringFieldUpdateOperationsInput | string
  actions?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type PortfolioRebalanceListRelationFilter = {
  every?: Prisma.PortfolioRebalanceWhereInput
  some?: Prisma.PortfolioRebalanceWhereInput
  none?: Prisma.PortfolioRebalanceWhereInput
}

export type PortfolioRebalanceOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder
}

export type PortfolioRebalanceCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  portfolioId?: Prisma.SortOrder
  reason?: Prisma.SortOrder
  totalCost?: Prisma.SortOrder
  netBenefit?: Prisma.SortOrder
  priority?: Prisma.SortOrder
  actions?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
}

export type PortfolioRebalanceAvgOrderByAggregateInput = {
  totalCost?: Prisma.SortOrder
  netBenefit?: Prisma.SortOrder
}

export type PortfolioRebalanceMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  portfolioId?: Prisma.SortOrder
  reason?: Prisma.SortOrder
  totalCost?: Prisma.SortOrder
  netBenefit?: Prisma.SortOrder
  priority?: Prisma.SortOrder
  actions?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
}

export type PortfolioRebalanceMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  portfolioId?: Prisma.SortOrder
  reason?: Prisma.SortOrder
  totalCost?: Prisma.SortOrder
  netBenefit?: Prisma.SortOrder
  priority?: Prisma.SortOrder
  actions?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
}

export type PortfolioRebalanceSumOrderByAggregateInput = {
  totalCost?: Prisma.SortOrder
  netBenefit?: Prisma.SortOrder
}

export type PortfolioRebalanceCreateNestedManyWithoutPortfolioInput = {
  create?: Prisma.XOR<Prisma.PortfolioRebalanceCreateWithoutPortfolioInput, Prisma.PortfolioRebalanceUncheckedCreateWithoutPortfolioInput> | Prisma.PortfolioRebalanceCreateWithoutPortfolioInput[] | Prisma.PortfolioRebalanceUncheckedCreateWithoutPortfolioInput[]
  connectOrCreate?: Prisma.PortfolioRebalanceCreateOrConnectWithoutPortfolioInput | Prisma.PortfolioRebalanceCreateOrConnectWithoutPortfolioInput[]
  createMany?: Prisma.PortfolioRebalanceCreateManyPortfolioInputEnvelope
  connect?: Prisma.PortfolioRebalanceWhereUniqueInput | Prisma.PortfolioRebalanceWhereUniqueInput[]
}

export type PortfolioRebalanceUncheckedCreateNestedManyWithoutPortfolioInput = {
  create?: Prisma.XOR<Prisma.PortfolioRebalanceCreateWithoutPortfolioInput, Prisma.PortfolioRebalanceUncheckedCreateWithoutPortfolioInput> | Prisma.PortfolioRebalanceCreateWithoutPortfolioInput[] | Prisma.PortfolioRebalanceUncheckedCreateWithoutPortfolioInput[]
  connectOrCreate?: Prisma.PortfolioRebalanceCreateOrConnectWithoutPortfolioInput | Prisma.PortfolioRebalanceCreateOrConnectWithoutPortfolioInput[]
  createMany?: Prisma.PortfolioRebalanceCreateManyPortfolioInputEnvelope
  connect?: Prisma.PortfolioRebalanceWhereUniqueInput | Prisma.PortfolioRebalanceWhereUniqueInput[]
}

export type PortfolioRebalanceUpdateManyWithoutPortfolioNestedInput = {
  create?: Prisma.XOR<Prisma.PortfolioRebalanceCreateWithoutPortfolioInput, Prisma.PortfolioRebalanceUncheckedCreateWithoutPortfolioInput> | Prisma.PortfolioRebalanceCreateWithoutPortfolioInput[] | Prisma.PortfolioRebalanceUncheckedCreateWithoutPortfolioInput[]
  connectOrCreate?: Prisma.PortfolioRebalanceCreateOrConnectWithoutPortfolioInput | Prisma.PortfolioRebalanceCreateOrConnectWithoutPortfolioInput[]
  upsert?: Prisma.PortfolioRebalanceUpsertWithWhereUniqueWithoutPortfolioInput | Prisma.PortfolioRebalanceUpsertWithWhereUniqueWithoutPortfolioInput[]
  createMany?: Prisma.PortfolioRebalanceCreateManyPortfolioInputEnvelope
  set?: Prisma.PortfolioRebalanceWhereUniqueInput | Prisma.PortfolioRebalanceWhereUniqueInput[]
  disconnect?: Prisma.PortfolioRebalanceWhereUniqueInput | Prisma.PortfolioRebalanceWhereUniqueInput[]
  delete?: Prisma.PortfolioRebalanceWhereUniqueInput | Prisma.PortfolioRebalanceWhereUniqueInput[]
  connect?: Prisma.PortfolioRebalanceWhereUniqueInput | Prisma.PortfolioRebalanceWhereUniqueInput[]
  update?: Prisma.PortfolioRebalanceUpdateWithWhereUniqueWithoutPortfolioInput | Prisma.PortfolioRebalanceUpdateWithWhereUniqueWithoutPortfolioInput[]
  updateMany?: Prisma.PortfolioRebalanceUpdateManyWithWhereWithoutPortfolioInput | Prisma.PortfolioRebalanceUpdateManyWithWhereWithoutPortfolioInput[]
  deleteMany?: Prisma.PortfolioRebalanceScalarWhereInput | Prisma.PortfolioRebalanceScalarWhereInput[]
}

export type PortfolioRebalanceUncheckedUpdateManyWithoutPortfolioNestedInput = {
  create?: Prisma.XOR<Prisma.PortfolioRebalanceCreateWithoutPortfolioInput, Prisma.PortfolioRebalanceUncheckedCreateWithoutPortfolioInput> | Prisma.PortfolioRebalanceCreateWithoutPortfolioInput[] | Prisma.PortfolioRebalanceUncheckedCreateWithoutPortfolioInput[]
  connectOrCreate?: Prisma.PortfolioRebalanceCreateOrConnectWithoutPortfolioInput | Prisma.PortfolioRebalanceCreateOrConnectWithoutPortfolioInput[]
  upsert?: Prisma.PortfolioRebalanceUpsertWithWhereUniqueWithoutPortfolioInput | Prisma.PortfolioRebalanceUpsertWithWhereUniqueWithoutPortfolioInput[]
  createMany?: Prisma.PortfolioRebalanceCreateManyPortfolioInputEnvelope
  set?: Prisma.PortfolioRebalanceWhereUniqueInput | Prisma.PortfolioRebalanceWhereUniqueInput[]
  disconnect?: Prisma.PortfolioRebalanceWhereUniqueInput | Prisma.PortfolioRebalanceWhereUniqueInput[]
  delete?: Prisma.PortfolioRebalanceWhereUniqueInput | Prisma.PortfolioRebalanceWhereUniqueInput[]
  connect?: Prisma.PortfolioRebalanceWhereUniqueInput | Prisma.PortfolioRebalanceWhereUniqueInput[]
  update?: Prisma.PortfolioRebalanceUpdateWithWhereUniqueWithoutPortfolioInput | Prisma.PortfolioRebalanceUpdateWithWhereUniqueWithoutPortfolioInput[]
  updateMany?: Prisma.PortfolioRebalanceUpdateManyWithWhereWithoutPortfolioInput | Prisma.PortfolioRebalanceUpdateManyWithWhereWithoutPortfolioInput[]
  deleteMany?: Prisma.PortfolioRebalanceScalarWhereInput | Prisma.PortfolioRebalanceScalarWhereInput[]
}

export type PortfolioRebalanceCreateWithoutPortfolioInput = {
  id?: string
  reason: string
  totalCost: runtime.Decimal | runtime.DecimalJsLike | number | string
  netBenefit: runtime.Decimal | runtime.DecimalJsLike | number | string
  priority: string
  actions: string
  createdAt?: Date | string
}

export type PortfolioRebalanceUncheckedCreateWithoutPortfolioInput = {
  id?: string
  reason: string
  totalCost: runtime.Decimal | runtime.DecimalJsLike | number | string
  netBenefit: runtime.Decimal | runtime.DecimalJsLike | number | string
  priority: string
  actions: string
  createdAt?: Date | string
}

export type PortfolioRebalanceCreateOrConnectWithoutPortfolioInput = {
  where: Prisma.PortfolioRebalanceWhereUniqueInput
  create: Prisma.XOR<Prisma.PortfolioRebalanceCreateWithoutPortfolioInput, Prisma.PortfolioRebalanceUncheckedCreateWithoutPortfolioInput>
}

export type PortfolioRebalanceCreateManyPortfolioInputEnvelope = {
  data: Prisma.PortfolioRebalanceCreateManyPortfolioInput | Prisma.PortfolioRebalanceCreateManyPortfolioInput[]
  skipDuplicates?: boolean
}

export type PortfolioRebalanceUpsertWithWhereUniqueWithoutPortfolioInput = {
  where: Prisma.PortfolioRebalanceWhereUniqueInput
  update: Prisma.XOR<Prisma.PortfolioRebalanceUpdateWithoutPortfolioInput, Prisma.PortfolioRebalanceUncheckedUpdateWithoutPortfolioInput>
  create: Prisma.XOR<Prisma.PortfolioRebalanceCreateWithoutPortfolioInput, Prisma.PortfolioRebalanceUncheckedCreateWithoutPortfolioInput>
}

export type PortfolioRebalanceUpdateWithWhereUniqueWithoutPortfolioInput = {
  where: Prisma.PortfolioRebalanceWhereUniqueInput
  data: Prisma.XOR<Prisma.PortfolioRebalanceUpdateWithoutPortfolioInput, Prisma.PortfolioRebalanceUncheckedUpdateWithoutPortfolioInput>
}

export type PortfolioRebalanceUpdateManyWithWhereWithoutPortfolioInput = {
  where: Prisma.PortfolioRebalanceScalarWhereInput
  data: Prisma.XOR<Prisma.PortfolioRebalanceUpdateManyMutationInput, Prisma.PortfolioRebalanceUncheckedUpdateManyWithoutPortfolioInput>
}

export type PortfolioRebalanceScalarWhereInput = {
  AND?: Prisma.PortfolioRebalanceScalarWhereInput | Prisma.PortfolioRebalanceScalarWhereInput[]
  OR?: Prisma.PortfolioRebalanceScalarWhereInput[]
  NOT?: Prisma.PortfolioRebalanceScalarWhereInput | Prisma.PortfolioRebalanceScalarWhereInput[]
  id?: Prisma.StringFilter<"PortfolioRebalance"> | string
  portfolioId?: Prisma.StringFilter<"PortfolioRebalance"> | string
  reason?: Prisma.StringFilter<"PortfolioRebalance"> | string
  totalCost?: Prisma.DecimalFilter<"PortfolioRebalance"> | runtime.Decimal | runtime.DecimalJsLike | number | string
  netBenefit?: Prisma.DecimalFilter<"PortfolioRebalance"> | runtime.Decimal | runtime.DecimalJsLike | number | string
  priority?: Prisma.StringFilter<"PortfolioRebalance"> | string
  actions?: Prisma.StringFilter<"PortfolioRebalance"> | string
  createdAt?: Prisma.DateTimeFilter<"PortfolioRebalance"> | Date | string
}

export type PortfolioRebalanceCreateManyPortfolioInput = {
  id?: string
  reason: string
  totalCost: runtime.Decimal | runtime.DecimalJsLike | number | string
  netBenefit: runtime.Decimal | runtime.DecimalJsLike | number | string
  priority: string
  actions: string
  createdAt?: Date | string
}

export type PortfolioRebalanceUpdateWithoutPortfolioInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  reason?: Prisma.StringFieldUpdateOperationsInput | string
  totalCost?: Prisma.DecimalFieldUpdateOperationsInput | runtime.Decimal | runtime.DecimalJsLike | number | string
  netBenefit?: Prisma.DecimalFieldUpdateOperationsInput | runtime.Decimal | runtime.DecimalJsLike | number | string
  priority?: Prisma.StringFieldUpdateOperationsInput | string
  actions?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type PortfolioRebalanceUncheckedUpdateWithoutPortfolioInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  reason?: Prisma.StringFieldUpdateOperationsInput | string
  totalCost?: Prisma.DecimalFieldUpdateOperationsInput | runtime.Decimal | runtime.DecimalJsLike | number | string
  netBenefit?: Prisma.DecimalFieldUpdateOperationsInput | runtime.Decimal | runtime.DecimalJsLike | number | string
  priority?: Prisma.StringFieldUpdateOperationsInput | string
  actions?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type PortfolioRebalanceUncheckedUpdateManyWithoutPortfolioInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  reason?: Prisma.StringFieldUpdateOperationsInput | string
  totalCost?: Prisma.DecimalFieldUpdateOperationsInput | runtime.Decimal | runtime.DecimalJsLike | number | string
  netBenefit?: Prisma.DecimalFieldUpdateOperationsInput | runtime.Decimal | runtime.DecimalJsLike | number | string
  priority?: Prisma.StringFieldUpdateOperationsInput | string
  actions?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}



export type PortfolioRebalanceSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  portfolioId?: boolean
  reason?: boolean
  totalCost?: boolean
  netBenefit?: boolean
  priority?: boolean
  actions?: boolean
  createdAt?: boolean
  portfolio?: boolean | Prisma.PortfolioDefaultArgs<ExtArgs>
}, ExtArgs["result"]["portfolioRebalance"]>

export type PortfolioRebalanceSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  portfolioId?: boolean
  reason?: boolean
  totalCost?: boolean
  netBenefit?: boolean
  priority?: boolean
  actions?: boolean
  createdAt?: boolean
  portfolio?: boolean | Prisma.PortfolioDefaultArgs<ExtArgs>
}, ExtArgs["result"]["portfolioRebalance"]>

export type PortfolioRebalanceSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  portfolioId?: boolean
  reason?: boolean
  totalCost?: boolean
  netBenefit?: boolean
  priority?: boolean
  actions?: boolean
  createdAt?: boolean
  portfolio?: boolean | Prisma.PortfolioDefaultArgs<ExtArgs>
}, ExtArgs["result"]["portfolioRebalance"]>

export type PortfolioRebalanceSelectScalar = {
  id?: boolean
  portfolioId?: boolean
  reason?: boolean
  totalCost?: boolean
  netBenefit?: boolean
  priority?: boolean
  actions?: boolean
  createdAt?: boolean
}

export type PortfolioRebalanceOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "portfolioId" | "reason" | "totalCost" | "netBenefit" | "priority" | "actions" | "createdAt", ExtArgs["result"]["portfolioRebalance"]>
export type PortfolioRebalanceInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  portfolio?: boolean | Prisma.PortfolioDefaultArgs<ExtArgs>
}
export type PortfolioRebalanceIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  portfolio?: boolean | Prisma.PortfolioDefaultArgs<ExtArgs>
}
export type PortfolioRebalanceIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  portfolio?: boolean | Prisma.PortfolioDefaultArgs<ExtArgs>
}

export type $PortfolioRebalancePayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "PortfolioRebalance"
  objects: {
    portfolio: Prisma.$PortfolioPayload<ExtArgs>
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: string
    portfolioId: string
    reason: string
    totalCost: runtime.Decimal
    netBenefit: runtime.Decimal
    priority: string
    actions: string
    createdAt: Date
  }, ExtArgs["result"]["portfolioRebalance"]>
  composites: {}
}

export type PortfolioRebalanceGetPayload<S extends boolean | null | undefined | PortfolioRebalanceDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$PortfolioRebalancePayload, S>

export type PortfolioRebalanceCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<PortfolioRebalanceFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: PortfolioRebalanceCountAggregateInputType | true
  }

export interface PortfolioRebalanceDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['PortfolioRebalance'], meta: { name: 'PortfolioRebalance' } }
  /**
   * Find zero or one PortfolioRebalance that matches the filter.
   * @param {PortfolioRebalanceFindUniqueArgs} args - Arguments to find a PortfolioRebalance
   * @example
   * // Get one PortfolioRebalance
   * const portfolioRebalance = await prisma.portfolioRebalance.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends PortfolioRebalanceFindUniqueArgs>(args: Prisma.SelectSubset<T, PortfolioRebalanceFindUniqueArgs<ExtArgs>>): Prisma.Prisma__PortfolioRebalanceClient<runtime.Types.Result.GetResult<Prisma.$PortfolioRebalancePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one PortfolioRebalance that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {PortfolioRebalanceFindUniqueOrThrowArgs} args - Arguments to find a PortfolioRebalance
   * @example
   * // Get one PortfolioRebalance
   * const portfolioRebalance = await prisma.portfolioRebalance.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends PortfolioRebalanceFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, PortfolioRebalanceFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__PortfolioRebalanceClient<runtime.Types.Result.GetResult<Prisma.$PortfolioRebalancePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first PortfolioRebalance that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {PortfolioRebalanceFindFirstArgs} args - Arguments to find a PortfolioRebalance
   * @example
   * // Get one PortfolioRebalance
   * const portfolioRebalance = await prisma.portfolioRebalance.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends PortfolioRebalanceFindFirstArgs>(args?: Prisma.SelectSubset<T, PortfolioRebalanceFindFirstArgs<ExtArgs>>): Prisma.Prisma__PortfolioRebalanceClient<runtime.Types.Result.GetResult<Prisma.$PortfolioRebalancePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first PortfolioRebalance that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {PortfolioRebalanceFindFirstOrThrowArgs} args - Arguments to find a PortfolioRebalance
   * @example
   * // Get one PortfolioRebalance
   * const portfolioRebalance = await prisma.portfolioRebalance.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends PortfolioRebalanceFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, PortfolioRebalanceFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__PortfolioRebalanceClient<runtime.Types.Result.GetResult<Prisma.$PortfolioRebalancePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more PortfolioRebalances that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {PortfolioRebalanceFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all PortfolioRebalances
   * const portfolioRebalances = await prisma.portfolioRebalance.findMany()
   * 
   * // Get first 10 PortfolioRebalances
   * const portfolioRebalances = await prisma.portfolioRebalance.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const portfolioRebalanceWithIdOnly = await prisma.portfolioRebalance.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends PortfolioRebalanceFindManyArgs>(args?: Prisma.SelectSubset<T, PortfolioRebalanceFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$PortfolioRebalancePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a PortfolioRebalance.
   * @param {PortfolioRebalanceCreateArgs} args - Arguments to create a PortfolioRebalance.
   * @example
   * // Create one PortfolioRebalance
   * const PortfolioRebalance = await prisma.portfolioRebalance.create({
   *   data: {
   *     // ... data to create a PortfolioRebalance
   *   }
   * })
   * 
   */
  create<T extends PortfolioRebalanceCreateArgs>(args: Prisma.SelectSubset<T, PortfolioRebalanceCreateArgs<ExtArgs>>): Prisma.Prisma__PortfolioRebalanceClient<runtime.Types.Result.GetResult<Prisma.$PortfolioRebalancePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many PortfolioRebalances.
   * @param {PortfolioRebalanceCreateManyArgs} args - Arguments to create many PortfolioRebalances.
   * @example
   * // Create many PortfolioRebalances
   * const portfolioRebalance = await prisma.portfolioRebalance.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends PortfolioRebalanceCreateManyArgs>(args?: Prisma.SelectSubset<T, PortfolioRebalanceCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many PortfolioRebalances and returns the data saved in the database.
   * @param {PortfolioRebalanceCreateManyAndReturnArgs} args - Arguments to create many PortfolioRebalances.
   * @example
   * // Create many PortfolioRebalances
   * const portfolioRebalance = await prisma.portfolioRebalance.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many PortfolioRebalances and only return the `id`
   * const portfolioRebalanceWithIdOnly = await prisma.portfolioRebalance.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends PortfolioRebalanceCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, PortfolioRebalanceCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$PortfolioRebalancePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a PortfolioRebalance.
   * @param {PortfolioRebalanceDeleteArgs} args - Arguments to delete one PortfolioRebalance.
   * @example
   * // Delete one PortfolioRebalance
   * const PortfolioRebalance = await prisma.portfolioRebalance.delete({
   *   where: {
   *     // ... filter to delete one PortfolioRebalance
   *   }
   * })
   * 
   */
  delete<T extends PortfolioRebalanceDeleteArgs>(args: Prisma.SelectSubset<T, PortfolioRebalanceDeleteArgs<ExtArgs>>): Prisma.Prisma__PortfolioRebalanceClient<runtime.Types.Result.GetResult<Prisma.$PortfolioRebalancePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one PortfolioRebalance.
   * @param {PortfolioRebalanceUpdateArgs} args - Arguments to update one PortfolioRebalance.
   * @example
   * // Update one PortfolioRebalance
   * const portfolioRebalance = await prisma.portfolioRebalance.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends PortfolioRebalanceUpdateArgs>(args: Prisma.SelectSubset<T, PortfolioRebalanceUpdateArgs<ExtArgs>>): Prisma.Prisma__PortfolioRebalanceClient<runtime.Types.Result.GetResult<Prisma.$PortfolioRebalancePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more PortfolioRebalances.
   * @param {PortfolioRebalanceDeleteManyArgs} args - Arguments to filter PortfolioRebalances to delete.
   * @example
   * // Delete a few PortfolioRebalances
   * const { count } = await prisma.portfolioRebalance.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends PortfolioRebalanceDeleteManyArgs>(args?: Prisma.SelectSubset<T, PortfolioRebalanceDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more PortfolioRebalances.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {PortfolioRebalanceUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many PortfolioRebalances
   * const portfolioRebalance = await prisma.portfolioRebalance.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends PortfolioRebalanceUpdateManyArgs>(args: Prisma.SelectSubset<T, PortfolioRebalanceUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more PortfolioRebalances and returns the data updated in the database.
   * @param {PortfolioRebalanceUpdateManyAndReturnArgs} args - Arguments to update many PortfolioRebalances.
   * @example
   * // Update many PortfolioRebalances
   * const portfolioRebalance = await prisma.portfolioRebalance.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more PortfolioRebalances and only return the `id`
   * const portfolioRebalanceWithIdOnly = await prisma.portfolioRebalance.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends PortfolioRebalanceUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, PortfolioRebalanceUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$PortfolioRebalancePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one PortfolioRebalance.
   * @param {PortfolioRebalanceUpsertArgs} args - Arguments to update or create a PortfolioRebalance.
   * @example
   * // Update or create a PortfolioRebalance
   * const portfolioRebalance = await prisma.portfolioRebalance.upsert({
   *   create: {
   *     // ... data to create a PortfolioRebalance
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the PortfolioRebalance we want to update
   *   }
   * })
   */
  upsert<T extends PortfolioRebalanceUpsertArgs>(args: Prisma.SelectSubset<T, PortfolioRebalanceUpsertArgs<ExtArgs>>): Prisma.Prisma__PortfolioRebalanceClient<runtime.Types.Result.GetResult<Prisma.$PortfolioRebalancePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of PortfolioRebalances.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {PortfolioRebalanceCountArgs} args - Arguments to filter PortfolioRebalances to count.
   * @example
   * // Count the number of PortfolioRebalances
   * const count = await prisma.portfolioRebalance.count({
   *   where: {
   *     // ... the filter for the PortfolioRebalances we want to count
   *   }
   * })
  **/
  count<T extends PortfolioRebalanceCountArgs>(
    args?: Prisma.Subset<T, PortfolioRebalanceCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], PortfolioRebalanceCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a PortfolioRebalance.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {PortfolioRebalanceAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends PortfolioRebalanceAggregateArgs>(args: Prisma.Subset<T, PortfolioRebalanceAggregateArgs>): Prisma.PrismaPromise<GetPortfolioRebalanceAggregateType<T>>

  /**
   * Group by PortfolioRebalance.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {PortfolioRebalanceGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends PortfolioRebalanceGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: PortfolioRebalanceGroupByArgs['orderBy'] }
      : { orderBy?: PortfolioRebalanceGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, PortfolioRebalanceGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPortfolioRebalanceGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the PortfolioRebalance model
 */
readonly fields: PortfolioRebalanceFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for PortfolioRebalance.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__PortfolioRebalanceClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  portfolio<T extends Prisma.PortfolioDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.PortfolioDefaultArgs<ExtArgs>>): Prisma.Prisma__PortfolioClient<runtime.Types.Result.GetResult<Prisma.$PortfolioPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the PortfolioRebalance model
 */
export interface PortfolioRebalanceFieldRefs {
  readonly id: Prisma.FieldRef<"PortfolioRebalance", 'String'>
  readonly portfolioId: Prisma.FieldRef<"PortfolioRebalance", 'String'>
  readonly reason: Prisma.FieldRef<"PortfolioRebalance", 'String'>
  readonly totalCost: Prisma.FieldRef<"PortfolioRebalance", 'Decimal'>
  readonly netBenefit: Prisma.FieldRef<"PortfolioRebalance", 'Decimal'>
  readonly priority: Prisma.FieldRef<"PortfolioRebalance", 'String'>
  readonly actions: Prisma.FieldRef<"PortfolioRebalance", 'String'>
  readonly createdAt: Prisma.FieldRef<"PortfolioRebalance", 'DateTime'>
}
    

// Custom InputTypes
/**
 * PortfolioRebalance findUnique
 */
export type PortfolioRebalanceFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PortfolioRebalance
   */
  select?: Prisma.PortfolioRebalanceSelect<ExtArgs> | null
  /**
   * Omit specific fields from the PortfolioRebalance
   */
  omit?: Prisma.PortfolioRebalanceOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PortfolioRebalanceInclude<ExtArgs> | null
  /**
   * Filter, which PortfolioRebalance to fetch.
   */
  where: Prisma.PortfolioRebalanceWhereUniqueInput
}

/**
 * PortfolioRebalance findUniqueOrThrow
 */
export type PortfolioRebalanceFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PortfolioRebalance
   */
  select?: Prisma.PortfolioRebalanceSelect<ExtArgs> | null
  /**
   * Omit specific fields from the PortfolioRebalance
   */
  omit?: Prisma.PortfolioRebalanceOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PortfolioRebalanceInclude<ExtArgs> | null
  /**
   * Filter, which PortfolioRebalance to fetch.
   */
  where: Prisma.PortfolioRebalanceWhereUniqueInput
}

/**
 * PortfolioRebalance findFirst
 */
export type PortfolioRebalanceFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PortfolioRebalance
   */
  select?: Prisma.PortfolioRebalanceSelect<ExtArgs> | null
  /**
   * Omit specific fields from the PortfolioRebalance
   */
  omit?: Prisma.PortfolioRebalanceOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PortfolioRebalanceInclude<ExtArgs> | null
  /**
   * Filter, which PortfolioRebalance to fetch.
   */
  where?: Prisma.PortfolioRebalanceWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of PortfolioRebalances to fetch.
   */
  orderBy?: Prisma.PortfolioRebalanceOrderByWithRelationInput | Prisma.PortfolioRebalanceOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for PortfolioRebalances.
   */
  cursor?: Prisma.PortfolioRebalanceWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` PortfolioRebalances from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` PortfolioRebalances.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of PortfolioRebalances.
   */
  distinct?: Prisma.PortfolioRebalanceScalarFieldEnum | Prisma.PortfolioRebalanceScalarFieldEnum[]
}

/**
 * PortfolioRebalance findFirstOrThrow
 */
export type PortfolioRebalanceFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PortfolioRebalance
   */
  select?: Prisma.PortfolioRebalanceSelect<ExtArgs> | null
  /**
   * Omit specific fields from the PortfolioRebalance
   */
  omit?: Prisma.PortfolioRebalanceOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PortfolioRebalanceInclude<ExtArgs> | null
  /**
   * Filter, which PortfolioRebalance to fetch.
   */
  where?: Prisma.PortfolioRebalanceWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of PortfolioRebalances to fetch.
   */
  orderBy?: Prisma.PortfolioRebalanceOrderByWithRelationInput | Prisma.PortfolioRebalanceOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for PortfolioRebalances.
   */
  cursor?: Prisma.PortfolioRebalanceWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` PortfolioRebalances from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` PortfolioRebalances.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of PortfolioRebalances.
   */
  distinct?: Prisma.PortfolioRebalanceScalarFieldEnum | Prisma.PortfolioRebalanceScalarFieldEnum[]
}

/**
 * PortfolioRebalance findMany
 */
export type PortfolioRebalanceFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PortfolioRebalance
   */
  select?: Prisma.PortfolioRebalanceSelect<ExtArgs> | null
  /**
   * Omit specific fields from the PortfolioRebalance
   */
  omit?: Prisma.PortfolioRebalanceOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PortfolioRebalanceInclude<ExtArgs> | null
  /**
   * Filter, which PortfolioRebalances to fetch.
   */
  where?: Prisma.PortfolioRebalanceWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of PortfolioRebalances to fetch.
   */
  orderBy?: Prisma.PortfolioRebalanceOrderByWithRelationInput | Prisma.PortfolioRebalanceOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing PortfolioRebalances.
   */
  cursor?: Prisma.PortfolioRebalanceWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` PortfolioRebalances from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` PortfolioRebalances.
   */
  skip?: number
  distinct?: Prisma.PortfolioRebalanceScalarFieldEnum | Prisma.PortfolioRebalanceScalarFieldEnum[]
}

/**
 * PortfolioRebalance create
 */
export type PortfolioRebalanceCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PortfolioRebalance
   */
  select?: Prisma.PortfolioRebalanceSelect<ExtArgs> | null
  /**
   * Omit specific fields from the PortfolioRebalance
   */
  omit?: Prisma.PortfolioRebalanceOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PortfolioRebalanceInclude<ExtArgs> | null
  /**
   * The data needed to create a PortfolioRebalance.
   */
  data: Prisma.XOR<Prisma.PortfolioRebalanceCreateInput, Prisma.PortfolioRebalanceUncheckedCreateInput>
}

/**
 * PortfolioRebalance createMany
 */
export type PortfolioRebalanceCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many PortfolioRebalances.
   */
  data: Prisma.PortfolioRebalanceCreateManyInput | Prisma.PortfolioRebalanceCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * PortfolioRebalance createManyAndReturn
 */
export type PortfolioRebalanceCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PortfolioRebalance
   */
  select?: Prisma.PortfolioRebalanceSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the PortfolioRebalance
   */
  omit?: Prisma.PortfolioRebalanceOmit<ExtArgs> | null
  /**
   * The data used to create many PortfolioRebalances.
   */
  data: Prisma.PortfolioRebalanceCreateManyInput | Prisma.PortfolioRebalanceCreateManyInput[]
  skipDuplicates?: boolean
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PortfolioRebalanceIncludeCreateManyAndReturn<ExtArgs> | null
}

/**
 * PortfolioRebalance update
 */
export type PortfolioRebalanceUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PortfolioRebalance
   */
  select?: Prisma.PortfolioRebalanceSelect<ExtArgs> | null
  /**
   * Omit specific fields from the PortfolioRebalance
   */
  omit?: Prisma.PortfolioRebalanceOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PortfolioRebalanceInclude<ExtArgs> | null
  /**
   * The data needed to update a PortfolioRebalance.
   */
  data: Prisma.XOR<Prisma.PortfolioRebalanceUpdateInput, Prisma.PortfolioRebalanceUncheckedUpdateInput>
  /**
   * Choose, which PortfolioRebalance to update.
   */
  where: Prisma.PortfolioRebalanceWhereUniqueInput
}

/**
 * PortfolioRebalance updateMany
 */
export type PortfolioRebalanceUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update PortfolioRebalances.
   */
  data: Prisma.XOR<Prisma.PortfolioRebalanceUpdateManyMutationInput, Prisma.PortfolioRebalanceUncheckedUpdateManyInput>
  /**
   * Filter which PortfolioRebalances to update
   */
  where?: Prisma.PortfolioRebalanceWhereInput
  /**
   * Limit how many PortfolioRebalances to update.
   */
  limit?: number
}

/**
 * PortfolioRebalance updateManyAndReturn
 */
export type PortfolioRebalanceUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PortfolioRebalance
   */
  select?: Prisma.PortfolioRebalanceSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the PortfolioRebalance
   */
  omit?: Prisma.PortfolioRebalanceOmit<ExtArgs> | null
  /**
   * The data used to update PortfolioRebalances.
   */
  data: Prisma.XOR<Prisma.PortfolioRebalanceUpdateManyMutationInput, Prisma.PortfolioRebalanceUncheckedUpdateManyInput>
  /**
   * Filter which PortfolioRebalances to update
   */
  where?: Prisma.PortfolioRebalanceWhereInput
  /**
   * Limit how many PortfolioRebalances to update.
   */
  limit?: number
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PortfolioRebalanceIncludeUpdateManyAndReturn<ExtArgs> | null
}

/**
 * PortfolioRebalance upsert
 */
export type PortfolioRebalanceUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PortfolioRebalance
   */
  select?: Prisma.PortfolioRebalanceSelect<ExtArgs> | null
  /**
   * Omit specific fields from the PortfolioRebalance
   */
  omit?: Prisma.PortfolioRebalanceOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PortfolioRebalanceInclude<ExtArgs> | null
  /**
   * The filter to search for the PortfolioRebalance to update in case it exists.
   */
  where: Prisma.PortfolioRebalanceWhereUniqueInput
  /**
   * In case the PortfolioRebalance found by the `where` argument doesn't exist, create a new PortfolioRebalance with this data.
   */
  create: Prisma.XOR<Prisma.PortfolioRebalanceCreateInput, Prisma.PortfolioRebalanceUncheckedCreateInput>
  /**
   * In case the PortfolioRebalance was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.PortfolioRebalanceUpdateInput, Prisma.PortfolioRebalanceUncheckedUpdateInput>
}

/**
 * PortfolioRebalance delete
 */
export type PortfolioRebalanceDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PortfolioRebalance
   */
  select?: Prisma.PortfolioRebalanceSelect<ExtArgs> | null
  /**
   * Omit specific fields from the PortfolioRebalance
   */
  omit?: Prisma.PortfolioRebalanceOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PortfolioRebalanceInclude<ExtArgs> | null
  /**
   * Filter which PortfolioRebalance to delete.
   */
  where: Prisma.PortfolioRebalanceWhereUniqueInput
}

/**
 * PortfolioRebalance deleteMany
 */
export type PortfolioRebalanceDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which PortfolioRebalances to delete
   */
  where?: Prisma.PortfolioRebalanceWhereInput
  /**
   * Limit how many PortfolioRebalances to delete.
   */
  limit?: number
}

/**
 * PortfolioRebalance without action
 */
export type PortfolioRebalanceDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PortfolioRebalance
   */
  select?: Prisma.PortfolioRebalanceSelect<ExtArgs> | null
  /**
   * Omit specific fields from the PortfolioRebalance
   */
  omit?: Prisma.PortfolioRebalanceOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PortfolioRebalanceInclude<ExtArgs> | null
}
