
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/*
 * This file exports the `Position` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import type * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums"
import type * as Prisma from "../internal/prismaNamespace"

/**
 * Model Position
 * 
 */
export type PositionModel = runtime.Types.Result.DefaultSelection<Prisma.$PositionPayload>

export type AggregatePosition = {
  _count: PositionCountAggregateOutputType | null
  _avg: PositionAvgAggregateOutputType | null
  _sum: PositionSumAggregateOutputType | null
  _min: PositionMinAggregateOutputType | null
  _max: PositionMaxAggregateOutputType | null
}

export type PositionAvgAggregateOutputType = {
  quantity: runtime.Decimal | null
  entryPrice: runtime.Decimal | null
  currentPrice: runtime.Decimal | null
  pnl: runtime.Decimal | null
  pnlPercent: runtime.Decimal | null
}

export type PositionSumAggregateOutputType = {
  quantity: runtime.Decimal | null
  entryPrice: runtime.Decimal | null
  currentPrice: runtime.Decimal | null
  pnl: runtime.Decimal | null
  pnlPercent: runtime.Decimal | null
}

export type PositionMinAggregateOutputType = {
  id: string | null
  portfolioId: string | null
  symbol: string | null
  quantity: runtime.Decimal | null
  entryPrice: runtime.Decimal | null
  currentPrice: runtime.Decimal | null
  pnl: runtime.Decimal | null
  pnlPercent: runtime.Decimal | null
  side: string | null
  exchange: string | null
  exchangeCredentialsId: string | null
  createdAt: Date | null
  updatedAt: Date | null
}

export type PositionMaxAggregateOutputType = {
  id: string | null
  portfolioId: string | null
  symbol: string | null
  quantity: runtime.Decimal | null
  entryPrice: runtime.Decimal | null
  currentPrice: runtime.Decimal | null
  pnl: runtime.Decimal | null
  pnlPercent: runtime.Decimal | null
  side: string | null
  exchange: string | null
  exchangeCredentialsId: string | null
  createdAt: Date | null
  updatedAt: Date | null
}

export type PositionCountAggregateOutputType = {
  id: number
  portfolioId: number
  symbol: number
  quantity: number
  entryPrice: number
  currentPrice: number
  pnl: number
  pnlPercent: number
  side: number
  exchange: number
  exchangeCredentialsId: number
  createdAt: number
  updatedAt: number
  _all: number
}


export type PositionAvgAggregateInputType = {
  quantity?: true
  entryPrice?: true
  currentPrice?: true
  pnl?: true
  pnlPercent?: true
}

export type PositionSumAggregateInputType = {
  quantity?: true
  entryPrice?: true
  currentPrice?: true
  pnl?: true
  pnlPercent?: true
}

export type PositionMinAggregateInputType = {
  id?: true
  portfolioId?: true
  symbol?: true
  quantity?: true
  entryPrice?: true
  currentPrice?: true
  pnl?: true
  pnlPercent?: true
  side?: true
  exchange?: true
  exchangeCredentialsId?: true
  createdAt?: true
  updatedAt?: true
}

export type PositionMaxAggregateInputType = {
  id?: true
  portfolioId?: true
  symbol?: true
  quantity?: true
  entryPrice?: true
  currentPrice?: true
  pnl?: true
  pnlPercent?: true
  side?: true
  exchange?: true
  exchangeCredentialsId?: true
  createdAt?: true
  updatedAt?: true
}

export type PositionCountAggregateInputType = {
  id?: true
  portfolioId?: true
  symbol?: true
  quantity?: true
  entryPrice?: true
  currentPrice?: true
  pnl?: true
  pnlPercent?: true
  side?: true
  exchange?: true
  exchangeCredentialsId?: true
  createdAt?: true
  updatedAt?: true
  _all?: true
}

export type PositionAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which Position to aggregate.
   */
  where?: Prisma.PositionWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Positions to fetch.
   */
  orderBy?: Prisma.PositionOrderByWithRelationInput | Prisma.PositionOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.PositionWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Positions from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Positions.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned Positions
  **/
  _count?: true | PositionCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to average
  **/
  _avg?: PositionAvgAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to sum
  **/
  _sum?: PositionSumAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: PositionMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: PositionMaxAggregateInputType
}

export type GetPositionAggregateType<T extends PositionAggregateArgs> = {
      [P in keyof T & keyof AggregatePosition]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregatePosition[P]>
    : Prisma.GetScalarType<T[P], AggregatePosition[P]>
}




export type PositionGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.PositionWhereInput
  orderBy?: Prisma.PositionOrderByWithAggregationInput | Prisma.PositionOrderByWithAggregationInput[]
  by: Prisma.PositionScalarFieldEnum[] | Prisma.PositionScalarFieldEnum
  having?: Prisma.PositionScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: PositionCountAggregateInputType | true
  _avg?: PositionAvgAggregateInputType
  _sum?: PositionSumAggregateInputType
  _min?: PositionMinAggregateInputType
  _max?: PositionMaxAggregateInputType
}

export type PositionGroupByOutputType = {
  id: string
  portfolioId: string
  symbol: string
  quantity: runtime.Decimal
  entryPrice: runtime.Decimal
  currentPrice: runtime.Decimal
  pnl: runtime.Decimal
  pnlPercent: runtime.Decimal
  side: string
  exchange: string
  exchangeCredentialsId: string | null
  createdAt: Date
  updatedAt: Date
  _count: PositionCountAggregateOutputType | null
  _avg: PositionAvgAggregateOutputType | null
  _sum: PositionSumAggregateOutputType | null
  _min: PositionMinAggregateOutputType | null
  _max: PositionMaxAggregateOutputType | null
}

type GetPositionGroupByPayload<T extends PositionGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<PositionGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof PositionGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], PositionGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], PositionGroupByOutputType[P]>
      }
    >
  >



export type PositionWhereInput = {
  AND?: Prisma.PositionWhereInput | Prisma.PositionWhereInput[]
  OR?: Prisma.PositionWhereInput[]
  NOT?: Prisma.PositionWhereInput | Prisma.PositionWhereInput[]
  id?: Prisma.StringFilter<"Position"> | string
  portfolioId?: Prisma.StringFilter<"Position"> | string
  symbol?: Prisma.StringFilter<"Position"> | string
  quantity?: Prisma.DecimalFilter<"Position"> | runtime.Decimal | runtime.DecimalJsLike | number | string
  entryPrice?: Prisma.DecimalFilter<"Position"> | runtime.Decimal | runtime.DecimalJsLike | number | string
  currentPrice?: Prisma.DecimalFilter<"Position"> | runtime.Decimal | runtime.DecimalJsLike | number | string
  pnl?: Prisma.DecimalFilter<"Position"> | runtime.Decimal | runtime.DecimalJsLike | number | string
  pnlPercent?: Prisma.DecimalFilter<"Position"> | runtime.Decimal | runtime.DecimalJsLike | number | string
  side?: Prisma.StringFilter<"Position"> | string
  exchange?: Prisma.StringFilter<"Position"> | string
  exchangeCredentialsId?: Prisma.StringNullableFilter<"Position"> | string | null
  createdAt?: Prisma.DateTimeFilter<"Position"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"Position"> | Date | string
  portfolio?: Prisma.XOR<Prisma.PortfolioScalarRelationFilter, Prisma.PortfolioWhereInput>
}

export type PositionOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  portfolioId?: Prisma.SortOrder
  symbol?: Prisma.SortOrder
  quantity?: Prisma.SortOrder
  entryPrice?: Prisma.SortOrder
  currentPrice?: Prisma.SortOrder
  pnl?: Prisma.SortOrder
  pnlPercent?: Prisma.SortOrder
  side?: Prisma.SortOrder
  exchange?: Prisma.SortOrder
  exchangeCredentialsId?: Prisma.SortOrderInput | Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  portfolio?: Prisma.PortfolioOrderByWithRelationInput
}

export type PositionWhereUniqueInput = Prisma.AtLeast<{
  id?: string
  AND?: Prisma.PositionWhereInput | Prisma.PositionWhereInput[]
  OR?: Prisma.PositionWhereInput[]
  NOT?: Prisma.PositionWhereInput | Prisma.PositionWhereInput[]
  portfolioId?: Prisma.StringFilter<"Position"> | string
  symbol?: Prisma.StringFilter<"Position"> | string
  quantity?: Prisma.DecimalFilter<"Position"> | runtime.Decimal | runtime.DecimalJsLike | number | string
  entryPrice?: Prisma.DecimalFilter<"Position"> | runtime.Decimal | runtime.DecimalJsLike | number | string
  currentPrice?: Prisma.DecimalFilter<"Position"> | runtime.Decimal | runtime.DecimalJsLike | number | string
  pnl?: Prisma.DecimalFilter<"Position"> | runtime.Decimal | runtime.DecimalJsLike | number | string
  pnlPercent?: Prisma.DecimalFilter<"Position"> | runtime.Decimal | runtime.DecimalJsLike | number | string
  side?: Prisma.StringFilter<"Position"> | string
  exchange?: Prisma.StringFilter<"Position"> | string
  exchangeCredentialsId?: Prisma.StringNullableFilter<"Position"> | string | null
  createdAt?: Prisma.DateTimeFilter<"Position"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"Position"> | Date | string
  portfolio?: Prisma.XOR<Prisma.PortfolioScalarRelationFilter, Prisma.PortfolioWhereInput>
}, "id">

export type PositionOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  portfolioId?: Prisma.SortOrder
  symbol?: Prisma.SortOrder
  quantity?: Prisma.SortOrder
  entryPrice?: Prisma.SortOrder
  currentPrice?: Prisma.SortOrder
  pnl?: Prisma.SortOrder
  pnlPercent?: Prisma.SortOrder
  side?: Prisma.SortOrder
  exchange?: Prisma.SortOrder
  exchangeCredentialsId?: Prisma.SortOrderInput | Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  _count?: Prisma.PositionCountOrderByAggregateInput
  _avg?: Prisma.PositionAvgOrderByAggregateInput
  _max?: Prisma.PositionMaxOrderByAggregateInput
  _min?: Prisma.PositionMinOrderByAggregateInput
  _sum?: Prisma.PositionSumOrderByAggregateInput
}

export type PositionScalarWhereWithAggregatesInput = {
  AND?: Prisma.PositionScalarWhereWithAggregatesInput | Prisma.PositionScalarWhereWithAggregatesInput[]
  OR?: Prisma.PositionScalarWhereWithAggregatesInput[]
  NOT?: Prisma.PositionScalarWhereWithAggregatesInput | Prisma.PositionScalarWhereWithAggregatesInput[]
  id?: Prisma.StringWithAggregatesFilter<"Position"> | string
  portfolioId?: Prisma.StringWithAggregatesFilter<"Position"> | string
  symbol?: Prisma.StringWithAggregatesFilter<"Position"> | string
  quantity?: Prisma.DecimalWithAggregatesFilter<"Position"> | runtime.Decimal | runtime.DecimalJsLike | number | string
  entryPrice?: Prisma.DecimalWithAggregatesFilter<"Position"> | runtime.Decimal | runtime.DecimalJsLike | number | string
  currentPrice?: Prisma.DecimalWithAggregatesFilter<"Position"> | runtime.Decimal | runtime.DecimalJsLike | number | string
  pnl?: Prisma.DecimalWithAggregatesFilter<"Position"> | runtime.Decimal | runtime.DecimalJsLike | number | string
  pnlPercent?: Prisma.DecimalWithAggregatesFilter<"Position"> | runtime.Decimal | runtime.DecimalJsLike | number | string
  side?: Prisma.StringWithAggregatesFilter<"Position"> | string
  exchange?: Prisma.StringWithAggregatesFilter<"Position"> | string
  exchangeCredentialsId?: Prisma.StringNullableWithAggregatesFilter<"Position"> | string | null
  createdAt?: Prisma.DateTimeWithAggregatesFilter<"Position"> | Date | string
  updatedAt?: Prisma.DateTimeWithAggregatesFilter<"Position"> | Date | string
}

export type PositionCreateInput = {
  id?: string
  symbol: string
  quantity: runtime.Decimal | runtime.DecimalJsLike | number | string
  entryPrice: runtime.Decimal | runtime.DecimalJsLike | number | string
  currentPrice: runtime.Decimal | runtime.DecimalJsLike | number | string
  pnl?: runtime.Decimal | runtime.DecimalJsLike | number | string
  pnlPercent?: runtime.Decimal | runtime.DecimalJsLike | number | string
  side: string
  exchange?: string
  exchangeCredentialsId?: string | null
  createdAt?: Date | string
  updatedAt?: Date | string
  portfolio: Prisma.PortfolioCreateNestedOneWithoutPositionsInput
}

export type PositionUncheckedCreateInput = {
  id?: string
  portfolioId: string
  symbol: string
  quantity: runtime.Decimal | runtime.DecimalJsLike | number | string
  entryPrice: runtime.Decimal | runtime.DecimalJsLike | number | string
  currentPrice: runtime.Decimal | runtime.DecimalJsLike | number | string
  pnl?: runtime.Decimal | runtime.DecimalJsLike | number | string
  pnlPercent?: runtime.Decimal | runtime.DecimalJsLike | number | string
  side: string
  exchange?: string
  exchangeCredentialsId?: string | null
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type PositionUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  symbol?: Prisma.StringFieldUpdateOperationsInput | string
  quantity?: Prisma.DecimalFieldUpdateOperationsInput | runtime.Decimal | runtime.DecimalJsLike | number | string
  entryPrice?: Prisma.DecimalFieldUpdateOperationsInput | runtime.Decimal | runtime.DecimalJsLike | number | string
  currentPrice?: Prisma.DecimalFieldUpdateOperationsInput | runtime.Decimal | runtime.DecimalJsLike | number | string
  pnl?: Prisma.DecimalFieldUpdateOperationsInput | runtime.Decimal | runtime.DecimalJsLike | number | string
  pnlPercent?: Prisma.DecimalFieldUpdateOperationsInput | runtime.Decimal | runtime.DecimalJsLike | number | string
  side?: Prisma.StringFieldUpdateOperationsInput | string
  exchange?: Prisma.StringFieldUpdateOperationsInput | string
  exchangeCredentialsId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  portfolio?: Prisma.PortfolioUpdateOneRequiredWithoutPositionsNestedInput
}

export type PositionUncheckedUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  portfolioId?: Prisma.StringFieldUpdateOperationsInput | string
  symbol?: Prisma.StringFieldUpdateOperationsInput | string
  quantity?: Prisma.DecimalFieldUpdateOperationsInput | runtime.Decimal | runtime.DecimalJsLike | number | string
  entryPrice?: Prisma.DecimalFieldUpdateOperationsInput | runtime.Decimal | runtime.DecimalJsLike | number | string
  currentPrice?: Prisma.DecimalFieldUpdateOperationsInput | runtime.Decimal | runtime.DecimalJsLike | number | string
  pnl?: Prisma.DecimalFieldUpdateOperationsInput | runtime.Decimal | runtime.DecimalJsLike | number | string
  pnlPercent?: Prisma.DecimalFieldUpdateOperationsInput | runtime.Decimal | runtime.DecimalJsLike | number | string
  side?: Prisma.StringFieldUpdateOperationsInput | string
  exchange?: Prisma.StringFieldUpdateOperationsInput | string
  exchangeCredentialsId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type PositionCreateManyInput = {
  id?: string
  portfolioId: string
  symbol: string
  quantity: runtime.Decimal | runtime.DecimalJsLike | number | string
  entryPrice: runtime.Decimal | runtime.DecimalJsLike | number | string
  currentPrice: runtime.Decimal | runtime.DecimalJsLike | number | string
  pnl?: runtime.Decimal | runtime.DecimalJsLike | number | string
  pnlPercent?: runtime.Decimal | runtime.DecimalJsLike | number | string
  side: string
  exchange?: string
  exchangeCredentialsId?: string | null
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type PositionUpdateManyMutationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  symbol?: Prisma.StringFieldUpdateOperationsInput | string
  quantity?: Prisma.DecimalFieldUpdateOperationsInput | runtime.Decimal | runtime.DecimalJsLike | number | string
  entryPrice?: Prisma.DecimalFieldUpdateOperationsInput | runtime.Decimal | runtime.DecimalJsLike | number | string
  currentPrice?: Prisma.DecimalFieldUpdateOperationsInput | runtime.Decimal | runtime.DecimalJsLike | number | string
  pnl?: Prisma.DecimalFieldUpdateOperationsInput | runtime.Decimal | runtime.DecimalJsLike | number | string
  pnlPercent?: Prisma.DecimalFieldUpdateOperationsInput | runtime.Decimal | runtime.DecimalJsLike | number | string
  side?: Prisma.StringFieldUpdateOperationsInput | string
  exchange?: Prisma.StringFieldUpdateOperationsInput | string
  exchangeCredentialsId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type PositionUncheckedUpdateManyInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  portfolioId?: Prisma.StringFieldUpdateOperationsInput | string
  symbol?: Prisma.StringFieldUpdateOperationsInput | string
  quantity?: Prisma.DecimalFieldUpdateOperationsInput | runtime.Decimal | runtime.DecimalJsLike | number | string
  entryPrice?: Prisma.DecimalFieldUpdateOperationsInput | runtime.Decimal | runtime.DecimalJsLike | number | string
  currentPrice?: Prisma.DecimalFieldUpdateOperationsInput | runtime.Decimal | runtime.DecimalJsLike | number | string
  pnl?: Prisma.DecimalFieldUpdateOperationsInput | runtime.Decimal | runtime.DecimalJsLike | number | string
  pnlPercent?: Prisma.DecimalFieldUpdateOperationsInput | runtime.Decimal | runtime.DecimalJsLike | number | string
  side?: Prisma.StringFieldUpdateOperationsInput | string
  exchange?: Prisma.StringFieldUpdateOperationsInput | string
  exchangeCredentialsId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type PositionListRelationFilter = {
  every?: Prisma.PositionWhereInput
  some?: Prisma.PositionWhereInput
  none?: Prisma.PositionWhereInput
}

export type PositionOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder
}

export type PositionCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  portfolioId?: Prisma.SortOrder
  symbol?: Prisma.SortOrder
  quantity?: Prisma.SortOrder
  entryPrice?: Prisma.SortOrder
  currentPrice?: Prisma.SortOrder
  pnl?: Prisma.SortOrder
  pnlPercent?: Prisma.SortOrder
  side?: Prisma.SortOrder
  exchange?: Prisma.SortOrder
  exchangeCredentialsId?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type PositionAvgOrderByAggregateInput = {
  quantity?: Prisma.SortOrder
  entryPrice?: Prisma.SortOrder
  currentPrice?: Prisma.SortOrder
  pnl?: Prisma.SortOrder
  pnlPercent?: Prisma.SortOrder
}

export type PositionMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  portfolioId?: Prisma.SortOrder
  symbol?: Prisma.SortOrder
  quantity?: Prisma.SortOrder
  entryPrice?: Prisma.SortOrder
  currentPrice?: Prisma.SortOrder
  pnl?: Prisma.SortOrder
  pnlPercent?: Prisma.SortOrder
  side?: Prisma.SortOrder
  exchange?: Prisma.SortOrder
  exchangeCredentialsId?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type PositionMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  portfolioId?: Prisma.SortOrder
  symbol?: Prisma.SortOrder
  quantity?: Prisma.SortOrder
  entryPrice?: Prisma.SortOrder
  currentPrice?: Prisma.SortOrder
  pnl?: Prisma.SortOrder
  pnlPercent?: Prisma.SortOrder
  side?: Prisma.SortOrder
  exchange?: Prisma.SortOrder
  exchangeCredentialsId?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type PositionSumOrderByAggregateInput = {
  quantity?: Prisma.SortOrder
  entryPrice?: Prisma.SortOrder
  currentPrice?: Prisma.SortOrder
  pnl?: Prisma.SortOrder
  pnlPercent?: Prisma.SortOrder
}

export type PositionCreateNestedManyWithoutPortfolioInput = {
  create?: Prisma.XOR<Prisma.PositionCreateWithoutPortfolioInput, Prisma.PositionUncheckedCreateWithoutPortfolioInput> | Prisma.PositionCreateWithoutPortfolioInput[] | Prisma.PositionUncheckedCreateWithoutPortfolioInput[]
  connectOrCreate?: Prisma.PositionCreateOrConnectWithoutPortfolioInput | Prisma.PositionCreateOrConnectWithoutPortfolioInput[]
  createMany?: Prisma.PositionCreateManyPortfolioInputEnvelope
  connect?: Prisma.PositionWhereUniqueInput | Prisma.PositionWhereUniqueInput[]
}

export type PositionUncheckedCreateNestedManyWithoutPortfolioInput = {
  create?: Prisma.XOR<Prisma.PositionCreateWithoutPortfolioInput, Prisma.PositionUncheckedCreateWithoutPortfolioInput> | Prisma.PositionCreateWithoutPortfolioInput[] | Prisma.PositionUncheckedCreateWithoutPortfolioInput[]
  connectOrCreate?: Prisma.PositionCreateOrConnectWithoutPortfolioInput | Prisma.PositionCreateOrConnectWithoutPortfolioInput[]
  createMany?: Prisma.PositionCreateManyPortfolioInputEnvelope
  connect?: Prisma.PositionWhereUniqueInput | Prisma.PositionWhereUniqueInput[]
}

export type PositionUpdateManyWithoutPortfolioNestedInput = {
  create?: Prisma.XOR<Prisma.PositionCreateWithoutPortfolioInput, Prisma.PositionUncheckedCreateWithoutPortfolioInput> | Prisma.PositionCreateWithoutPortfolioInput[] | Prisma.PositionUncheckedCreateWithoutPortfolioInput[]
  connectOrCreate?: Prisma.PositionCreateOrConnectWithoutPortfolioInput | Prisma.PositionCreateOrConnectWithoutPortfolioInput[]
  upsert?: Prisma.PositionUpsertWithWhereUniqueWithoutPortfolioInput | Prisma.PositionUpsertWithWhereUniqueWithoutPortfolioInput[]
  createMany?: Prisma.PositionCreateManyPortfolioInputEnvelope
  set?: Prisma.PositionWhereUniqueInput | Prisma.PositionWhereUniqueInput[]
  disconnect?: Prisma.PositionWhereUniqueInput | Prisma.PositionWhereUniqueInput[]
  delete?: Prisma.PositionWhereUniqueInput | Prisma.PositionWhereUniqueInput[]
  connect?: Prisma.PositionWhereUniqueInput | Prisma.PositionWhereUniqueInput[]
  update?: Prisma.PositionUpdateWithWhereUniqueWithoutPortfolioInput | Prisma.PositionUpdateWithWhereUniqueWithoutPortfolioInput[]
  updateMany?: Prisma.PositionUpdateManyWithWhereWithoutPortfolioInput | Prisma.PositionUpdateManyWithWhereWithoutPortfolioInput[]
  deleteMany?: Prisma.PositionScalarWhereInput | Prisma.PositionScalarWhereInput[]
}

export type PositionUncheckedUpdateManyWithoutPortfolioNestedInput = {
  create?: Prisma.XOR<Prisma.PositionCreateWithoutPortfolioInput, Prisma.PositionUncheckedCreateWithoutPortfolioInput> | Prisma.PositionCreateWithoutPortfolioInput[] | Prisma.PositionUncheckedCreateWithoutPortfolioInput[]
  connectOrCreate?: Prisma.PositionCreateOrConnectWithoutPortfolioInput | Prisma.PositionCreateOrConnectWithoutPortfolioInput[]
  upsert?: Prisma.PositionUpsertWithWhereUniqueWithoutPortfolioInput | Prisma.PositionUpsertWithWhereUniqueWithoutPortfolioInput[]
  createMany?: Prisma.PositionCreateManyPortfolioInputEnvelope
  set?: Prisma.PositionWhereUniqueInput | Prisma.PositionWhereUniqueInput[]
  disconnect?: Prisma.PositionWhereUniqueInput | Prisma.PositionWhereUniqueInput[]
  delete?: Prisma.PositionWhereUniqueInput | Prisma.PositionWhereUniqueInput[]
  connect?: Prisma.PositionWhereUniqueInput | Prisma.PositionWhereUniqueInput[]
  update?: Prisma.PositionUpdateWithWhereUniqueWithoutPortfolioInput | Prisma.PositionUpdateWithWhereUniqueWithoutPortfolioInput[]
  updateMany?: Prisma.PositionUpdateManyWithWhereWithoutPortfolioInput | Prisma.PositionUpdateManyWithWhereWithoutPortfolioInput[]
  deleteMany?: Prisma.PositionScalarWhereInput | Prisma.PositionScalarWhereInput[]
}

export type PositionCreateWithoutPortfolioInput = {
  id?: string
  symbol: string
  quantity: runtime.Decimal | runtime.DecimalJsLike | number | string
  entryPrice: runtime.Decimal | runtime.DecimalJsLike | number | string
  currentPrice: runtime.Decimal | runtime.DecimalJsLike | number | string
  pnl?: runtime.Decimal | runtime.DecimalJsLike | number | string
  pnlPercent?: runtime.Decimal | runtime.DecimalJsLike | number | string
  side: string
  exchange?: string
  exchangeCredentialsId?: string | null
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type PositionUncheckedCreateWithoutPortfolioInput = {
  id?: string
  symbol: string
  quantity: runtime.Decimal | runtime.DecimalJsLike | number | string
  entryPrice: runtime.Decimal | runtime.DecimalJsLike | number | string
  currentPrice: runtime.Decimal | runtime.DecimalJsLike | number | string
  pnl?: runtime.Decimal | runtime.DecimalJsLike | number | string
  pnlPercent?: runtime.Decimal | runtime.DecimalJsLike | number | string
  side: string
  exchange?: string
  exchangeCredentialsId?: string | null
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type PositionCreateOrConnectWithoutPortfolioInput = {
  where: Prisma.PositionWhereUniqueInput
  create: Prisma.XOR<Prisma.PositionCreateWithoutPortfolioInput, Prisma.PositionUncheckedCreateWithoutPortfolioInput>
}

export type PositionCreateManyPortfolioInputEnvelope = {
  data: Prisma.PositionCreateManyPortfolioInput | Prisma.PositionCreateManyPortfolioInput[]
  skipDuplicates?: boolean
}

export type PositionUpsertWithWhereUniqueWithoutPortfolioInput = {
  where: Prisma.PositionWhereUniqueInput
  update: Prisma.XOR<Prisma.PositionUpdateWithoutPortfolioInput, Prisma.PositionUncheckedUpdateWithoutPortfolioInput>
  create: Prisma.XOR<Prisma.PositionCreateWithoutPortfolioInput, Prisma.PositionUncheckedCreateWithoutPortfolioInput>
}

export type PositionUpdateWithWhereUniqueWithoutPortfolioInput = {
  where: Prisma.PositionWhereUniqueInput
  data: Prisma.XOR<Prisma.PositionUpdateWithoutPortfolioInput, Prisma.PositionUncheckedUpdateWithoutPortfolioInput>
}

export type PositionUpdateManyWithWhereWithoutPortfolioInput = {
  where: Prisma.PositionScalarWhereInput
  data: Prisma.XOR<Prisma.PositionUpdateManyMutationInput, Prisma.PositionUncheckedUpdateManyWithoutPortfolioInput>
}

export type PositionScalarWhereInput = {
  AND?: Prisma.PositionScalarWhereInput | Prisma.PositionScalarWhereInput[]
  OR?: Prisma.PositionScalarWhereInput[]
  NOT?: Prisma.PositionScalarWhereInput | Prisma.PositionScalarWhereInput[]
  id?: Prisma.StringFilter<"Position"> | string
  portfolioId?: Prisma.StringFilter<"Position"> | string
  symbol?: Prisma.StringFilter<"Position"> | string
  quantity?: Prisma.DecimalFilter<"Position"> | runtime.Decimal | runtime.DecimalJsLike | number | string
  entryPrice?: Prisma.DecimalFilter<"Position"> | runtime.Decimal | runtime.DecimalJsLike | number | string
  currentPrice?: Prisma.DecimalFilter<"Position"> | runtime.Decimal | runtime.DecimalJsLike | number | string
  pnl?: Prisma.DecimalFilter<"Position"> | runtime.Decimal | runtime.DecimalJsLike | number | string
  pnlPercent?: Prisma.DecimalFilter<"Position"> | runtime.Decimal | runtime.DecimalJsLike | number | string
  side?: Prisma.StringFilter<"Position"> | string
  exchange?: Prisma.StringFilter<"Position"> | string
  exchangeCredentialsId?: Prisma.StringNullableFilter<"Position"> | string | null
  createdAt?: Prisma.DateTimeFilter<"Position"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"Position"> | Date | string
}

export type PositionCreateManyPortfolioInput = {
  id?: string
  symbol: string
  quantity: runtime.Decimal | runtime.DecimalJsLike | number | string
  entryPrice: runtime.Decimal | runtime.DecimalJsLike | number | string
  currentPrice: runtime.Decimal | runtime.DecimalJsLike | number | string
  pnl?: runtime.Decimal | runtime.DecimalJsLike | number | string
  pnlPercent?: runtime.Decimal | runtime.DecimalJsLike | number | string
  side: string
  exchange?: string
  exchangeCredentialsId?: string | null
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type PositionUpdateWithoutPortfolioInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  symbol?: Prisma.StringFieldUpdateOperationsInput | string
  quantity?: Prisma.DecimalFieldUpdateOperationsInput | runtime.Decimal | runtime.DecimalJsLike | number | string
  entryPrice?: Prisma.DecimalFieldUpdateOperationsInput | runtime.Decimal | runtime.DecimalJsLike | number | string
  currentPrice?: Prisma.DecimalFieldUpdateOperationsInput | runtime.Decimal | runtime.DecimalJsLike | number | string
  pnl?: Prisma.DecimalFieldUpdateOperationsInput | runtime.Decimal | runtime.DecimalJsLike | number | string
  pnlPercent?: Prisma.DecimalFieldUpdateOperationsInput | runtime.Decimal | runtime.DecimalJsLike | number | string
  side?: Prisma.StringFieldUpdateOperationsInput | string
  exchange?: Prisma.StringFieldUpdateOperationsInput | string
  exchangeCredentialsId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type PositionUncheckedUpdateWithoutPortfolioInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  symbol?: Prisma.StringFieldUpdateOperationsInput | string
  quantity?: Prisma.DecimalFieldUpdateOperationsInput | runtime.Decimal | runtime.DecimalJsLike | number | string
  entryPrice?: Prisma.DecimalFieldUpdateOperationsInput | runtime.Decimal | runtime.DecimalJsLike | number | string
  currentPrice?: Prisma.DecimalFieldUpdateOperationsInput | runtime.Decimal | runtime.DecimalJsLike | number | string
  pnl?: Prisma.DecimalFieldUpdateOperationsInput | runtime.Decimal | runtime.DecimalJsLike | number | string
  pnlPercent?: Prisma.DecimalFieldUpdateOperationsInput | runtime.Decimal | runtime.DecimalJsLike | number | string
  side?: Prisma.StringFieldUpdateOperationsInput | string
  exchange?: Prisma.StringFieldUpdateOperationsInput | string
  exchangeCredentialsId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type PositionUncheckedUpdateManyWithoutPortfolioInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  symbol?: Prisma.StringFieldUpdateOperationsInput | string
  quantity?: Prisma.DecimalFieldUpdateOperationsInput | runtime.Decimal | runtime.DecimalJsLike | number | string
  entryPrice?: Prisma.DecimalFieldUpdateOperationsInput | runtime.Decimal | runtime.DecimalJsLike | number | string
  currentPrice?: Prisma.DecimalFieldUpdateOperationsInput | runtime.Decimal | runtime.DecimalJsLike | number | string
  pnl?: Prisma.DecimalFieldUpdateOperationsInput | runtime.Decimal | runtime.DecimalJsLike | number | string
  pnlPercent?: Prisma.DecimalFieldUpdateOperationsInput | runtime.Decimal | runtime.DecimalJsLike | number | string
  side?: Prisma.StringFieldUpdateOperationsInput | string
  exchange?: Prisma.StringFieldUpdateOperationsInput | string
  exchangeCredentialsId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}



export type PositionSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  portfolioId?: boolean
  symbol?: boolean
  quantity?: boolean
  entryPrice?: boolean
  currentPrice?: boolean
  pnl?: boolean
  pnlPercent?: boolean
  side?: boolean
  exchange?: boolean
  exchangeCredentialsId?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  portfolio?: boolean | Prisma.PortfolioDefaultArgs<ExtArgs>
}, ExtArgs["result"]["position"]>

export type PositionSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  portfolioId?: boolean
  symbol?: boolean
  quantity?: boolean
  entryPrice?: boolean
  currentPrice?: boolean
  pnl?: boolean
  pnlPercent?: boolean
  side?: boolean
  exchange?: boolean
  exchangeCredentialsId?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  portfolio?: boolean | Prisma.PortfolioDefaultArgs<ExtArgs>
}, ExtArgs["result"]["position"]>

export type PositionSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  portfolioId?: boolean
  symbol?: boolean
  quantity?: boolean
  entryPrice?: boolean
  currentPrice?: boolean
  pnl?: boolean
  pnlPercent?: boolean
  side?: boolean
  exchange?: boolean
  exchangeCredentialsId?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  portfolio?: boolean | Prisma.PortfolioDefaultArgs<ExtArgs>
}, ExtArgs["result"]["position"]>

export type PositionSelectScalar = {
  id?: boolean
  portfolioId?: boolean
  symbol?: boolean
  quantity?: boolean
  entryPrice?: boolean
  currentPrice?: boolean
  pnl?: boolean
  pnlPercent?: boolean
  side?: boolean
  exchange?: boolean
  exchangeCredentialsId?: boolean
  createdAt?: boolean
  updatedAt?: boolean
}

export type PositionOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "portfolioId" | "symbol" | "quantity" | "entryPrice" | "currentPrice" | "pnl" | "pnlPercent" | "side" | "exchange" | "exchangeCredentialsId" | "createdAt" | "updatedAt", ExtArgs["result"]["position"]>
export type PositionInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  portfolio?: boolean | Prisma.PortfolioDefaultArgs<ExtArgs>
}
export type PositionIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  portfolio?: boolean | Prisma.PortfolioDefaultArgs<ExtArgs>
}
export type PositionIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  portfolio?: boolean | Prisma.PortfolioDefaultArgs<ExtArgs>
}

export type $PositionPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "Position"
  objects: {
    portfolio: Prisma.$PortfolioPayload<ExtArgs>
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: string
    portfolioId: string
    symbol: string
    quantity: runtime.Decimal
    entryPrice: runtime.Decimal
    currentPrice: runtime.Decimal
    pnl: runtime.Decimal
    pnlPercent: runtime.Decimal
    side: string
    exchange: string
    exchangeCredentialsId: string | null
    createdAt: Date
    updatedAt: Date
  }, ExtArgs["result"]["position"]>
  composites: {}
}

export type PositionGetPayload<S extends boolean | null | undefined | PositionDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$PositionPayload, S>

export type PositionCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<PositionFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: PositionCountAggregateInputType | true
  }

export interface PositionDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Position'], meta: { name: 'Position' } }
  /**
   * Find zero or one Position that matches the filter.
   * @param {PositionFindUniqueArgs} args - Arguments to find a Position
   * @example
   * // Get one Position
   * const position = await prisma.position.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends PositionFindUniqueArgs>(args: Prisma.SelectSubset<T, PositionFindUniqueArgs<ExtArgs>>): Prisma.Prisma__PositionClient<runtime.Types.Result.GetResult<Prisma.$PositionPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one Position that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {PositionFindUniqueOrThrowArgs} args - Arguments to find a Position
   * @example
   * // Get one Position
   * const position = await prisma.position.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends PositionFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, PositionFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__PositionClient<runtime.Types.Result.GetResult<Prisma.$PositionPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Position that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {PositionFindFirstArgs} args - Arguments to find a Position
   * @example
   * // Get one Position
   * const position = await prisma.position.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends PositionFindFirstArgs>(args?: Prisma.SelectSubset<T, PositionFindFirstArgs<ExtArgs>>): Prisma.Prisma__PositionClient<runtime.Types.Result.GetResult<Prisma.$PositionPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Position that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {PositionFindFirstOrThrowArgs} args - Arguments to find a Position
   * @example
   * // Get one Position
   * const position = await prisma.position.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends PositionFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, PositionFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__PositionClient<runtime.Types.Result.GetResult<Prisma.$PositionPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more Positions that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {PositionFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all Positions
   * const positions = await prisma.position.findMany()
   * 
   * // Get first 10 Positions
   * const positions = await prisma.position.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const positionWithIdOnly = await prisma.position.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends PositionFindManyArgs>(args?: Prisma.SelectSubset<T, PositionFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$PositionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a Position.
   * @param {PositionCreateArgs} args - Arguments to create a Position.
   * @example
   * // Create one Position
   * const Position = await prisma.position.create({
   *   data: {
   *     // ... data to create a Position
   *   }
   * })
   * 
   */
  create<T extends PositionCreateArgs>(args: Prisma.SelectSubset<T, PositionCreateArgs<ExtArgs>>): Prisma.Prisma__PositionClient<runtime.Types.Result.GetResult<Prisma.$PositionPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many Positions.
   * @param {PositionCreateManyArgs} args - Arguments to create many Positions.
   * @example
   * // Create many Positions
   * const position = await prisma.position.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends PositionCreateManyArgs>(args?: Prisma.SelectSubset<T, PositionCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many Positions and returns the data saved in the database.
   * @param {PositionCreateManyAndReturnArgs} args - Arguments to create many Positions.
   * @example
   * // Create many Positions
   * const position = await prisma.position.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many Positions and only return the `id`
   * const positionWithIdOnly = await prisma.position.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends PositionCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, PositionCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$PositionPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a Position.
   * @param {PositionDeleteArgs} args - Arguments to delete one Position.
   * @example
   * // Delete one Position
   * const Position = await prisma.position.delete({
   *   where: {
   *     // ... filter to delete one Position
   *   }
   * })
   * 
   */
  delete<T extends PositionDeleteArgs>(args: Prisma.SelectSubset<T, PositionDeleteArgs<ExtArgs>>): Prisma.Prisma__PositionClient<runtime.Types.Result.GetResult<Prisma.$PositionPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one Position.
   * @param {PositionUpdateArgs} args - Arguments to update one Position.
   * @example
   * // Update one Position
   * const position = await prisma.position.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends PositionUpdateArgs>(args: Prisma.SelectSubset<T, PositionUpdateArgs<ExtArgs>>): Prisma.Prisma__PositionClient<runtime.Types.Result.GetResult<Prisma.$PositionPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more Positions.
   * @param {PositionDeleteManyArgs} args - Arguments to filter Positions to delete.
   * @example
   * // Delete a few Positions
   * const { count } = await prisma.position.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends PositionDeleteManyArgs>(args?: Prisma.SelectSubset<T, PositionDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Positions.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {PositionUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many Positions
   * const position = await prisma.position.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends PositionUpdateManyArgs>(args: Prisma.SelectSubset<T, PositionUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Positions and returns the data updated in the database.
   * @param {PositionUpdateManyAndReturnArgs} args - Arguments to update many Positions.
   * @example
   * // Update many Positions
   * const position = await prisma.position.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more Positions and only return the `id`
   * const positionWithIdOnly = await prisma.position.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends PositionUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, PositionUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$PositionPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one Position.
   * @param {PositionUpsertArgs} args - Arguments to update or create a Position.
   * @example
   * // Update or create a Position
   * const position = await prisma.position.upsert({
   *   create: {
   *     // ... data to create a Position
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the Position we want to update
   *   }
   * })
   */
  upsert<T extends PositionUpsertArgs>(args: Prisma.SelectSubset<T, PositionUpsertArgs<ExtArgs>>): Prisma.Prisma__PositionClient<runtime.Types.Result.GetResult<Prisma.$PositionPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of Positions.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {PositionCountArgs} args - Arguments to filter Positions to count.
   * @example
   * // Count the number of Positions
   * const count = await prisma.position.count({
   *   where: {
   *     // ... the filter for the Positions we want to count
   *   }
   * })
  **/
  count<T extends PositionCountArgs>(
    args?: Prisma.Subset<T, PositionCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], PositionCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a Position.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {PositionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends PositionAggregateArgs>(args: Prisma.Subset<T, PositionAggregateArgs>): Prisma.PrismaPromise<GetPositionAggregateType<T>>

  /**
   * Group by Position.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {PositionGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends PositionGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: PositionGroupByArgs['orderBy'] }
      : { orderBy?: PositionGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, PositionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPositionGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the Position model
 */
readonly fields: PositionFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for Position.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__PositionClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  portfolio<T extends Prisma.PortfolioDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.PortfolioDefaultArgs<ExtArgs>>): Prisma.Prisma__PortfolioClient<runtime.Types.Result.GetResult<Prisma.$PortfolioPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the Position model
 */
export interface PositionFieldRefs {
  readonly id: Prisma.FieldRef<"Position", 'String'>
  readonly portfolioId: Prisma.FieldRef<"Position", 'String'>
  readonly symbol: Prisma.FieldRef<"Position", 'String'>
  readonly quantity: Prisma.FieldRef<"Position", 'Decimal'>
  readonly entryPrice: Prisma.FieldRef<"Position", 'Decimal'>
  readonly currentPrice: Prisma.FieldRef<"Position", 'Decimal'>
  readonly pnl: Prisma.FieldRef<"Position", 'Decimal'>
  readonly pnlPercent: Prisma.FieldRef<"Position", 'Decimal'>
  readonly side: Prisma.FieldRef<"Position", 'String'>
  readonly exchange: Prisma.FieldRef<"Position", 'String'>
  readonly exchangeCredentialsId: Prisma.FieldRef<"Position", 'String'>
  readonly createdAt: Prisma.FieldRef<"Position", 'DateTime'>
  readonly updatedAt: Prisma.FieldRef<"Position", 'DateTime'>
}
    

// Custom InputTypes
/**
 * Position findUnique
 */
export type PositionFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Position
   */
  select?: Prisma.PositionSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Position
   */
  omit?: Prisma.PositionOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PositionInclude<ExtArgs> | null
  /**
   * Filter, which Position to fetch.
   */
  where: Prisma.PositionWhereUniqueInput
}

/**
 * Position findUniqueOrThrow
 */
export type PositionFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Position
   */
  select?: Prisma.PositionSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Position
   */
  omit?: Prisma.PositionOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PositionInclude<ExtArgs> | null
  /**
   * Filter, which Position to fetch.
   */
  where: Prisma.PositionWhereUniqueInput
}

/**
 * Position findFirst
 */
export type PositionFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Position
   */
  select?: Prisma.PositionSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Position
   */
  omit?: Prisma.PositionOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PositionInclude<ExtArgs> | null
  /**
   * Filter, which Position to fetch.
   */
  where?: Prisma.PositionWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Positions to fetch.
   */
  orderBy?: Prisma.PositionOrderByWithRelationInput | Prisma.PositionOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for Positions.
   */
  cursor?: Prisma.PositionWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Positions from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Positions.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of Positions.
   */
  distinct?: Prisma.PositionScalarFieldEnum | Prisma.PositionScalarFieldEnum[]
}

/**
 * Position findFirstOrThrow
 */
export type PositionFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Position
   */
  select?: Prisma.PositionSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Position
   */
  omit?: Prisma.PositionOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PositionInclude<ExtArgs> | null
  /**
   * Filter, which Position to fetch.
   */
  where?: Prisma.PositionWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Positions to fetch.
   */
  orderBy?: Prisma.PositionOrderByWithRelationInput | Prisma.PositionOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for Positions.
   */
  cursor?: Prisma.PositionWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Positions from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Positions.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of Positions.
   */
  distinct?: Prisma.PositionScalarFieldEnum | Prisma.PositionScalarFieldEnum[]
}

/**
 * Position findMany
 */
export type PositionFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Position
   */
  select?: Prisma.PositionSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Position
   */
  omit?: Prisma.PositionOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PositionInclude<ExtArgs> | null
  /**
   * Filter, which Positions to fetch.
   */
  where?: Prisma.PositionWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Positions to fetch.
   */
  orderBy?: Prisma.PositionOrderByWithRelationInput | Prisma.PositionOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing Positions.
   */
  cursor?: Prisma.PositionWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Positions from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Positions.
   */
  skip?: number
  distinct?: Prisma.PositionScalarFieldEnum | Prisma.PositionScalarFieldEnum[]
}

/**
 * Position create
 */
export type PositionCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Position
   */
  select?: Prisma.PositionSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Position
   */
  omit?: Prisma.PositionOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PositionInclude<ExtArgs> | null
  /**
   * The data needed to create a Position.
   */
  data: Prisma.XOR<Prisma.PositionCreateInput, Prisma.PositionUncheckedCreateInput>
}

/**
 * Position createMany
 */
export type PositionCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many Positions.
   */
  data: Prisma.PositionCreateManyInput | Prisma.PositionCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * Position createManyAndReturn
 */
export type PositionCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Position
   */
  select?: Prisma.PositionSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the Position
   */
  omit?: Prisma.PositionOmit<ExtArgs> | null
  /**
   * The data used to create many Positions.
   */
  data: Prisma.PositionCreateManyInput | Prisma.PositionCreateManyInput[]
  skipDuplicates?: boolean
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PositionIncludeCreateManyAndReturn<ExtArgs> | null
}

/**
 * Position update
 */
export type PositionUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Position
   */
  select?: Prisma.PositionSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Position
   */
  omit?: Prisma.PositionOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PositionInclude<ExtArgs> | null
  /**
   * The data needed to update a Position.
   */
  data: Prisma.XOR<Prisma.PositionUpdateInput, Prisma.PositionUncheckedUpdateInput>
  /**
   * Choose, which Position to update.
   */
  where: Prisma.PositionWhereUniqueInput
}

/**
 * Position updateMany
 */
export type PositionUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update Positions.
   */
  data: Prisma.XOR<Prisma.PositionUpdateManyMutationInput, Prisma.PositionUncheckedUpdateManyInput>
  /**
   * Filter which Positions to update
   */
  where?: Prisma.PositionWhereInput
  /**
   * Limit how many Positions to update.
   */
  limit?: number
}

/**
 * Position updateManyAndReturn
 */
export type PositionUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Position
   */
  select?: Prisma.PositionSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the Position
   */
  omit?: Prisma.PositionOmit<ExtArgs> | null
  /**
   * The data used to update Positions.
   */
  data: Prisma.XOR<Prisma.PositionUpdateManyMutationInput, Prisma.PositionUncheckedUpdateManyInput>
  /**
   * Filter which Positions to update
   */
  where?: Prisma.PositionWhereInput
  /**
   * Limit how many Positions to update.
   */
  limit?: number
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PositionIncludeUpdateManyAndReturn<ExtArgs> | null
}

/**
 * Position upsert
 */
export type PositionUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Position
   */
  select?: Prisma.PositionSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Position
   */
  omit?: Prisma.PositionOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PositionInclude<ExtArgs> | null
  /**
   * The filter to search for the Position to update in case it exists.
   */
  where: Prisma.PositionWhereUniqueInput
  /**
   * In case the Position found by the `where` argument doesn't exist, create a new Position with this data.
   */
  create: Prisma.XOR<Prisma.PositionCreateInput, Prisma.PositionUncheckedCreateInput>
  /**
   * In case the Position was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.PositionUpdateInput, Prisma.PositionUncheckedUpdateInput>
}

/**
 * Position delete
 */
export type PositionDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Position
   */
  select?: Prisma.PositionSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Position
   */
  omit?: Prisma.PositionOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PositionInclude<ExtArgs> | null
  /**
   * Filter which Position to delete.
   */
  where: Prisma.PositionWhereUniqueInput
}

/**
 * Position deleteMany
 */
export type PositionDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which Positions to delete
   */
  where?: Prisma.PositionWhereInput
  /**
   * Limit how many Positions to delete.
   */
  limit?: number
}

/**
 * Position without action
 */
export type PositionDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Position
   */
  select?: Prisma.PositionSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Position
   */
  omit?: Prisma.PositionOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PositionInclude<ExtArgs> | null
}
