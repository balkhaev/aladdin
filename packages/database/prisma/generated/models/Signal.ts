
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/*
 * This file exports the `Signal` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import type * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums"
import type * as Prisma from "../internal/prismaNamespace"

/**
 * Model Signal
 * 
 */
export type SignalModel = runtime.Types.Result.DefaultSelection<Prisma.$SignalPayload>

export type AggregateSignal = {
  _count: SignalCountAggregateOutputType | null
  _avg: SignalAvgAggregateOutputType | null
  _sum: SignalSumAggregateOutputType | null
  _min: SignalMinAggregateOutputType | null
  _max: SignalMaxAggregateOutputType | null
}

export type SignalAvgAggregateOutputType = {
  entry_zone_min: number | null
  entry_zone_max: number | null
  strategy_accuracy: number | null
  trend_line: number | null
  stop_loss: number | null
}

export type SignalSumAggregateOutputType = {
  entry_zone_min: number | null
  entry_zone_max: number | null
  strategy_accuracy: number | null
  trend_line: number | null
  stop_loss: number | null
}

export type SignalMinAggregateOutputType = {
  id: string | null
  pair: string | null
  timeframe: string | null
  term: string | null
  direction: string | null
  entry_zone_min: number | null
  entry_zone_max: number | null
  strategy_accuracy: number | null
  trend_line: number | null
  stop_loss: number | null
  raw: string | null
  timestamp: Date | null
}

export type SignalMaxAggregateOutputType = {
  id: string | null
  pair: string | null
  timeframe: string | null
  term: string | null
  direction: string | null
  entry_zone_min: number | null
  entry_zone_max: number | null
  strategy_accuracy: number | null
  trend_line: number | null
  stop_loss: number | null
  raw: string | null
  timestamp: Date | null
}

export type SignalCountAggregateOutputType = {
  id: number
  pair: number
  timeframe: number
  term: number
  direction: number
  entry_zone_min: number
  entry_zone_max: number
  strategy_accuracy: number
  last_signals: number
  targets: number
  trend_line: number
  stop_loss: number
  raw: number
  timestamp: number
  _all: number
}


export type SignalAvgAggregateInputType = {
  entry_zone_min?: true
  entry_zone_max?: true
  strategy_accuracy?: true
  trend_line?: true
  stop_loss?: true
}

export type SignalSumAggregateInputType = {
  entry_zone_min?: true
  entry_zone_max?: true
  strategy_accuracy?: true
  trend_line?: true
  stop_loss?: true
}

export type SignalMinAggregateInputType = {
  id?: true
  pair?: true
  timeframe?: true
  term?: true
  direction?: true
  entry_zone_min?: true
  entry_zone_max?: true
  strategy_accuracy?: true
  trend_line?: true
  stop_loss?: true
  raw?: true
  timestamp?: true
}

export type SignalMaxAggregateInputType = {
  id?: true
  pair?: true
  timeframe?: true
  term?: true
  direction?: true
  entry_zone_min?: true
  entry_zone_max?: true
  strategy_accuracy?: true
  trend_line?: true
  stop_loss?: true
  raw?: true
  timestamp?: true
}

export type SignalCountAggregateInputType = {
  id?: true
  pair?: true
  timeframe?: true
  term?: true
  direction?: true
  entry_zone_min?: true
  entry_zone_max?: true
  strategy_accuracy?: true
  last_signals?: true
  targets?: true
  trend_line?: true
  stop_loss?: true
  raw?: true
  timestamp?: true
  _all?: true
}

export type SignalAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which Signal to aggregate.
   */
  where?: Prisma.SignalWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Signals to fetch.
   */
  orderBy?: Prisma.SignalOrderByWithRelationInput | Prisma.SignalOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.SignalWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Signals from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Signals.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned Signals
  **/
  _count?: true | SignalCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to average
  **/
  _avg?: SignalAvgAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to sum
  **/
  _sum?: SignalSumAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: SignalMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: SignalMaxAggregateInputType
}

export type GetSignalAggregateType<T extends SignalAggregateArgs> = {
      [P in keyof T & keyof AggregateSignal]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateSignal[P]>
    : Prisma.GetScalarType<T[P], AggregateSignal[P]>
}




export type SignalGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.SignalWhereInput
  orderBy?: Prisma.SignalOrderByWithAggregationInput | Prisma.SignalOrderByWithAggregationInput[]
  by: Prisma.SignalScalarFieldEnum[] | Prisma.SignalScalarFieldEnum
  having?: Prisma.SignalScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: SignalCountAggregateInputType | true
  _avg?: SignalAvgAggregateInputType
  _sum?: SignalSumAggregateInputType
  _min?: SignalMinAggregateInputType
  _max?: SignalMaxAggregateInputType
}

export type SignalGroupByOutputType = {
  id: string
  pair: string | null
  timeframe: string | null
  term: string | null
  direction: string | null
  entry_zone_min: number | null
  entry_zone_max: number | null
  strategy_accuracy: number | null
  last_signals: runtime.JsonValue | null
  targets: runtime.JsonValue | null
  trend_line: number | null
  stop_loss: number | null
  raw: string | null
  timestamp: Date
  _count: SignalCountAggregateOutputType | null
  _avg: SignalAvgAggregateOutputType | null
  _sum: SignalSumAggregateOutputType | null
  _min: SignalMinAggregateOutputType | null
  _max: SignalMaxAggregateOutputType | null
}

type GetSignalGroupByPayload<T extends SignalGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<SignalGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof SignalGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], SignalGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], SignalGroupByOutputType[P]>
      }
    >
  >



export type SignalWhereInput = {
  AND?: Prisma.SignalWhereInput | Prisma.SignalWhereInput[]
  OR?: Prisma.SignalWhereInput[]
  NOT?: Prisma.SignalWhereInput | Prisma.SignalWhereInput[]
  id?: Prisma.StringFilter<"Signal"> | string
  pair?: Prisma.StringNullableFilter<"Signal"> | string | null
  timeframe?: Prisma.StringNullableFilter<"Signal"> | string | null
  term?: Prisma.StringNullableFilter<"Signal"> | string | null
  direction?: Prisma.StringNullableFilter<"Signal"> | string | null
  entry_zone_min?: Prisma.FloatNullableFilter<"Signal"> | number | null
  entry_zone_max?: Prisma.FloatNullableFilter<"Signal"> | number | null
  strategy_accuracy?: Prisma.FloatNullableFilter<"Signal"> | number | null
  last_signals?: Prisma.JsonNullableFilter<"Signal">
  targets?: Prisma.JsonNullableFilter<"Signal">
  trend_line?: Prisma.FloatNullableFilter<"Signal"> | number | null
  stop_loss?: Prisma.FloatNullableFilter<"Signal"> | number | null
  raw?: Prisma.StringNullableFilter<"Signal"> | string | null
  timestamp?: Prisma.DateTimeFilter<"Signal"> | Date | string
}

export type SignalOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  pair?: Prisma.SortOrderInput | Prisma.SortOrder
  timeframe?: Prisma.SortOrderInput | Prisma.SortOrder
  term?: Prisma.SortOrderInput | Prisma.SortOrder
  direction?: Prisma.SortOrderInput | Prisma.SortOrder
  entry_zone_min?: Prisma.SortOrderInput | Prisma.SortOrder
  entry_zone_max?: Prisma.SortOrderInput | Prisma.SortOrder
  strategy_accuracy?: Prisma.SortOrderInput | Prisma.SortOrder
  last_signals?: Prisma.SortOrderInput | Prisma.SortOrder
  targets?: Prisma.SortOrderInput | Prisma.SortOrder
  trend_line?: Prisma.SortOrderInput | Prisma.SortOrder
  stop_loss?: Prisma.SortOrderInput | Prisma.SortOrder
  raw?: Prisma.SortOrderInput | Prisma.SortOrder
  timestamp?: Prisma.SortOrder
}

export type SignalWhereUniqueInput = Prisma.AtLeast<{
  id?: string
  AND?: Prisma.SignalWhereInput | Prisma.SignalWhereInput[]
  OR?: Prisma.SignalWhereInput[]
  NOT?: Prisma.SignalWhereInput | Prisma.SignalWhereInput[]
  pair?: Prisma.StringNullableFilter<"Signal"> | string | null
  timeframe?: Prisma.StringNullableFilter<"Signal"> | string | null
  term?: Prisma.StringNullableFilter<"Signal"> | string | null
  direction?: Prisma.StringNullableFilter<"Signal"> | string | null
  entry_zone_min?: Prisma.FloatNullableFilter<"Signal"> | number | null
  entry_zone_max?: Prisma.FloatNullableFilter<"Signal"> | number | null
  strategy_accuracy?: Prisma.FloatNullableFilter<"Signal"> | number | null
  last_signals?: Prisma.JsonNullableFilter<"Signal">
  targets?: Prisma.JsonNullableFilter<"Signal">
  trend_line?: Prisma.FloatNullableFilter<"Signal"> | number | null
  stop_loss?: Prisma.FloatNullableFilter<"Signal"> | number | null
  raw?: Prisma.StringNullableFilter<"Signal"> | string | null
  timestamp?: Prisma.DateTimeFilter<"Signal"> | Date | string
}, "id">

export type SignalOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  pair?: Prisma.SortOrderInput | Prisma.SortOrder
  timeframe?: Prisma.SortOrderInput | Prisma.SortOrder
  term?: Prisma.SortOrderInput | Prisma.SortOrder
  direction?: Prisma.SortOrderInput | Prisma.SortOrder
  entry_zone_min?: Prisma.SortOrderInput | Prisma.SortOrder
  entry_zone_max?: Prisma.SortOrderInput | Prisma.SortOrder
  strategy_accuracy?: Prisma.SortOrderInput | Prisma.SortOrder
  last_signals?: Prisma.SortOrderInput | Prisma.SortOrder
  targets?: Prisma.SortOrderInput | Prisma.SortOrder
  trend_line?: Prisma.SortOrderInput | Prisma.SortOrder
  stop_loss?: Prisma.SortOrderInput | Prisma.SortOrder
  raw?: Prisma.SortOrderInput | Prisma.SortOrder
  timestamp?: Prisma.SortOrder
  _count?: Prisma.SignalCountOrderByAggregateInput
  _avg?: Prisma.SignalAvgOrderByAggregateInput
  _max?: Prisma.SignalMaxOrderByAggregateInput
  _min?: Prisma.SignalMinOrderByAggregateInput
  _sum?: Prisma.SignalSumOrderByAggregateInput
}

export type SignalScalarWhereWithAggregatesInput = {
  AND?: Prisma.SignalScalarWhereWithAggregatesInput | Prisma.SignalScalarWhereWithAggregatesInput[]
  OR?: Prisma.SignalScalarWhereWithAggregatesInput[]
  NOT?: Prisma.SignalScalarWhereWithAggregatesInput | Prisma.SignalScalarWhereWithAggregatesInput[]
  id?: Prisma.StringWithAggregatesFilter<"Signal"> | string
  pair?: Prisma.StringNullableWithAggregatesFilter<"Signal"> | string | null
  timeframe?: Prisma.StringNullableWithAggregatesFilter<"Signal"> | string | null
  term?: Prisma.StringNullableWithAggregatesFilter<"Signal"> | string | null
  direction?: Prisma.StringNullableWithAggregatesFilter<"Signal"> | string | null
  entry_zone_min?: Prisma.FloatNullableWithAggregatesFilter<"Signal"> | number | null
  entry_zone_max?: Prisma.FloatNullableWithAggregatesFilter<"Signal"> | number | null
  strategy_accuracy?: Prisma.FloatNullableWithAggregatesFilter<"Signal"> | number | null
  last_signals?: Prisma.JsonNullableWithAggregatesFilter<"Signal">
  targets?: Prisma.JsonNullableWithAggregatesFilter<"Signal">
  trend_line?: Prisma.FloatNullableWithAggregatesFilter<"Signal"> | number | null
  stop_loss?: Prisma.FloatNullableWithAggregatesFilter<"Signal"> | number | null
  raw?: Prisma.StringNullableWithAggregatesFilter<"Signal"> | string | null
  timestamp?: Prisma.DateTimeWithAggregatesFilter<"Signal"> | Date | string
}

export type SignalCreateInput = {
  id?: string
  pair?: string | null
  timeframe?: string | null
  term?: string | null
  direction?: string | null
  entry_zone_min?: number | null
  entry_zone_max?: number | null
  strategy_accuracy?: number | null
  last_signals?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue
  targets?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue
  trend_line?: number | null
  stop_loss?: number | null
  raw?: string | null
  timestamp?: Date | string
}

export type SignalUncheckedCreateInput = {
  id?: string
  pair?: string | null
  timeframe?: string | null
  term?: string | null
  direction?: string | null
  entry_zone_min?: number | null
  entry_zone_max?: number | null
  strategy_accuracy?: number | null
  last_signals?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue
  targets?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue
  trend_line?: number | null
  stop_loss?: number | null
  raw?: string | null
  timestamp?: Date | string
}

export type SignalUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  pair?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  timeframe?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  term?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  direction?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  entry_zone_min?: Prisma.NullableFloatFieldUpdateOperationsInput | number | null
  entry_zone_max?: Prisma.NullableFloatFieldUpdateOperationsInput | number | null
  strategy_accuracy?: Prisma.NullableFloatFieldUpdateOperationsInput | number | null
  last_signals?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue
  targets?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue
  trend_line?: Prisma.NullableFloatFieldUpdateOperationsInput | number | null
  stop_loss?: Prisma.NullableFloatFieldUpdateOperationsInput | number | null
  raw?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  timestamp?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type SignalUncheckedUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  pair?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  timeframe?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  term?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  direction?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  entry_zone_min?: Prisma.NullableFloatFieldUpdateOperationsInput | number | null
  entry_zone_max?: Prisma.NullableFloatFieldUpdateOperationsInput | number | null
  strategy_accuracy?: Prisma.NullableFloatFieldUpdateOperationsInput | number | null
  last_signals?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue
  targets?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue
  trend_line?: Prisma.NullableFloatFieldUpdateOperationsInput | number | null
  stop_loss?: Prisma.NullableFloatFieldUpdateOperationsInput | number | null
  raw?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  timestamp?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type SignalCreateManyInput = {
  id?: string
  pair?: string | null
  timeframe?: string | null
  term?: string | null
  direction?: string | null
  entry_zone_min?: number | null
  entry_zone_max?: number | null
  strategy_accuracy?: number | null
  last_signals?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue
  targets?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue
  trend_line?: number | null
  stop_loss?: number | null
  raw?: string | null
  timestamp?: Date | string
}

export type SignalUpdateManyMutationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  pair?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  timeframe?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  term?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  direction?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  entry_zone_min?: Prisma.NullableFloatFieldUpdateOperationsInput | number | null
  entry_zone_max?: Prisma.NullableFloatFieldUpdateOperationsInput | number | null
  strategy_accuracy?: Prisma.NullableFloatFieldUpdateOperationsInput | number | null
  last_signals?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue
  targets?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue
  trend_line?: Prisma.NullableFloatFieldUpdateOperationsInput | number | null
  stop_loss?: Prisma.NullableFloatFieldUpdateOperationsInput | number | null
  raw?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  timestamp?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type SignalUncheckedUpdateManyInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  pair?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  timeframe?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  term?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  direction?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  entry_zone_min?: Prisma.NullableFloatFieldUpdateOperationsInput | number | null
  entry_zone_max?: Prisma.NullableFloatFieldUpdateOperationsInput | number | null
  strategy_accuracy?: Prisma.NullableFloatFieldUpdateOperationsInput | number | null
  last_signals?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue
  targets?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue
  trend_line?: Prisma.NullableFloatFieldUpdateOperationsInput | number | null
  stop_loss?: Prisma.NullableFloatFieldUpdateOperationsInput | number | null
  raw?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  timestamp?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type SignalCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  pair?: Prisma.SortOrder
  timeframe?: Prisma.SortOrder
  term?: Prisma.SortOrder
  direction?: Prisma.SortOrder
  entry_zone_min?: Prisma.SortOrder
  entry_zone_max?: Prisma.SortOrder
  strategy_accuracy?: Prisma.SortOrder
  last_signals?: Prisma.SortOrder
  targets?: Prisma.SortOrder
  trend_line?: Prisma.SortOrder
  stop_loss?: Prisma.SortOrder
  raw?: Prisma.SortOrder
  timestamp?: Prisma.SortOrder
}

export type SignalAvgOrderByAggregateInput = {
  entry_zone_min?: Prisma.SortOrder
  entry_zone_max?: Prisma.SortOrder
  strategy_accuracy?: Prisma.SortOrder
  trend_line?: Prisma.SortOrder
  stop_loss?: Prisma.SortOrder
}

export type SignalMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  pair?: Prisma.SortOrder
  timeframe?: Prisma.SortOrder
  term?: Prisma.SortOrder
  direction?: Prisma.SortOrder
  entry_zone_min?: Prisma.SortOrder
  entry_zone_max?: Prisma.SortOrder
  strategy_accuracy?: Prisma.SortOrder
  trend_line?: Prisma.SortOrder
  stop_loss?: Prisma.SortOrder
  raw?: Prisma.SortOrder
  timestamp?: Prisma.SortOrder
}

export type SignalMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  pair?: Prisma.SortOrder
  timeframe?: Prisma.SortOrder
  term?: Prisma.SortOrder
  direction?: Prisma.SortOrder
  entry_zone_min?: Prisma.SortOrder
  entry_zone_max?: Prisma.SortOrder
  strategy_accuracy?: Prisma.SortOrder
  trend_line?: Prisma.SortOrder
  stop_loss?: Prisma.SortOrder
  raw?: Prisma.SortOrder
  timestamp?: Prisma.SortOrder
}

export type SignalSumOrderByAggregateInput = {
  entry_zone_min?: Prisma.SortOrder
  entry_zone_max?: Prisma.SortOrder
  strategy_accuracy?: Prisma.SortOrder
  trend_line?: Prisma.SortOrder
  stop_loss?: Prisma.SortOrder
}

export type NullableFloatFieldUpdateOperationsInput = {
  set?: number | null
  increment?: number
  decrement?: number
  multiply?: number
  divide?: number
}



export type SignalSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  pair?: boolean
  timeframe?: boolean
  term?: boolean
  direction?: boolean
  entry_zone_min?: boolean
  entry_zone_max?: boolean
  strategy_accuracy?: boolean
  last_signals?: boolean
  targets?: boolean
  trend_line?: boolean
  stop_loss?: boolean
  raw?: boolean
  timestamp?: boolean
}, ExtArgs["result"]["signal"]>

export type SignalSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  pair?: boolean
  timeframe?: boolean
  term?: boolean
  direction?: boolean
  entry_zone_min?: boolean
  entry_zone_max?: boolean
  strategy_accuracy?: boolean
  last_signals?: boolean
  targets?: boolean
  trend_line?: boolean
  stop_loss?: boolean
  raw?: boolean
  timestamp?: boolean
}, ExtArgs["result"]["signal"]>

export type SignalSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  pair?: boolean
  timeframe?: boolean
  term?: boolean
  direction?: boolean
  entry_zone_min?: boolean
  entry_zone_max?: boolean
  strategy_accuracy?: boolean
  last_signals?: boolean
  targets?: boolean
  trend_line?: boolean
  stop_loss?: boolean
  raw?: boolean
  timestamp?: boolean
}, ExtArgs["result"]["signal"]>

export type SignalSelectScalar = {
  id?: boolean
  pair?: boolean
  timeframe?: boolean
  term?: boolean
  direction?: boolean
  entry_zone_min?: boolean
  entry_zone_max?: boolean
  strategy_accuracy?: boolean
  last_signals?: boolean
  targets?: boolean
  trend_line?: boolean
  stop_loss?: boolean
  raw?: boolean
  timestamp?: boolean
}

export type SignalOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "pair" | "timeframe" | "term" | "direction" | "entry_zone_min" | "entry_zone_max" | "strategy_accuracy" | "last_signals" | "targets" | "trend_line" | "stop_loss" | "raw" | "timestamp", ExtArgs["result"]["signal"]>

export type $SignalPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "Signal"
  objects: {}
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: string
    pair: string | null
    timeframe: string | null
    term: string | null
    direction: string | null
    entry_zone_min: number | null
    entry_zone_max: number | null
    strategy_accuracy: number | null
    last_signals: runtime.JsonValue | null
    targets: runtime.JsonValue | null
    trend_line: number | null
    stop_loss: number | null
    raw: string | null
    timestamp: Date
  }, ExtArgs["result"]["signal"]>
  composites: {}
}

export type SignalGetPayload<S extends boolean | null | undefined | SignalDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$SignalPayload, S>

export type SignalCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<SignalFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: SignalCountAggregateInputType | true
  }

export interface SignalDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Signal'], meta: { name: 'Signal' } }
  /**
   * Find zero or one Signal that matches the filter.
   * @param {SignalFindUniqueArgs} args - Arguments to find a Signal
   * @example
   * // Get one Signal
   * const signal = await prisma.signal.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends SignalFindUniqueArgs>(args: Prisma.SelectSubset<T, SignalFindUniqueArgs<ExtArgs>>): Prisma.Prisma__SignalClient<runtime.Types.Result.GetResult<Prisma.$SignalPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one Signal that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {SignalFindUniqueOrThrowArgs} args - Arguments to find a Signal
   * @example
   * // Get one Signal
   * const signal = await prisma.signal.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends SignalFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, SignalFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__SignalClient<runtime.Types.Result.GetResult<Prisma.$SignalPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Signal that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {SignalFindFirstArgs} args - Arguments to find a Signal
   * @example
   * // Get one Signal
   * const signal = await prisma.signal.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends SignalFindFirstArgs>(args?: Prisma.SelectSubset<T, SignalFindFirstArgs<ExtArgs>>): Prisma.Prisma__SignalClient<runtime.Types.Result.GetResult<Prisma.$SignalPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Signal that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {SignalFindFirstOrThrowArgs} args - Arguments to find a Signal
   * @example
   * // Get one Signal
   * const signal = await prisma.signal.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends SignalFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, SignalFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__SignalClient<runtime.Types.Result.GetResult<Prisma.$SignalPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more Signals that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {SignalFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all Signals
   * const signals = await prisma.signal.findMany()
   * 
   * // Get first 10 Signals
   * const signals = await prisma.signal.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const signalWithIdOnly = await prisma.signal.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends SignalFindManyArgs>(args?: Prisma.SelectSubset<T, SignalFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$SignalPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a Signal.
   * @param {SignalCreateArgs} args - Arguments to create a Signal.
   * @example
   * // Create one Signal
   * const Signal = await prisma.signal.create({
   *   data: {
   *     // ... data to create a Signal
   *   }
   * })
   * 
   */
  create<T extends SignalCreateArgs>(args: Prisma.SelectSubset<T, SignalCreateArgs<ExtArgs>>): Prisma.Prisma__SignalClient<runtime.Types.Result.GetResult<Prisma.$SignalPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many Signals.
   * @param {SignalCreateManyArgs} args - Arguments to create many Signals.
   * @example
   * // Create many Signals
   * const signal = await prisma.signal.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends SignalCreateManyArgs>(args?: Prisma.SelectSubset<T, SignalCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many Signals and returns the data saved in the database.
   * @param {SignalCreateManyAndReturnArgs} args - Arguments to create many Signals.
   * @example
   * // Create many Signals
   * const signal = await prisma.signal.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many Signals and only return the `id`
   * const signalWithIdOnly = await prisma.signal.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends SignalCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, SignalCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$SignalPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a Signal.
   * @param {SignalDeleteArgs} args - Arguments to delete one Signal.
   * @example
   * // Delete one Signal
   * const Signal = await prisma.signal.delete({
   *   where: {
   *     // ... filter to delete one Signal
   *   }
   * })
   * 
   */
  delete<T extends SignalDeleteArgs>(args: Prisma.SelectSubset<T, SignalDeleteArgs<ExtArgs>>): Prisma.Prisma__SignalClient<runtime.Types.Result.GetResult<Prisma.$SignalPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one Signal.
   * @param {SignalUpdateArgs} args - Arguments to update one Signal.
   * @example
   * // Update one Signal
   * const signal = await prisma.signal.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends SignalUpdateArgs>(args: Prisma.SelectSubset<T, SignalUpdateArgs<ExtArgs>>): Prisma.Prisma__SignalClient<runtime.Types.Result.GetResult<Prisma.$SignalPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more Signals.
   * @param {SignalDeleteManyArgs} args - Arguments to filter Signals to delete.
   * @example
   * // Delete a few Signals
   * const { count } = await prisma.signal.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends SignalDeleteManyArgs>(args?: Prisma.SelectSubset<T, SignalDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Signals.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {SignalUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many Signals
   * const signal = await prisma.signal.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends SignalUpdateManyArgs>(args: Prisma.SelectSubset<T, SignalUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Signals and returns the data updated in the database.
   * @param {SignalUpdateManyAndReturnArgs} args - Arguments to update many Signals.
   * @example
   * // Update many Signals
   * const signal = await prisma.signal.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more Signals and only return the `id`
   * const signalWithIdOnly = await prisma.signal.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends SignalUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, SignalUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$SignalPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one Signal.
   * @param {SignalUpsertArgs} args - Arguments to update or create a Signal.
   * @example
   * // Update or create a Signal
   * const signal = await prisma.signal.upsert({
   *   create: {
   *     // ... data to create a Signal
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the Signal we want to update
   *   }
   * })
   */
  upsert<T extends SignalUpsertArgs>(args: Prisma.SelectSubset<T, SignalUpsertArgs<ExtArgs>>): Prisma.Prisma__SignalClient<runtime.Types.Result.GetResult<Prisma.$SignalPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of Signals.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {SignalCountArgs} args - Arguments to filter Signals to count.
   * @example
   * // Count the number of Signals
   * const count = await prisma.signal.count({
   *   where: {
   *     // ... the filter for the Signals we want to count
   *   }
   * })
  **/
  count<T extends SignalCountArgs>(
    args?: Prisma.Subset<T, SignalCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], SignalCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a Signal.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {SignalAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends SignalAggregateArgs>(args: Prisma.Subset<T, SignalAggregateArgs>): Prisma.PrismaPromise<GetSignalAggregateType<T>>

  /**
   * Group by Signal.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {SignalGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends SignalGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: SignalGroupByArgs['orderBy'] }
      : { orderBy?: SignalGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, SignalGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSignalGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the Signal model
 */
readonly fields: SignalFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for Signal.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__SignalClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the Signal model
 */
export interface SignalFieldRefs {
  readonly id: Prisma.FieldRef<"Signal", 'String'>
  readonly pair: Prisma.FieldRef<"Signal", 'String'>
  readonly timeframe: Prisma.FieldRef<"Signal", 'String'>
  readonly term: Prisma.FieldRef<"Signal", 'String'>
  readonly direction: Prisma.FieldRef<"Signal", 'String'>
  readonly entry_zone_min: Prisma.FieldRef<"Signal", 'Float'>
  readonly entry_zone_max: Prisma.FieldRef<"Signal", 'Float'>
  readonly strategy_accuracy: Prisma.FieldRef<"Signal", 'Float'>
  readonly last_signals: Prisma.FieldRef<"Signal", 'Json'>
  readonly targets: Prisma.FieldRef<"Signal", 'Json'>
  readonly trend_line: Prisma.FieldRef<"Signal", 'Float'>
  readonly stop_loss: Prisma.FieldRef<"Signal", 'Float'>
  readonly raw: Prisma.FieldRef<"Signal", 'String'>
  readonly timestamp: Prisma.FieldRef<"Signal", 'DateTime'>
}
    

// Custom InputTypes
/**
 * Signal findUnique
 */
export type SignalFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Signal
   */
  select?: Prisma.SignalSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Signal
   */
  omit?: Prisma.SignalOmit<ExtArgs> | null
  /**
   * Filter, which Signal to fetch.
   */
  where: Prisma.SignalWhereUniqueInput
}

/**
 * Signal findUniqueOrThrow
 */
export type SignalFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Signal
   */
  select?: Prisma.SignalSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Signal
   */
  omit?: Prisma.SignalOmit<ExtArgs> | null
  /**
   * Filter, which Signal to fetch.
   */
  where: Prisma.SignalWhereUniqueInput
}

/**
 * Signal findFirst
 */
export type SignalFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Signal
   */
  select?: Prisma.SignalSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Signal
   */
  omit?: Prisma.SignalOmit<ExtArgs> | null
  /**
   * Filter, which Signal to fetch.
   */
  where?: Prisma.SignalWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Signals to fetch.
   */
  orderBy?: Prisma.SignalOrderByWithRelationInput | Prisma.SignalOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for Signals.
   */
  cursor?: Prisma.SignalWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Signals from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Signals.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of Signals.
   */
  distinct?: Prisma.SignalScalarFieldEnum | Prisma.SignalScalarFieldEnum[]
}

/**
 * Signal findFirstOrThrow
 */
export type SignalFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Signal
   */
  select?: Prisma.SignalSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Signal
   */
  omit?: Prisma.SignalOmit<ExtArgs> | null
  /**
   * Filter, which Signal to fetch.
   */
  where?: Prisma.SignalWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Signals to fetch.
   */
  orderBy?: Prisma.SignalOrderByWithRelationInput | Prisma.SignalOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for Signals.
   */
  cursor?: Prisma.SignalWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Signals from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Signals.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of Signals.
   */
  distinct?: Prisma.SignalScalarFieldEnum | Prisma.SignalScalarFieldEnum[]
}

/**
 * Signal findMany
 */
export type SignalFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Signal
   */
  select?: Prisma.SignalSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Signal
   */
  omit?: Prisma.SignalOmit<ExtArgs> | null
  /**
   * Filter, which Signals to fetch.
   */
  where?: Prisma.SignalWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Signals to fetch.
   */
  orderBy?: Prisma.SignalOrderByWithRelationInput | Prisma.SignalOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing Signals.
   */
  cursor?: Prisma.SignalWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Signals from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Signals.
   */
  skip?: number
  distinct?: Prisma.SignalScalarFieldEnum | Prisma.SignalScalarFieldEnum[]
}

/**
 * Signal create
 */
export type SignalCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Signal
   */
  select?: Prisma.SignalSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Signal
   */
  omit?: Prisma.SignalOmit<ExtArgs> | null
  /**
   * The data needed to create a Signal.
   */
  data?: Prisma.XOR<Prisma.SignalCreateInput, Prisma.SignalUncheckedCreateInput>
}

/**
 * Signal createMany
 */
export type SignalCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many Signals.
   */
  data: Prisma.SignalCreateManyInput | Prisma.SignalCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * Signal createManyAndReturn
 */
export type SignalCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Signal
   */
  select?: Prisma.SignalSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the Signal
   */
  omit?: Prisma.SignalOmit<ExtArgs> | null
  /**
   * The data used to create many Signals.
   */
  data: Prisma.SignalCreateManyInput | Prisma.SignalCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * Signal update
 */
export type SignalUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Signal
   */
  select?: Prisma.SignalSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Signal
   */
  omit?: Prisma.SignalOmit<ExtArgs> | null
  /**
   * The data needed to update a Signal.
   */
  data: Prisma.XOR<Prisma.SignalUpdateInput, Prisma.SignalUncheckedUpdateInput>
  /**
   * Choose, which Signal to update.
   */
  where: Prisma.SignalWhereUniqueInput
}

/**
 * Signal updateMany
 */
export type SignalUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update Signals.
   */
  data: Prisma.XOR<Prisma.SignalUpdateManyMutationInput, Prisma.SignalUncheckedUpdateManyInput>
  /**
   * Filter which Signals to update
   */
  where?: Prisma.SignalWhereInput
  /**
   * Limit how many Signals to update.
   */
  limit?: number
}

/**
 * Signal updateManyAndReturn
 */
export type SignalUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Signal
   */
  select?: Prisma.SignalSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the Signal
   */
  omit?: Prisma.SignalOmit<ExtArgs> | null
  /**
   * The data used to update Signals.
   */
  data: Prisma.XOR<Prisma.SignalUpdateManyMutationInput, Prisma.SignalUncheckedUpdateManyInput>
  /**
   * Filter which Signals to update
   */
  where?: Prisma.SignalWhereInput
  /**
   * Limit how many Signals to update.
   */
  limit?: number
}

/**
 * Signal upsert
 */
export type SignalUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Signal
   */
  select?: Prisma.SignalSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Signal
   */
  omit?: Prisma.SignalOmit<ExtArgs> | null
  /**
   * The filter to search for the Signal to update in case it exists.
   */
  where: Prisma.SignalWhereUniqueInput
  /**
   * In case the Signal found by the `where` argument doesn't exist, create a new Signal with this data.
   */
  create: Prisma.XOR<Prisma.SignalCreateInput, Prisma.SignalUncheckedCreateInput>
  /**
   * In case the Signal was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.SignalUpdateInput, Prisma.SignalUncheckedUpdateInput>
}

/**
 * Signal delete
 */
export type SignalDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Signal
   */
  select?: Prisma.SignalSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Signal
   */
  omit?: Prisma.SignalOmit<ExtArgs> | null
  /**
   * Filter which Signal to delete.
   */
  where: Prisma.SignalWhereUniqueInput
}

/**
 * Signal deleteMany
 */
export type SignalDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which Signals to delete
   */
  where?: Prisma.SignalWhereInput
  /**
   * Limit how many Signals to delete.
   */
  limit?: number
}

/**
 * Signal without action
 */
export type SignalDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Signal
   */
  select?: Prisma.SignalSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Signal
   */
  omit?: Prisma.SignalOmit<ExtArgs> | null
}
