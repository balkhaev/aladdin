generator client {
  provider     = "prisma-client"
  output       = "../generated"
  moduleFormat = "esm"
  runtime      = "bun"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ============ Auth models ============

model User {
  id                  String                @id @map("_id")
  name                String
  email               String
  emailVerified       Boolean
  image               String?
  createdAt           DateTime
  updatedAt           DateTime
  sessions            Session[]
  accounts            Account[]
  portfolios          Portfolio[]
  orders              Order[]
  exchangeCredentials ExchangeCredentials[]
  auditLogs           AuditLog[]
  riskLimits          RiskLimit[]

  @@unique([email])
  @@map("user")
}

model Session {
  id        String   @id @map("_id")
  expiresAt DateTime
  token     String
  createdAt DateTime
  updatedAt DateTime
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id @map("_id")
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime

  @@map("account")
}

model Verification {
  id         String    @id @map("_id")
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}

// ============ Trading models ============

model Portfolio {
  id             String  @id @default(cuid())
  userId         String
  user           User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  name           String
  balance        Decimal @db.Decimal(20, 8)
  initialBalance Decimal @default(0) @db.Decimal(20, 8)
  currency       String  @default("USDT")

  positions  Position[]
  orders     Order[]
  riskLimits RiskLimit[]
  rebalances PortfolioRebalance[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
  @@map("portfolios")
}

model Position {
  id                    String    @id @default(cuid())
  portfolioId           String
  portfolio             Portfolio @relation(fields: [portfolioId], references: [id], onDelete: Cascade)
  symbol                String
  quantity              Decimal   @db.Decimal(20, 8)
  entryPrice            Decimal   @db.Decimal(20, 8)
  currentPrice          Decimal   @db.Decimal(20, 8)
  pnl                   Decimal   @default(0) @db.Decimal(20, 8)
  pnlPercent            Decimal   @default(0) @db.Decimal(10, 4)
  side                  String // LONG/SHORT
  exchange              String    @default("binance") // binance, bybit, okx, etc.
  exchangeCredentialsId String? // Link to exchange credentials used for sync

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([portfolioId])
  @@index([symbol])
  @@index([exchange])
  @@map("positions")
}

model Order {
  id              String     @id @default(cuid())
  userId          String
  user            User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  portfolioId     String?
  portfolio       Portfolio? @relation(fields: [portfolioId], references: [id], onDelete: SetNull)
  symbol          String
  type            String // MARKET/LIMIT/STOP_LOSS/TAKE_PROFIT/STOP_LOSS_LIMIT/TAKE_PROFIT_LIMIT
  side            String // BUY/SELL
  quantity        Decimal    @db.Decimal(20, 8)
  price           Decimal?   @db.Decimal(20, 8)
  stopPrice       Decimal?   @db.Decimal(20, 8)
  status          String // PENDING/FILLED/PARTIALLY_FILLED/CANCELLED/REJECTED/EXPIRED
  filledQty       Decimal    @default(0) @db.Decimal(20, 8)
  avgPrice        Decimal?   @db.Decimal(20, 8)
  exchange        String
  exchangeOrderId String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
  @@index([portfolioId])
  @@index([symbol])
  @@index([status])
  @@index([exchange])
  @@map("orders")
}

model ExchangeCredentials {
  id               String  @id @default(cuid())
  userId           String
  user             User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  exchange         String // binance, bybit, okx, etc.
  label            String // User-friendly name like "Main Trading Account"
  apiKey           String
  apiSecret        String // Encrypted with AES-256-GCM
  apiSecretIv      String // Initialization vector for decryption
  apiSecretAuthTag String // Authentication tag for GCM mode
  testnet          Boolean @default(false)
  isActive         Boolean @default(true)
  category         String  @default("spot") // spot, linear, inverse (для bybit futures)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, exchange, apiKey])
  @@index([userId])
  @@index([exchange])
  @@map("exchange_credentials")
}

model RiskLimit {
  id          String     @id @default(cuid())
  userId      String
  user        User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  portfolioId String?
  portfolio   Portfolio? @relation(fields: [portfolioId], references: [id], onDelete: Cascade)
  type        String // MAX_LEVERAGE, MAX_POSITION_SIZE, MAX_DAILY_LOSS, MIN_MARGIN
  value       Decimal    @db.Decimal(20, 8)
  enabled     Boolean    @default(true)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
  @@index([portfolioId])
  @@map("risk_limits")
}

model PortfolioRebalance {
  id          String    @id @default(cuid())
  portfolioId String
  portfolio   Portfolio @relation(fields: [portfolioId], references: [id], onDelete: Cascade)
  reason      String // Why rebalancing was triggered
  totalCost   Decimal   @db.Decimal(20, 8) // Transaction costs
  netBenefit  Decimal   @db.Decimal(20, 8) // Net benefit from rebalancing
  priority    String // low, medium, high
  actions     String // JSON array of rebalancing actions

  createdAt DateTime @default(now())

  @@index([portfolioId])
  @@index([createdAt])
  @@map("portfolio_rebalances")
}

model AuditLog {
  id         String  @id @default(cuid())
  userId     String
  user       User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  action     String // CREATE, UPDATE, DELETE, LOGIN, etc.
  resource   String // exchange_credentials, order, portfolio, etc.
  resourceId String? // ID of the affected resource
  details    String? // JSON with additional details
  ipAddress  String?
  userAgent  String?

  createdAt DateTime @default(now())

  @@index([userId])
  @@index([resource])
  @@index([action])
  @@index([createdAt])
  @@map("audit_logs")
}

// ============ Telega Signals ============

model Signal {
  id                String   @id @default(cuid())
  pair              String?
  timeframe         String?
  term              String?
  direction         String?
  entry_zone_min    Float?
  entry_zone_max    Float?
  strategy_accuracy Float?
  last_signals      Json?
  targets           Json?
  trend_line        Float?
  stop_loss         Float?
  raw               String?
  timestamp         DateTime @default(now())

  @@index([pair])
  @@index([timestamp])
  @@map("signals")
}
